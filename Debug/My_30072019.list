
My_30072019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b168  0800b168  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2a8  0800b2a8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2a8  0800b2a8  0001b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2b0  0800b2b0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004848  20000094  0800b34c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048dc  0800b34c  000248dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000261f7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d3a  00000000  00000000  000462bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb8  00000000  00000000  0004aff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ac0  00000000  00000000  0004ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027418  00000000  00000000  0004e770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018bb7  00000000  00000000  00075b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbacd  00000000  00000000  0008e73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a80  00000000  00000000  0016a288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b150 	.word	0x0800b150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b150 	.word	0x0800b150

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8fa 	bl	80006f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f00a f8ea 	bl	800a6d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f009 ff60 	bl	800a3c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	20004064 	.word	0x20004064

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20004064 	.word	0x20004064

08000554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff ffee 	bl	800053c <HAL_GetTick>
 8000560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056c:	d005      	beq.n	800057a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_Delay+0x40>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4413      	add	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057a:	bf00      	nop
 800057c:	f7ff ffde 	bl	800053c <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <HAL_Delay+0x28>
  {
  }
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000004 	.word	0x20000004

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	; (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff4c 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800071a:	f7ff ff61 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 800071e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f7ff ffb1 	bl	800068c <NVIC_EncodePriority>
 800072a:	4602      	mov	r2, r0
 800072c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff80 	bl	8000638 <__NVIC_SetPriority>
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff54 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b02      	cmp	r3, #2
 800076e:	d004      	beq.n	800077a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00c      	b.n	8000794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e16b      	b.n	8000a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007bc:	2201      	movs	r2, #1
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f040 815a 	bne.w	8000a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d00b      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d007      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	2b11      	cmp	r3, #17
 80007f0:	d003      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d130      	bne.n	800085c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2203      	movs	r2, #3
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4013      	ands	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	4313      	orrs	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	091b      	lsrs	r3, r3, #4
 8000846:	f003 0201 	and.w	r2, r3, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4313      	orrs	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4313      	orrs	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0xfc>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b12      	cmp	r3, #18
 800089a:	d123      	bne.n	80008e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	220f      	movs	r2, #15
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	691a      	ldr	r2, [r3, #16]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	08da      	lsrs	r2, r3, #3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3208      	adds	r2, #8
 80008de:	69b9      	ldr	r1, [r7, #24]
 80008e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	2203      	movs	r2, #3
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0203 	and.w	r2, r3, #3
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 80b4 	beq.w	8000a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a5e      	ldr	r2, [pc, #376]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000942:	4a5a      	ldr	r2, [pc, #360]	; (8000aac <HAL_GPIO_Init+0x30c>)
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	3302      	adds	r3, #2
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <HAL_GPIO_Init+0x310>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d02b      	beq.n	80009c6 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <HAL_GPIO_Init+0x314>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d025      	beq.n	80009c2 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_GPIO_Init+0x318>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d01f      	beq.n	80009be <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_GPIO_Init+0x31c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d019      	beq.n	80009ba <HAL_GPIO_Init+0x21a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4d      	ldr	r2, [pc, #308]	; (8000ac0 <HAL_GPIO_Init+0x320>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x216>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_GPIO_Init+0x324>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x212>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <HAL_GPIO_Init+0x328>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x20e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <HAL_GPIO_Init+0x32c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x20a>
 80009a6:	2307      	movs	r3, #7
 80009a8:	e00e      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009aa:	2308      	movs	r3, #8
 80009ac:	e00c      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e00a      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b2:	2305      	movs	r3, #5
 80009b4:	e008      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b6:	2304      	movs	r3, #4
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ba:	2303      	movs	r3, #3
 80009bc:	e004      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009be:	2302      	movs	r3, #2
 80009c0:	e002      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c6:	2300      	movs	r3, #0
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	f002 0203 	and.w	r2, r2, #3
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	4093      	lsls	r3, r2
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d8:	4934      	ldr	r1, [pc, #208]	; (8000aac <HAL_GPIO_Init+0x30c>)
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a0a:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a88:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f67f ae90 	bls.w	80007bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40021400 	.word	0x40021400
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40021c00 	.word	0x40021c00
 8000ad0:	40013c00 	.word	0x40013c00

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	401a      	ands	r2, r3
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d104      	bne.n	8000b2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	041a      	lsls	r2, r3, #16
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	b08f      	sub	sp, #60	; 0x3c
 8000b40:	af0a      	add	r7, sp, #40	; 0x28
 8000b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e054      	b.n	8000bf8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d106      	bne.n	8000b6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f009 ff11 	bl	800a990 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fbb1 	bl	80042f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	687e      	ldr	r6, [r7, #4]
 8000b9a:	466d      	mov	r5, sp
 8000b9c:	f106 0410 	add.w	r4, r6, #16
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bb0:	1d33      	adds	r3, r6, #4
 8000bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f003 fb2b 	bl	8004210 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fba8 	bl	8004316 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	687e      	ldr	r6, [r7, #4]
 8000bce:	466d      	mov	r5, sp
 8000bd0:	f106 0410 	add.w	r4, r6, #16
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000be4:	1d33      	adds	r3, r6, #4
 8000be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f003 fcbb 	bl	8004564 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c00 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70bb      	strb	r3, [r7, #2]
 8000c16:	4613      	mov	r3, r2
 8000c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_HCD_HC_Init+0x28>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e07f      	b.n	8000d28 <HAL_HCD_HC_Init+0x128>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	333d      	adds	r3, #61	; 0x3d
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3338      	adds	r3, #56	; 0x38
 8000c54:	787a      	ldrb	r2, [r7, #1]
 8000c56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c6a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3339      	adds	r3, #57	; 0x39
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333f      	adds	r3, #63	; 0x3f
 8000c90:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c9e:	b2d8      	uxtb	r0, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	333a      	adds	r3, #58	; 0x3a
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da0a      	bge.n	8000cd0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	333b      	adds	r3, #59	; 0x3b
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e009      	b.n	8000ce4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	333b      	adds	r3, #59	; 0x3b
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333c      	adds	r3, #60	; 0x3c
 8000cf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cf8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	787c      	ldrb	r4, [r7, #1]
 8000d00:	78ba      	ldrb	r2, [r7, #2]
 8000d02:	78f9      	ldrb	r1, [r7, #3]
 8000d04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f003 fda7 	bl	8004868 <USB_HC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_HCD_HC_Halt+0x1e>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e00f      	b.n	8000d6e <HAL_HCD_HC_Halt+0x3e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 ffe1 	bl	8004d26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70bb      	strb	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d92:	78fa      	ldrb	r2, [r7, #3]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	333b      	adds	r3, #59	; 0x3b
 8000da2:	78ba      	ldrb	r2, [r7, #2]
 8000da4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	333f      	adds	r3, #63	; 0x3f
 8000db6:	787a      	ldrb	r2, [r7, #1]
 8000db8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000dba:	7c3b      	ldrb	r3, [r7, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d114      	bne.n	8000dea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	3342      	adds	r3, #66	; 0x42
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	333d      	adds	r3, #61	; 0x3d
 8000de4:	7f3a      	ldrb	r2, [r7, #28]
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e009      	b.n	8000dfe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3342      	adds	r3, #66	; 0x42
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	f200 80d6 	bhi.w	8000fb2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_HCD_HC_SubmitRequest+0x94>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000f9d 	.word	0x08000f9d
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	08000f13 	.word	0x08000f13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e1c:	7c3b      	ldrb	r3, [r7, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 80c9 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 80c5 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8000e2c:	8b3b      	ldrh	r3, [r7, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d109      	bne.n	8000e46 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3351      	adds	r3, #81	; 0x51
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3351      	adds	r3, #81	; 0x51
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3342      	adds	r3, #66	; 0x42
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e70:	e0a1      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3342      	adds	r3, #66	; 0x42
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
      break;
 8000e86:	e096      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d120      	bne.n	8000ed0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3351      	adds	r3, #81	; 0x51
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000eb8:	e07e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
      break;
 8000ece:	e073      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3350      	adds	r3, #80	; 0x50
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3342      	adds	r3, #66	; 0x42
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
      break;
 8000efa:	e05d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
      break;
 8000f10:	e052      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d120      	bne.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3351      	adds	r3, #81	; 0x51
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3342      	adds	r3, #66	; 0x42
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f42:	e039      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3342      	adds	r3, #66	; 0x42
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
      break;
 8000f58:	e02e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3342      	adds	r3, #66	; 0x42
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
      break;
 8000f84:	e018      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3342      	adds	r3, #66	; 0x42
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
      break;
 8000f9a:	e00d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3342      	adds	r3, #66	; 0x42
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
      break;
 8000fb0:	e002      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8000fb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	8b39      	ldrh	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4403      	add	r3, r0
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	335c      	adds	r3, #92	; 0x5c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	334c      	adds	r3, #76	; 0x4c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3339      	adds	r3, #57	; 0x39
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	335d      	adds	r3, #93	; 0x5d
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3338      	adds	r3, #56	; 0x38
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	18d1      	adds	r1, r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f003 fd16 	bl	8004a7c <USB_HC_StartXfer>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop

0800105c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fa33 	bl	80044de <USB_GetMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 80ef 	bne.w	800125e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fa17 	bl	80044b8 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80e5 	beq.w	800125c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fa0e 	bl	80044b8 <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010a6:	d104      	bne.n	80010b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f9fe 	bl	80044b8 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010c6:	d104      	bne.n	80010d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f9ee 	bl	80044b8 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010e6:	d104      	bne.n	80010f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 f9de 	bl	80044b8 <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b02      	cmp	r3, #2
 8001104:	d103      	bne.n	800110e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2202      	movs	r2, #2
 800110c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f9d0 	bl	80044b8 <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001122:	d115      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800112c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f009 fca4 	bl	800aa8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fac6 	bl	80046dc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f9af 	bl	80044b8 <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d102      	bne.n	800116c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f001 f966 	bl	8002438 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f9a1 	bl	80044b8 <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b08      	cmp	r3, #8
 800117e:	d106      	bne.n	800118e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f009 fc67 	bl	800aa54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f990 	bl	80044b8 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a2:	d138      	bne.n	8001216 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fdab 	bl	8004d04 <USB_HC_ReadInterrupt>
 80011ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e025      	b.n	8001202 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d018      	beq.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e0:	d106      	bne.n	80011f0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8cf 	bl	800138c <HCD_HC_IN_IRQHandler>
 80011ee:	e005      	b.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fcfd 	bl	8001bf6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3d4      	bcc.n	80011b6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f94c 	bl	80044b8 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b10      	cmp	r3, #16
 8001228:	d101      	bne.n	800122e <HAL_HCD_IRQHandler+0x1d2>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_HCD_IRQHandler+0x1d4>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d014      	beq.n	800125e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0210 	bic.w	r2, r2, #16
 8001242:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 f84b 	bl	80022e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0210 	orr.w	r2, r2, #16
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e000      	b.n	800125e <HAL_HCD_IRQHandler+0x202>
      return;
 800125c:	bf00      	nop
    }
  }
}
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_HCD_Start+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e013      	b.n	80012a2 <HAL_HCD_Start+0x3e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 f823 	bl	80042d2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fa86 	bl	80047a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_HCD_Stop+0x16>
 80012bc:	2302      	movs	r3, #2
 80012be:	e00d      	b.n	80012dc <HAL_HCD_Stop+0x32>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fe65 	bl	8004f9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fa2d 	bl	8004750 <USB_ResetPort>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	335c      	adds	r3, #92	; 0x5c
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	334c      	adds	r3, #76	; 0x4c
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fa6f 	bl	8004844 <USB_GetCurrentFrame>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fa4a 	bl	8004816 <USB_GetHostSpeed>
 8001382:	4603      	mov	r3, r0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d119      	bne.n	80013f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c8:	461a      	mov	r2, r3
 80013ca:	2304      	movs	r3, #4
 80013cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	0151      	lsls	r1, r2, #5
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	440a      	add	r2, r1
 80013e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	60d3      	str	r3, [r2, #12]
 80013ee:	e0ce      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d12c      	bne.n	8001462 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	015a      	lsls	r2, r3, #5
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4413      	add	r3, r2
 8001410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001414:	461a      	mov	r2, r3
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	335d      	adds	r3, #93	; 0x5d
 800142c:	2207      	movs	r2, #7
 800142e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	0151      	lsls	r1, r2, #5
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	440a      	add	r2, r1
 8001446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fc63 	bl	8004d26 <USB_HC_Halt>
 8001460:	e095      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4413      	add	r3, r2
 800146a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b20      	cmp	r3, #32
 8001476:	d109      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001484:	461a      	mov	r2, r3
 8001486:	2320      	movs	r3, #32
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	e080      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d134      	bne.n	800150c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	0151      	lsls	r1, r2, #5
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	440a      	add	r2, r1
 80014b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	335d      	adds	r3, #93	; 0x5d
 80014d2:	2205      	movs	r2, #5
 80014d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f4:	461a      	mov	r2, r3
 80014f6:	2308      	movs	r3, #8
 80014f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc0e 	bl	8004d26 <USB_HC_Halt>
 800150a:	e040      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d134      	bne.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	0151      	lsls	r1, r2, #5
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	440a      	add	r2, r1
 800153a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fbe9 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	461a      	mov	r2, r3
 8001562:	2310      	movs	r3, #16
 8001564:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	335d      	adds	r3, #93	; 0x5d
 8001576:	2208      	movs	r2, #8
 8001578:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d122      	bne.n	80015ec <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	0151      	lsls	r1, r2, #5
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	440a      	add	r2, r1
 80015bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fba8 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	461a      	mov	r2, r3
 80015e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015ea:	e300      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 80fd 	bne.w	80017fe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01b      	beq.n	8001644 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3348      	adds	r3, #72	; 0x48
 800161c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	0159      	lsls	r1, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	440b      	add	r3, r1
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001630:	1ad1      	subs	r1, r2, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4403      	add	r3, r0
 8001640:	334c      	adds	r3, #76	; 0x4c
 8001642:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	335d      	adds	r3, #93	; 0x5d
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3358      	adds	r3, #88	; 0x58
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4413      	add	r3, r2
 8001674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001678:	461a      	mov	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	333f      	adds	r3, #63	; 0x3f
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	333f      	adds	r3, #63	; 0x3f
 80016a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d121      	bne.n	80016ee <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	0151      	lsls	r1, r2, #5
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	440a      	add	r2, r1
 80016c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fb26 	bl	8004d26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	461a      	mov	r2, r3
 80016e8:	2310      	movs	r3, #16
 80016ea:	6093      	str	r3, [r2, #8]
 80016ec:	e070      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	333f      	adds	r3, #63	; 0x3f
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d12a      	bne.n	800175a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	0151      	lsls	r1, r2, #5
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	440a      	add	r2, r1
 800171a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800171e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001722:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	335c      	adds	r3, #92	; 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	335c      	adds	r3, #92	; 0x5c
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4601      	mov	r1, r0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f009 f9a8 	bl	800aaa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001758:	e03a      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	333f      	adds	r3, #63	; 0x3f
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12f      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335c      	adds	r3, #92	; 0x5c
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3350      	adds	r3, #80	; 0x50
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3350      	adds	r3, #80	; 0x50
 80017ac:	4602      	mov	r2, r0
 80017ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	335c      	adds	r3, #92	; 0x5c
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4601      	mov	r1, r0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f009 f96c 	bl	800aaa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3350      	adds	r3, #80	; 0x50
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f083 0301 	eor.w	r3, r3, #1
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3350      	adds	r3, #80	; 0x50
 80017f8:	4602      	mov	r2, r0
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	e1f7      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b02      	cmp	r3, #2
 8001812:	f040 811a 	bne.w	8001a4a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	0151      	lsls	r1, r2, #5
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	440a      	add	r2, r1
 800182c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001830:	f023 0302 	bic.w	r3, r3, #2
 8001834:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	335d      	adds	r3, #93	; 0x5d
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10a      	bne.n	8001862 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	335c      	adds	r3, #92	; 0x5c
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e0d9      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335d      	adds	r3, #93	; 0x5d
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10a      	bne.n	800188e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	335c      	adds	r3, #92	; 0x5c
 8001888:	2205      	movs	r2, #5
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e0c3      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	335d      	adds	r3, #93	; 0x5d
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d00a      	beq.n	80018ba <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	335d      	adds	r3, #93	; 0x5d
 80018b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d156      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3358      	adds	r3, #88	; 0x58
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4403      	add	r3, r0
 80018dc:	3358      	adds	r3, #88	; 0x58
 80018de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3358      	adds	r3, #88	; 0x58
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d914      	bls.n	8001920 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3358      	adds	r3, #88	; 0x58
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	335c      	adds	r3, #92	; 0x5c
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e009      	b.n	8001934 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	335c      	adds	r3, #92	; 0x5c
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800194a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e056      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	335d      	adds	r3, #93	; 0x5d
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d123      	bne.n	80019c6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335c      	adds	r3, #92	; 0x5c
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e027      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	335d      	adds	r3, #93	; 0x5d
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d11c      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3358      	adds	r3, #88	; 0x58
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4403      	add	r3, r0
 80019fe:	3358      	adds	r3, #88	; 0x58
 8001a00:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	335c      	adds	r3, #92	; 0x5c
 8001a12:	2204      	movs	r2, #4
 8001a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	2302      	movs	r3, #2
 8001a26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	335c      	adds	r3, #92	; 0x5c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4601      	mov	r1, r0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f009 f830 	bl	800aaa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a48:	e0d1      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d13e      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3358      	adds	r3, #88	; 0x58
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3358      	adds	r3, #88	; 0x58
 8001aa4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	335d      	adds	r3, #93	; 0x5d
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f92e 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	6093      	str	r3, [r2, #8]
}
 8001adc:	e087      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d17c      	bne.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	333f      	adds	r3, #63	; 0x3f
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d122      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3358      	adds	r3, #88	; 0x58
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f8ec 	bl	8004d26 <USB_HC_Halt>
 8001b4e:	e045      	b.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333f      	adds	r3, #63	; 0x3f
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d12f      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3358      	adds	r3, #88	; 0x58
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	335d      	adds	r3, #93	; 0x5d
 8001ba8:	2203      	movs	r2, #3
 8001baa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 f8a5 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	6093      	str	r3, [r2, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d119      	bne.n	8001c5a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2304      	movs	r3, #4
 8001c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	0151      	lsls	r1, r2, #5
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	440a      	add	r2, r1
 8001c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c58:	e33e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d141      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2320      	movs	r3, #32
 8001c80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	333d      	adds	r3, #61	; 0x3d
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 831f 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333d      	adds	r3, #61	; 0x3d
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	335c      	adds	r3, #92	; 0x5c
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f81a 	bl	8004d26 <USB_HC_Halt>
}
 8001cf2:	e2f1      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d13f      	bne.n	8001d8a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	335d      	adds	r3, #93	; 0x5d
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333d      	adds	r3, #61	; 0x3d
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	0151      	lsls	r1, r2, #5
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 ffd8 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2340      	movs	r3, #64	; 0x40
 8001d86:	6093      	str	r3, [r2, #8]
}
 8001d88:	e2a6      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d122      	bne.n	8001de8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 ffaa 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	6093      	str	r3, [r2, #8]
}
 8001de6:	e277      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d135      	bne.n	8001e6a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3358      	adds	r3, #88	; 0x58
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	0151      	lsls	r1, r2, #5
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	440a      	add	r2, r1
 8001e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 ff72 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	335d      	adds	r3, #93	; 0x5d
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
}
 8001e68:	e236      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d12b      	bne.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 ff32 	bl	8004d26 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335d      	adds	r3, #93	; 0x5d
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	e1ff      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d155      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3358      	adds	r3, #88	; 0x58
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	335d      	adds	r3, #93	; 0x5d
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	; 0x3d
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d114      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333d      	adds	r3, #61	; 0x3d
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fed0 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	e19e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d12b      	bne.n	8002008 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fea3 	bl	8004d26 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335d      	adds	r3, #93	; 0x5d
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	6093      	str	r3, [r2, #8]
}
 8002006:	e167      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d135      	bne.n	800208c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fe6b 	bl	8004d26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	e125      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 811a 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d137      	bne.n	800214a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	333f      	adds	r3, #63	; 0x3f
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d00b      	beq.n	800211c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	333f      	adds	r3, #63	; 0x3f
 8002114:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	f040 80c5 	bne.w	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3351      	adds	r3, #81	; 0x51
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3351      	adds	r3, #81	; 0x51
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e0ad      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335d      	adds	r3, #93	; 0x5d
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d10a      	bne.n	8002176 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e097      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	335d      	adds	r3, #93	; 0x5d
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d10a      	bne.n	80021a2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e081      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335d      	adds	r3, #93	; 0x5d
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10a      	bne.n	80021ce <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2205      	movs	r2, #5
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e06b      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	335d      	adds	r3, #93	; 0x5d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d00a      	beq.n	80021fa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335d      	adds	r3, #93	; 0x5d
 80021f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d155      	bne.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3358      	adds	r3, #88	; 0x58
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4403      	add	r3, r0
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d914      	bls.n	8002260 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	3358      	adds	r3, #88	; 0x58
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e009      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002292:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4601      	mov	r1, r0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f008 fbe8 	bl	800aaa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HCD_RXQLVL_IRQHandler+0x44>
 800231c:	2b05      	cmp	r3, #5
 800231e:	f000 8082 	beq.w	8002426 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002322:	e083      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07f      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	; 0x44
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d074      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3344      	adds	r3, #68	; 0x44
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	b292      	uxth	r2, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f002 f883 	bl	8004466 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3344      	adds	r3, #68	; 0x44
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	18d1      	adds	r1, r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4403      	add	r3, r0
 8002384:	3344      	adds	r3, #68	; 0x44
 8002386:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	18d1      	adds	r1, r2, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4403      	add	r3, r0
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HCD_RXQLVL_IRQHandler+0x154>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d031      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	4602      	mov	r2, r0
 8002422:	701a      	strb	r2, [r3, #0]
      break;
 8002424:	e001      	b.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800242a:	bf00      	nop
  }
}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	1ff80000 	.word	0x1ff80000

08002438 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002464:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d10b      	bne.n	8002488 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f008 faf8 	bl	800aa70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d132      	bne.n	80024f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d126      	bne.n	80024f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d113      	bne.n	80024d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b6:	d106      	bne.n	80024c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 f90c 	bl	80046dc <USB_InitFSLSPClkSel>
 80024c4:	e011      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 f905 	bl	80046dc <USB_InitFSLSPClkSel>
 80024d2:	e00a      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	461a      	mov	r2, r3
 80024e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f008 faee 	bl	800aacc <HAL_HCD_PortEnabled_Callback>
 80024f0:	e002      	b.n	80024f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f008 faf8 	bl	800aae8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d103      	bne.n	800250a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e11f      	b.n	8002772 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f007 ff6a 	bl	800a420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f000 fd3e 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_I2C_Init+0x25c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_I2C_Init+0x260>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_I2C_Init+0x264>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0db      	b.n	8002772 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_I2C_Init+0x268>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_I2C_Init+0x25c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_I2C_Init+0x26c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4956      	ldr	r1, [pc, #344]	; (800277c <HAL_I2C_Init+0x25c>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d80d      	bhi.n	8002644 <HAL_I2C_Init+0x124>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	bf38      	it	cc
 8002640:	2304      	movcc	r3, #4
 8002642:	e04f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_I2C_Init+0x150>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_I2C_Init+0x176>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x17e>
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_Init+0x1a4>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e58      	subs	r0, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6911      	ldr	r1, [r2, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	000186a0 	.word	0x000186a0
 8002780:	001e847f 	.word	0x001e847f
 8002784:	003d08ff 	.word	0x003d08ff
 8002788:	431bde83 	.word	0x431bde83
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e25b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d075      	beq.n	800289a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ae:	4ba3      	ldr	r3, [pc, #652]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d00c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05b      	beq.n	8002898 <HAL_RCC_OscConfig+0x108>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d157      	bne.n	8002898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e236      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x74>
 80027f6:	4b91      	ldr	r3, [pc, #580]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a90      	ldr	r2, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b8b      	ldr	r3, [pc, #556]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a8a      	ldr	r2, [pc, #552]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a87      	ldr	r2, [pc, #540]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a83      	ldr	r2, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fd fe78 	bl	800053c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7fd fe74 	bl	800053c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1fb      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xc0>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fd fe64 	bl	800053c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fd fe60 	bl	800053c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1e7      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0xe8>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d063      	beq.n	800296e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d11c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_RCC_OscConfig+0x152>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1bb      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e2:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4952      	ldr	r1, [pc, #328]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	e03a      	b.n	800296e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_OscConfig+0x2b0>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fd fe19 	bl	800053c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290e:	f7fd fe15 	bl	800053c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e19c      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4940      	ldr	r1, [pc, #256]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e015      	b.n	800296e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x2b0>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fd fdf8 	bl	800053c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002950:	f7fd fdf4 	bl	800053c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e17b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d030      	beq.n	80029dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_OscConfig+0x2b4>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fd fdd8 	bl	800053c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002990:	f7fd fdd4 	bl	800053c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e15b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x200>
 80029ae:	e015      	b.n	80029dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x2b4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fd fdc1 	bl	800053c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029be:	f7fd fdbd 	bl	800053c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e144      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a0 	beq.w	8002b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fd fd83 	bl	800053c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e011      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	42470000 	.word	0x42470000
 8002a44:	42470e80 	.word	0x42470e80
 8002a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fd fd76 	bl	800053c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0fd      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a76      	ldr	r2, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a73      	ldr	r2, [pc, #460]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x32a>
 8002aa2:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a70      	ldr	r2, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a6d      	ldr	r2, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fd fd3b 	bl	800053c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fd fd37 	bl	800053c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0bc      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x33a>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fd fd25 	bl	800053c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fd fd21 	bl	800053c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0a6      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8092 	beq.w	8002c58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d05c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d141      	bne.n	8002bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fd fcf5 	bl	800053c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fd fcf1 	bl	800053c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e078      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b68:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	019b      	lsls	r3, r3, #6
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	4933      	ldr	r1, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fd fcca 	bl	800053c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fd fcc6 	bl	800053c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e04d      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x41c>
 8002bca:	e045      	b.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fd fcb3 	bl	800053c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fd fcaf 	bl	800053c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x44a>
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e029      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d115      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40007000 	.word	0x40007000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470060 	.word	0x42470060

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d90c      	bls.n	8002cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4934      	ldr	r1, [pc, #208]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fd fbec 	bl	800053c <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fd fbe8 	bl	800053c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20c      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f007 fc5e 	bl	800a6d8 <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	0800b290 	.word	0x0800b290
 8002e34:	2000002c 	.word	0x2000002c
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d007      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x32>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d008      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x38>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 80b4 	bne.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e6a:	60bb      	str	r3, [r7, #8]
       break;
 8002e6c:	e0b3      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e70:	60bb      	str	r3, [r7, #8]
      break;
 8002e72:	e0b0      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04a      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	ea03 0501 	and.w	r5, r3, r1
 8002ea0:	ea04 0602 	and.w	r6, r4, r2
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0154      	lsls	r4, r2, #5
 8002eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eb6:	014b      	lsls	r3, r1, #5
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4622      	mov	r2, r4
 8002ebc:	1b49      	subs	r1, r1, r5
 8002ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	0194      	lsls	r4, r2, #6
 8002ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ed0:	018b      	lsls	r3, r1, #6
 8002ed2:	1a5b      	subs	r3, r3, r1
 8002ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	00e2      	lsls	r2, r4, #3
 8002ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ee6:	00d9      	lsls	r1, r3, #3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	195b      	adds	r3, r3, r5
 8002eee:	eb44 0406 	adc.w	r4, r4, r6
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	0262      	lsls	r2, r4, #9
 8002efc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f00:	0259      	lsls	r1, r3, #9
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	4621      	mov	r1, r4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fd f95c 	bl	80001d0 <__aeabi_uldivmod>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e049      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	ea03 0501 	and.w	r5, r3, r1
 8002f36:	ea04 0602 	and.w	r6, r4, r2
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0154      	lsls	r4, r2, #5
 8002f48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f4c:	014b      	lsls	r3, r1, #5
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4622      	mov	r2, r4
 8002f52:	1b49      	subs	r1, r1, r5
 8002f54:	eb62 0206 	sbc.w	r2, r2, r6
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0194      	lsls	r4, r2, #6
 8002f62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	1a5b      	subs	r3, r3, r1
 8002f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	195b      	adds	r3, r3, r5
 8002f84:	eb44 0406 	adc.w	r4, r4, r6
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	02a2      	lsls	r2, r4, #10
 8002f92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f96:	0299      	lsls	r1, r3, #10
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	f7fd f911 	bl	80001d0 <__aeabi_uldivmod>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fd2:	60bb      	str	r3, [r7, #8]
      break;
 8002fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	2000002c 	.word	0x2000002c

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4601      	mov	r1, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	0800b2a0 	.word	0x0800b2a0

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003030:	f7ff ffdc 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003034:	4601      	mov	r1, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0b5b      	lsrs	r3, r3, #13
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	0800b2a0 	.word	0x0800b2a0

08003054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	220f      	movs	r2, #15
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_GetClockConfig+0x60>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e056      	b.n	8003178 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f007 f9e3 	bl	800a4b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0104 	and.w	r1, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01d      	b.n	80031ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f815 	bl	80031d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 f968 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d007      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	d122      	bne.n	800328e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d11b      	bne.n	800328e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0202 	mvn.w	r2, #2
 800325e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8ee 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 800327a:	e005      	b.n	8003288 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8e0 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8f1 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d122      	bne.n	80032e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d11b      	bne.n	80032e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0204 	mvn.w	r2, #4
 80032b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8c4 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 80032ce:	e005      	b.n	80032dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8b6 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8c7 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d122      	bne.n	8003336 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11b      	bne.n	8003336 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0208 	mvn.w	r2, #8
 8003306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2204      	movs	r2, #4
 800330c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f89a 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003322:	e005      	b.n	8003330 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f88c 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f89d 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d122      	bne.n	800338a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d11b      	bne.n	800338a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0210 	mvn.w	r2, #16
 800335a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2208      	movs	r2, #8
 8003360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f870 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003376:	e005      	b.n	8003384 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f862 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f873 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d10e      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0201 	mvn.w	r2, #1
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f006 fff2 	bl	800a39a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d10e      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f903 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d10e      	bne.n	800340e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d107      	bne.n	800340e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f838 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0220 	mvn.w	r2, #32
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8cd 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d027      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d023      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x12c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <TIM_Base_SetConfig+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	40001800 	.word	0x40001800
 80035cc:	40001c00 	.word	0x40001c00
 80035d0:	40002000 	.word	0x40002000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e03f      	b.n	800368e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f006 ff8c 	bl	800a540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa69 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x52>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f996 	bl	8003a14 <UART_Receive_IT>
      return;
 80036e8:	e0d1      	b.n	800388e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80b0 	beq.w	8003852 <HAL_UART_IRQHandler+0x1ba>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_UART_IRQHandler+0x70>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a5 	beq.w	8003852 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_UART_IRQHandler+0x90>
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_UART_IRQHandler+0xb0>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	f043 0202 	orr.w	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_UART_IRQHandler+0xd0>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00f      	beq.n	8003792 <HAL_UART_IRQHandler+0xfa>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_UART_IRQHandler+0xee>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	f043 0208 	orr.w	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d078      	beq.n	800388c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_UART_IRQHandler+0x11c>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f930 	bl	8003a14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_UART_IRQHandler+0x144>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d031      	beq.n	8003840 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f879 	bl	80038d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d123      	bne.n	8003838 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_UART_IRQHandler+0x1fc>)
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc ffa1 	bl	800075c <HAL_DMA_Abort_IT>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382e:	e00e      	b.n	800384e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f845 	bl	80038c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003836:	e00a      	b.n	800384e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f841 	bl	80038c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	e006      	b.n	800384e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f83d 	bl	80038c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800384c:	e01e      	b.n	800388c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384e:	bf00      	nop
    return;
 8003850:	e01c      	b.n	800388c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_UART_IRQHandler+0x1d6>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f866 	bl	8003938 <UART_Transmit_IT>
    return;
 800386c:	e00f      	b.n	800388e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_UART_IRQHandler+0x1f6>
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8ae 	bl	80039e4 <UART_EndTransmit_IT>
    return;
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <HAL_UART_IRQHandler+0x1f6>
    return;
 800388c:	bf00      	nop
  }
}
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	08003911 	.word	0x08003911

08003898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ffc8 	bl	80038c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b21      	cmp	r3, #33	; 0x21
 800394a:	d144      	bne.n	80039d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d11a      	bne.n	800398c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]
 800397e:	e00e      	b.n	800399e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e008      	b.n	800399e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6211      	str	r1, [r2, #32]
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4619      	mov	r1, r3
 80039ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff47 	bl	8003898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b22      	cmp	r3, #34	; 0x22
 8003a26:	d171      	bne.n	8003b0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d123      	bne.n	8003a7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10e      	bne.n	8003a5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5c:	e029      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
 8003a78:	e01b      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6858      	ldr	r0, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6291      	str	r1, [r2, #40]	; 0x28
 8003a92:	b2c2      	uxtb	r2, r0
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e00c      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	1c58      	adds	r0, r3, #1
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6288      	str	r0, [r1, #40]	; 0x28
 8003aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d120      	bne.n	8003b08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0220 	bic.w	r2, r2, #32
 8003ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fed4 	bl	80038ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b5a:	f023 030c 	bic.w	r3, r3, #12
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	f040 818b 	bne.w	8003ea0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4ac1      	ldr	r2, [pc, #772]	; (8003e94 <UART_SetConfig+0x37c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d005      	beq.n	8003ba0 <UART_SetConfig+0x88>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4abf      	ldr	r2, [pc, #764]	; (8003e98 <UART_SetConfig+0x380>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	f040 80bd 	bne.w	8003d1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7ff fa44 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	461d      	mov	r5, r3
 8003baa:	f04f 0600 	mov.w	r6, #0
 8003bae:	46a8      	mov	r8, r5
 8003bb0:	46b1      	mov	r9, r6
 8003bb2:	eb18 0308 	adds.w	r3, r8, r8
 8003bb6:	eb49 0409 	adc.w	r4, r9, r9
 8003bba:	4698      	mov	r8, r3
 8003bbc:	46a1      	mov	r9, r4
 8003bbe:	eb18 0805 	adds.w	r8, r8, r5
 8003bc2:	eb49 0906 	adc.w	r9, r9, r6
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bda:	4688      	mov	r8, r1
 8003bdc:	4691      	mov	r9, r2
 8003bde:	eb18 0005 	adds.w	r0, r8, r5
 8003be2:	eb49 0106 	adc.w	r1, r9, r6
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	461d      	mov	r5, r3
 8003bec:	f04f 0600 	mov.w	r6, #0
 8003bf0:	196b      	adds	r3, r5, r5
 8003bf2:	eb46 0406 	adc.w	r4, r6, r6
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fc fae9 	bl	80001d0 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	461a      	mov	r2, r3
 8003c04:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <UART_SetConfig+0x384>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	461d      	mov	r5, r3
 8003c14:	f04f 0600 	mov.w	r6, #0
 8003c18:	46a9      	mov	r9, r5
 8003c1a:	46b2      	mov	sl, r6
 8003c1c:	eb19 0309 	adds.w	r3, r9, r9
 8003c20:	eb4a 040a 	adc.w	r4, sl, sl
 8003c24:	4699      	mov	r9, r3
 8003c26:	46a2      	mov	sl, r4
 8003c28:	eb19 0905 	adds.w	r9, r9, r5
 8003c2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c44:	4689      	mov	r9, r1
 8003c46:	4692      	mov	sl, r2
 8003c48:	eb19 0005 	adds.w	r0, r9, r5
 8003c4c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	461d      	mov	r5, r3
 8003c56:	f04f 0600 	mov.w	r6, #0
 8003c5a:	196b      	adds	r3, r5, r5
 8003c5c:	eb46 0406 	adc.w	r4, r6, r6
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	f7fc fab4 	bl	80001d0 <__aeabi_uldivmod>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b8b      	ldr	r3, [pc, #556]	; (8003e9c <UART_SetConfig+0x384>)
 8003c70:	fba3 1302 	umull	r1, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2164      	movs	r1, #100	; 0x64
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	3332      	adds	r3, #50	; 0x32
 8003c82:	4a86      	ldr	r2, [pc, #536]	; (8003e9c <UART_SetConfig+0x384>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c90:	4498      	add	r8, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	461d      	mov	r5, r3
 8003c96:	f04f 0600 	mov.w	r6, #0
 8003c9a:	46a9      	mov	r9, r5
 8003c9c:	46b2      	mov	sl, r6
 8003c9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	46a2      	mov	sl, r4
 8003caa:	eb19 0905 	adds.w	r9, r9, r5
 8003cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	4692      	mov	sl, r2
 8003cca:	eb19 0005 	adds.w	r0, r9, r5
 8003cce:	eb4a 0106 	adc.w	r1, sl, r6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	f04f 0600 	mov.w	r6, #0
 8003cdc:	196b      	adds	r3, r5, r5
 8003cde:	eb46 0406 	adc.w	r4, r6, r6
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f7fc fa73 	bl	80001d0 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <UART_SetConfig+0x384>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <UART_SetConfig+0x384>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 0207 	and.w	r2, r3, #7
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4442      	add	r2, r8
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	e26f      	b.n	80041fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d1a:	f7ff f973 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	461d      	mov	r5, r3
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	46a8      	mov	r8, r5
 8003d2a:	46b1      	mov	r9, r6
 8003d2c:	eb18 0308 	adds.w	r3, r8, r8
 8003d30:	eb49 0409 	adc.w	r4, r9, r9
 8003d34:	4698      	mov	r8, r3
 8003d36:	46a1      	mov	r9, r4
 8003d38:	eb18 0805 	adds.w	r8, r8, r5
 8003d3c:	eb49 0906 	adc.w	r9, r9, r6
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d54:	4688      	mov	r8, r1
 8003d56:	4691      	mov	r9, r2
 8003d58:	eb18 0005 	adds.w	r0, r8, r5
 8003d5c:	eb49 0106 	adc.w	r1, r9, r6
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	461d      	mov	r5, r3
 8003d66:	f04f 0600 	mov.w	r6, #0
 8003d6a:	196b      	adds	r3, r5, r5
 8003d6c:	eb46 0406 	adc.w	r4, r6, r6
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	f7fc fa2c 	bl	80001d0 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <UART_SetConfig+0x384>)
 8003d80:	fba3 2302 	umull	r2, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	461d      	mov	r5, r3
 8003d8e:	f04f 0600 	mov.w	r6, #0
 8003d92:	46a9      	mov	r9, r5
 8003d94:	46b2      	mov	sl, r6
 8003d96:	eb19 0309 	adds.w	r3, r9, r9
 8003d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9e:	4699      	mov	r9, r3
 8003da0:	46a2      	mov	sl, r4
 8003da2:	eb19 0905 	adds.w	r9, r9, r5
 8003da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dbe:	4689      	mov	r9, r1
 8003dc0:	4692      	mov	sl, r2
 8003dc2:	eb19 0005 	adds.w	r0, r9, r5
 8003dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	461d      	mov	r5, r3
 8003dd0:	f04f 0600 	mov.w	r6, #0
 8003dd4:	196b      	adds	r3, r5, r5
 8003dd6:	eb46 0406 	adc.w	r4, r6, r6
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7fc f9f7 	bl	80001d0 <__aeabi_uldivmod>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <UART_SetConfig+0x384>)
 8003dea:	fba3 1302 	umull	r1, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2164      	movs	r1, #100	; 0x64
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3332      	adds	r3, #50	; 0x32
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <UART_SetConfig+0x384>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e0a:	4498      	add	r8, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	461d      	mov	r5, r3
 8003e10:	f04f 0600 	mov.w	r6, #0
 8003e14:	46a9      	mov	r9, r5
 8003e16:	46b2      	mov	sl, r6
 8003e18:	eb19 0309 	adds.w	r3, r9, r9
 8003e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e20:	4699      	mov	r9, r3
 8003e22:	46a2      	mov	sl, r4
 8003e24:	eb19 0905 	adds.w	r9, r9, r5
 8003e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e40:	4689      	mov	r9, r1
 8003e42:	4692      	mov	sl, r2
 8003e44:	eb19 0005 	adds.w	r0, r9, r5
 8003e48:	eb4a 0106 	adc.w	r1, sl, r6
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	461d      	mov	r5, r3
 8003e52:	f04f 0600 	mov.w	r6, #0
 8003e56:	196b      	adds	r3, r5, r5
 8003e58:	eb46 0406 	adc.w	r4, r6, r6
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	f7fc f9b6 	bl	80001d0 <__aeabi_uldivmod>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <UART_SetConfig+0x384>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <UART_SetConfig+0x384>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4442      	add	r2, r8
 8003e90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e92:	e1b2      	b.n	80041fa <UART_SetConfig+0x6e2>
 8003e94:	40011000 	.word	0x40011000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4ad7      	ldr	r2, [pc, #860]	; (8004204 <UART_SetConfig+0x6ec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d005      	beq.n	8003eb6 <UART_SetConfig+0x39e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4ad6      	ldr	r2, [pc, #856]	; (8004208 <UART_SetConfig+0x6f0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	f040 80d1 	bne.w	8004058 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb6:	f7ff f8b9 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	469a      	mov	sl, r3
 8003ec0:	f04f 0b00 	mov.w	fp, #0
 8003ec4:	46d0      	mov	r8, sl
 8003ec6:	46d9      	mov	r9, fp
 8003ec8:	eb18 0308 	adds.w	r3, r8, r8
 8003ecc:	eb49 0409 	adc.w	r4, r9, r9
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	46a1      	mov	r9, r4
 8003ed4:	eb18 080a 	adds.w	r8, r8, sl
 8003ed8:	eb49 090b 	adc.w	r9, r9, fp
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	4691      	mov	r9, r2
 8003ef4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef8:	eb4b 0609 	adc.w	r6, fp, r9
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	f04f 0400 	mov.w	r4, #0
 8003f0e:	0094      	lsls	r4, r2, #2
 8003f10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f14:	008b      	lsls	r3, r1, #2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	f7fc f957 	bl	80001d0 <__aeabi_uldivmod>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	461a      	mov	r2, r3
 8003f28:	4bb8      	ldr	r3, [pc, #736]	; (800420c <UART_SetConfig+0x6f4>)
 8003f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	469b      	mov	fp, r3
 8003f38:	f04f 0c00 	mov.w	ip, #0
 8003f3c:	46d9      	mov	r9, fp
 8003f3e:	46e2      	mov	sl, ip
 8003f40:	eb19 0309 	adds.w	r3, r9, r9
 8003f44:	eb4a 040a 	adc.w	r4, sl, sl
 8003f48:	4699      	mov	r9, r3
 8003f4a:	46a2      	mov	sl, r4
 8003f4c:	eb19 090b 	adds.w	r9, r9, fp
 8003f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f68:	4689      	mov	r9, r1
 8003f6a:	4692      	mov	sl, r2
 8003f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f70:	eb4c 060a 	adc.w	r6, ip, sl
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	f04f 0400 	mov.w	r4, #0
 8003f86:	0094      	lsls	r4, r2, #2
 8003f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	4631      	mov	r1, r6
 8003f96:	f7fc f91b 	bl	80001d0 <__aeabi_uldivmod>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b9a      	ldr	r3, [pc, #616]	; (800420c <UART_SetConfig+0x6f4>)
 8003fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2164      	movs	r1, #100	; 0x64
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a95      	ldr	r2, [pc, #596]	; (800420c <UART_SetConfig+0x6f4>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	4498      	add	r8, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	469b      	mov	fp, r3
 8003fc6:	f04f 0c00 	mov.w	ip, #0
 8003fca:	46d9      	mov	r9, fp
 8003fcc:	46e2      	mov	sl, ip
 8003fce:	eb19 0309 	adds.w	r3, r9, r9
 8003fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	46a2      	mov	sl, r4
 8003fda:	eb19 090b 	adds.w	r9, r9, fp
 8003fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff6:	4689      	mov	r9, r1
 8003ff8:	4692      	mov	sl, r2
 8003ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8003ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	0094      	lsls	r4, r2, #2
 8004016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800401a:	008b      	lsls	r3, r1, #2
 800401c:	461a      	mov	r2, r3
 800401e:	4623      	mov	r3, r4
 8004020:	4628      	mov	r0, r5
 8004022:	4631      	mov	r1, r6
 8004024:	f7fc f8d4 	bl	80001d0 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	461a      	mov	r2, r3
 800402e:	4b77      	ldr	r3, [pc, #476]	; (800420c <UART_SetConfig+0x6f4>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a72      	ldr	r2, [pc, #456]	; (800420c <UART_SetConfig+0x6f4>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4442      	add	r2, r8
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	e0d0      	b.n	80041fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe ffd4 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800405c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	469a      	mov	sl, r3
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	46d0      	mov	r8, sl
 8004068:	46d9      	mov	r9, fp
 800406a:	eb18 0308 	adds.w	r3, r8, r8
 800406e:	eb49 0409 	adc.w	r4, r9, r9
 8004072:	4698      	mov	r8, r3
 8004074:	46a1      	mov	r9, r4
 8004076:	eb18 080a 	adds.w	r8, r8, sl
 800407a:	eb49 090b 	adc.w	r9, r9, fp
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800408a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004092:	4688      	mov	r8, r1
 8004094:	4691      	mov	r9, r2
 8004096:	eb1a 0508 	adds.w	r5, sl, r8
 800409a:	eb4b 0609 	adc.w	r6, fp, r9
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	f04f 0400 	mov.w	r4, #0
 80040b0:	0094      	lsls	r4, r2, #2
 80040b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	4631      	mov	r1, r6
 80040c0:	f7fc f886 	bl	80001d0 <__aeabi_uldivmod>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b50      	ldr	r3, [pc, #320]	; (800420c <UART_SetConfig+0x6f4>)
 80040cc:	fba3 2302 	umull	r2, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	469b      	mov	fp, r3
 80040da:	f04f 0c00 	mov.w	ip, #0
 80040de:	46d9      	mov	r9, fp
 80040e0:	46e2      	mov	sl, ip
 80040e2:	eb19 0309 	adds.w	r3, r9, r9
 80040e6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ea:	4699      	mov	r9, r3
 80040ec:	46a2      	mov	sl, r4
 80040ee:	eb19 090b 	adds.w	r9, r9, fp
 80040f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410a:	4689      	mov	r9, r1
 800410c:	4692      	mov	sl, r2
 800410e:	eb1b 0509 	adds.w	r5, fp, r9
 8004112:	eb4c 060a 	adc.w	r6, ip, sl
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4619      	mov	r1, r3
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	f04f 0400 	mov.w	r4, #0
 8004128:	0094      	lsls	r4, r2, #2
 800412a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	461a      	mov	r2, r3
 8004132:	4623      	mov	r3, r4
 8004134:	4628      	mov	r0, r5
 8004136:	4631      	mov	r1, r6
 8004138:	f7fc f84a 	bl	80001d0 <__aeabi_uldivmod>
 800413c:	4603      	mov	r3, r0
 800413e:	460c      	mov	r4, r1
 8004140:	461a      	mov	r2, r3
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <UART_SetConfig+0x6f4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a2d      	ldr	r2, [pc, #180]	; (800420c <UART_SetConfig+0x6f4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004162:	4498      	add	r8, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	469b      	mov	fp, r3
 8004168:	f04f 0c00 	mov.w	ip, #0
 800416c:	46d9      	mov	r9, fp
 800416e:	46e2      	mov	sl, ip
 8004170:	eb19 0309 	adds.w	r3, r9, r9
 8004174:	eb4a 040a 	adc.w	r4, sl, sl
 8004178:	4699      	mov	r9, r3
 800417a:	46a2      	mov	sl, r4
 800417c:	eb19 090b 	adds.w	r9, r9, fp
 8004180:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004198:	4689      	mov	r9, r1
 800419a:	4692      	mov	sl, r2
 800419c:	eb1b 0509 	adds.w	r5, fp, r9
 80041a0:	eb4c 060a 	adc.w	r6, ip, sl
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	f04f 0400 	mov.w	r4, #0
 80041b6:	0094      	lsls	r4, r2, #2
 80041b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	4623      	mov	r3, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	4631      	mov	r1, r6
 80041c6:	f7fc f803 	bl	80001d0 <__aeabi_uldivmod>
 80041ca:	4603      	mov	r3, r0
 80041cc:	460c      	mov	r4, r1
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <UART_SetConfig+0x6f4>)
 80041d2:	fba3 1302 	umull	r1, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2164      	movs	r1, #100	; 0x64
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	; 0x32
 80041e4:	4a09      	ldr	r2, [pc, #36]	; (800420c <UART_SetConfig+0x6f4>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4442      	add	r2, r8
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	e7ff      	b.n	80041fa <UART_SetConfig+0x6e2>
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004204:	40011000 	.word	0x40011000
 8004208:	40011400 	.word	0x40011400
 800420c:	51eb851f 	.word	0x51eb851f

08004210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004210:	b084      	sub	sp, #16
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	f107 001c 	add.w	r0, r7, #28
 800421e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2b01      	cmp	r3, #1
 8004226:	d122      	bne.n	800426e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800423c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d105      	bne.n	8004262 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f94a 	bl	80044fc <USB_CoreReset>
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e01a      	b.n	80042a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f93e 	bl	80044fc <USB_CoreReset>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
 8004296:	e005      	b.n	80042a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10b      	bne.n	80042c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f043 0206 	orr.w	r2, r3, #6
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ce:	b004      	add	sp, #16
 80042d0:	4770      	bx	lr

080042d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 0201 	bic.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e00b      	b.n	800435a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e001      	b.n	800435a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e003      	b.n	8004362 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800435a:	2032      	movs	r0, #50	; 0x32
 800435c:	f7fc f8fa 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <USB_FlushTxFifo+0x48>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d0f0      	beq.n	8004386 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	00030d40 	.word	0x00030d40

080043b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2210      	movs	r2, #16
 80043c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <USB_FlushRxFifo+0x40>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e006      	b.n	80043ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d0f0      	beq.n	80043ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	00030d40 	.word	0x00030d40

080043fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	460b      	mov	r3, r1
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800441a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11a      	bne.n	8004458 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004422:	88bb      	ldrh	r3, [r7, #4]
 8004424:	3303      	adds	r3, #3
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e00f      	b.n	8004450 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	031a      	lsls	r2, r3, #12
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4413      	add	r3, r2
 8004438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443c:	461a      	mov	r2, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3304      	adds	r3, #4
 8004448:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3301      	adds	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3eb      	bcc.n	8004430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004466:	b480      	push	{r7}
 8004468:	b089      	sub	sp, #36	; 0x24
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	3303      	adds	r3, #3
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e00b      	b.n	80044a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	601a      	str	r2, [r3, #0]
    pDest++;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3304      	adds	r3, #4
 800449a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	3301      	adds	r3, #1
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3ef      	bcc.n	800448a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044aa:	69fb      	ldr	r3, [r7, #28]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3724      	adds	r7, #36	; 0x24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <USB_CoreReset+0x64>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e01b      	b.n	8004552 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	daf2      	bge.n	8004508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <USB_CoreReset+0x64>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e006      	b.n	8004552 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d0f0      	beq.n	8004532 <USB_CoreReset+0x36>

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	00030d40 	.word	0x00030d40

08004564 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	f107 001c 	add.w	r0, r7, #28
 8004572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004580:	461a      	mov	r2, r3
 8004582:	2300      	movs	r3, #0
 8004584:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10a      	bne.n	80045d2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ca:	f043 0304 	orr.w	r3, r3, #4
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e014      	b.n	80045fc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e009      	b.n	80045fc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045f6:	f023 0304 	bic.w	r3, r3, #4
 80045fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80045fc:	2110      	movs	r1, #16
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff feb4 	bl	800436c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fed7 	bl	80043b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e015      	b.n	800463c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d3e5      	bcc.n	8004610 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8ac 	bl	80047a4 <USB_DriveVbus>

  HAL_Delay(200U);
 800464c:	20c8      	movs	r0, #200	; 0xc8
 800464e:	f7fb ff81 	bl	8000554 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <USB_HostInit+0x164>)
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <USB_HostInit+0x168>)
 800467e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004682:	e009      	b.n	8004698 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <USB_HostInit+0x16c>)
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <USB_HostInit+0x170>)
 8004694:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f043 0210 	orr.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <USB_HostInit+0x174>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046c2:	b004      	add	sp, #16
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	01000200 	.word	0x01000200
 80046cc:	00e00300 	.word	0x00e00300
 80046d0:	00600080 	.word	0x00600080
 80046d4:	004000e0 	.word	0x004000e0
 80046d8:	a3200008 	.word	0xa3200008

080046dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004714:	4313      	orrs	r3, r2
 8004716:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004724:	461a      	mov	r2, r3
 8004726:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800472a:	6053      	str	r3, [r2, #4]
 800472c:	e009      	b.n	8004742 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d106      	bne.n	8004742 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473a:	461a      	mov	r2, r3
 800473c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004740:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004770:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800477a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004780:	2064      	movs	r0, #100	; 0x64
 8004782:	f7fb fee7 	bl	8000554 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800478e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004792:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004794:	200a      	movs	r0, #10
 8004796:	f7fb fedd 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <USB_DriveVbus+0x44>
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d106      	bne.n	80047e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d109      	bne.n	8004808 <USB_DriveVbus+0x64>
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004806:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	0c5b      	lsrs	r3, r3, #17
 8004834:	f003 0303 	and.w	r3, r3, #3
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	b29b      	uxth	r3, r3
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	4608      	mov	r0, r1
 8004872:	4611      	mov	r1, r2
 8004874:	461a      	mov	r2, r3
 8004876:	4603      	mov	r3, r0
 8004878:	70fb      	strb	r3, [r7, #3]
 800487a:	460b      	mov	r3, r1
 800487c:	70bb      	strb	r3, [r7, #2]
 800487e:	4613      	mov	r3, r2
 8004880:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	461a      	mov	r2, r3
 8004898:	f04f 33ff 	mov.w	r3, #4294967295
 800489c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800489e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d87e      	bhi.n	80049a4 <USB_HC_Init+0x13c>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <USB_HC_Init+0x44>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	08004967 	.word	0x08004967
 80048b4:	080048bd 	.word	0x080048bd
 80048b8:	08004929 	.word	0x08004929
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80048ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80048d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	da10      	bge.n	80048fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80048f8:	e057      	b.n	80049aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d051      	beq.n	80049aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	440a      	add	r2, r1
 800491c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004920:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004924:	60d3      	str	r3, [r2, #12]
      break;
 8004926:	e040      	b.n	80049aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	461a      	mov	r2, r3
 8004936:	f240 639d 	movw	r3, #1693	; 0x69d
 800493a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800493c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004940:	2b00      	cmp	r3, #0
 8004942:	da34      	bge.n	80049ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	440a      	add	r2, r1
 800495a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004964:	e023      	b.n	80049ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	f240 2325 	movw	r3, #549	; 0x225
 8004978:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800497a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	da17      	bge.n	80049b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	440a      	add	r2, r1
 8004998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80049a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80049a2:	e006      	b.n	80049b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	e004      	b.n	80049b4 <USB_HC_Init+0x14c>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <USB_HC_Init+0x14c>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <USB_HC_Init+0x14c>
      break;
 80049b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ce:	4313      	orrs	r3, r2
 80049d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80049de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da03      	bge.n	80049ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e001      	b.n	80049f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80049f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80049fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e001      	b.n	8004a06 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a06:	787b      	ldrb	r3, [r7, #1]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a0e:	78bb      	ldrb	r3, [r7, #2]
 8004a10:	02db      	lsls	r3, r3, #11
 8004a12:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a16:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a1c:	049b      	lsls	r3, r3, #18
 8004a1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a22:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	0159      	lsls	r1, r3, #5
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a42:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004a44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d10f      	bne.n	8004a6c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop

08004a7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	; 0x30
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d028      	beq.n	8004af8 <USB_HC_StartXfer+0x7c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d124      	bne.n	8004af8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <USB_HC_StartXfer+0x50>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	795b      	ldrb	r3, [r3, #5]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fa2e 	bl	8004f24 <USB_DoPing>
      return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e112      	b.n	8004cf2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d112      	bne.n	8004af8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004af0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2200      	movs	r2, #0
 8004af6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d018      	beq.n	8004b32 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	8912      	ldrh	r2, [r2, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	8912      	ldrh	r2, [r2, #8]
 8004b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b14:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004b16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b18:	8b7b      	ldrh	r3, [r7, #26]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90b      	bls.n	8004b36 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	8912      	ldrh	r2, [r2, #8]
 8004b28:	fb02 f203 	mul.w	r2, r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	611a      	str	r2, [r3, #16]
 8004b30:	e001      	b.n	8004b36 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004b32:	2301      	movs	r3, #1
 8004b34:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	8912      	ldrh	r2, [r2, #8]
 8004b44:	fb02 f203 	mul.w	r2, r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b56:	04d9      	lsls	r1, r3, #19
 8004b58:	4b68      	ldr	r3, [pc, #416]	; (8004cfc <USB_HC_StartXfer+0x280>)
 8004b5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	7a9b      	ldrb	r3, [r3, #10]
 8004b62:	075b      	lsls	r3, r3, #29
 8004b64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	0148      	lsls	r0, r1, #5
 8004b6c:	6a39      	ldr	r1, [r7, #32]
 8004b6e:	4401      	add	r1, r0
 8004b70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68d9      	ldr	r1, [r3, #12]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	460a      	mov	r2, r1
 8004b90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	6a3a      	ldr	r2, [r7, #32]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	7e7b      	ldrb	r3, [r7, #25]
 8004bda:	075b      	lsls	r3, r3, #29
 8004bdc:	69f9      	ldr	r1, [r7, #28]
 8004bde:	0148      	lsls	r0, r1, #5
 8004be0:	6a39      	ldr	r1, [r7, #32]
 8004be2:	4401      	add	r1, r0
 8004be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a41      	ldr	r2, [pc, #260]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004bfc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bfe:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c06:	4a3e      	ldr	r2, [pc, #248]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	78db      	ldrb	r3, [r3, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d006      	beq.n	8004c20 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c12:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	4a39      	ldr	r2, [pc, #228]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e005      	b.n	8004c2c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c20:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c28:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c2a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c2c:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c34:	4a32      	ldr	r2, [pc, #200]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c36:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <USB_HC_StartXfer+0x284>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d14e      	bne.n	8004cf0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d14a      	bne.n	8004cf0 <USB_HC_StartXfer+0x274>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d046      	beq.n	8004cf0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	79db      	ldrb	r3, [r3, #7]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d830      	bhi.n	8004ccc <USB_HC_StartXfer+0x250>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <USB_HC_StartXfer+0x1f4>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004c81 	.word	0x08004c81
 8004c7c:	08004ca5 	.word	0x08004ca5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3303      	adds	r3, #3
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004c8a:	8afa      	ldrh	r2, [r7, #22]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d91c      	bls.n	8004cd0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]
          }
          break;
 8004ca2:	e015      	b.n	8004cd0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3303      	adds	r3, #3
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004cae:	8afa      	ldrh	r2, [r7, #22]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d90a      	bls.n	8004cd4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	619a      	str	r2, [r3, #24]
          }
          break;
 8004cca:	e003      	b.n	8004cd4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <USB_HC_StartXfer+0x25a>
          break;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <USB_HC_StartXfer+0x25a>
          break;
 8004cd4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785a      	ldrb	r2, [r3, #1]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	b298      	uxth	r0, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fb86 	bl	80043fc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	1ff80000 	.word	0x1ff80000
 8004d00:	200000b0 	.word	0x200000b0

08004d04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	b29b      	uxth	r3, r3
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b087      	sub	sp, #28
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0c9b      	lsrs	r3, r3, #18
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <USB_HC_Halt+0x3a>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d16c      	bne.n	8004e3a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d143      	bne.n	8004e14 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3301      	adds	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df8:	d81d      	bhi.n	8004e36 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e10:	d0ec      	beq.n	8004dec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e12:	e080      	b.n	8004f16 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e32:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e34:	e06f      	b.n	8004f16 <USB_HC_Halt+0x1f0>
          break;
 8004e36:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e38:	e06d      	b.n	8004f16 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d143      	bne.n	8004ef2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ec8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed6:	d81d      	bhi.n	8004f14 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eee:	d0ec      	beq.n	8004eca <USB_HC_Halt+0x1a4>
 8004ef0:	e011      	b.n	8004f16 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e000      	b.n	8004f16 <USB_HC_Halt+0x1f0>
          break;
 8004f14:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	04da      	lsls	r2, r3, #19
 8004f40:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <USB_DoPing+0x74>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	1ff80000 	.word	0x1ff80000

08004f9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff f9a1 	bl	80042f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004fb2:	2110      	movs	r1, #16
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff f9d9 	bl	800436c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff f9fc 	bl	80043b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	e01f      	b.n	8005006 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fdc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b0f      	cmp	r3, #15
 800500a:	d9dc      	bls.n	8004fc6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e034      	b.n	800507c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005028:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005030:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005038:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	461a      	mov	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3301      	adds	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005058:	d80c      	bhi.n	8005074 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005070:	d0ec      	beq.n	800504c <USB_StopHost+0xb0>
 8005072:	e000      	b.n	8005076 <USB_StopHost+0xda>
        break;
 8005074:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3301      	adds	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0f      	cmp	r3, #15
 8005080:	d9c7      	bls.n	8005012 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005088:	461a      	mov	r2, r3
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f91a 	bl	80042d2 <USB_EnableGlobalInt>

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80050b0:	2301      	movs	r3, #1
 80050b2:	2202      	movs	r2, #2
 80050b4:	2102      	movs	r1, #2
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fcba 	bl	8005a30 <USBH_FindInterface>
 80050bc:	4603      	mov	r3, r0
 80050be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2bff      	cmp	r3, #255	; 0xff
 80050c4:	d002      	beq.n	80050cc <USBH_CDC_InterfaceInit+0x24>
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d901      	bls.n	80050d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80050cc:	2302      	movs	r3, #2
 80050ce:	e13d      	b.n	800534c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fc8f 	bl	80059f8 <USBH_SelectInterface>
 80050da:	4603      	mov	r3, r0
 80050dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80050de:	7bbb      	ldrb	r3, [r7, #14]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80050e4:	2302      	movs	r3, #2
 80050e6:	e131      	b.n	800534c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80050ee:	2050      	movs	r0, #80	; 0x50
 80050f0:	f005 ff50 	bl	800af94 <malloc>
 80050f4:	4603      	mov	r3, r0
 80050f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005108:	2302      	movs	r3, #2
 800510a:	e11f      	b.n	800534c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800510c:	2250      	movs	r2, #80	; 0x50
 800510e:	2100      	movs	r1, #0
 8005110:	68b8      	ldr	r0, [r7, #8]
 8005112:	f005 ff5a 	bl	800afca <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	211a      	movs	r1, #26
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	4413      	add	r3, r2
 8005122:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b25b      	sxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	da15      	bge.n	800515a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	211a      	movs	r1, #26
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	211a      	movs	r1, #26
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005154:	881a      	ldrh	r2, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f002 f894 	bl	800728e <USBH_AllocPipe>
 8005166:	4603      	mov	r3, r0
 8005168:	461a      	mov	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	7819      	ldrb	r1, [r3, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	7858      	ldrb	r0, [r3, #1]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	8952      	ldrh	r2, [r2, #10]
 8005186:	9202      	str	r2, [sp, #8]
 8005188:	2203      	movs	r2, #3
 800518a:	9201      	str	r2, [sp, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4623      	mov	r3, r4
 8005190:	4602      	mov	r2, r0
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f002 f84c 	bl	8007230 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f005 fe1d 	bl	800ade0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80051a6:	2300      	movs	r3, #0
 80051a8:	2200      	movs	r2, #0
 80051aa:	210a      	movs	r1, #10
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fc3f 	bl	8005a30 <USBH_FindInterface>
 80051b2:	4603      	mov	r3, r0
 80051b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	2bff      	cmp	r3, #255	; 0xff
 80051ba:	d002      	beq.n	80051c2 <USBH_CDC_InterfaceInit+0x11a>
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d901      	bls.n	80051c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80051c2:	2302      	movs	r3, #2
 80051c4:	e0c2      	b.n	800534c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	211a      	movs	r1, #26
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da16      	bge.n	800520c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	211a      	movs	r1, #26
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	211a      	movs	r1, #26
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	4413      	add	r3, r2
 8005200:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	835a      	strh	r2, [r3, #26]
 800520a:	e015      	b.n	8005238 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	211a      	movs	r1, #26
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	211a      	movs	r1, #26
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	4413      	add	r3, r2
 800522e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	211a      	movs	r1, #26
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b25b      	sxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	da16      	bge.n	800527e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	211a      	movs	r1, #26
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	211a      	movs	r1, #26
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005276:	881a      	ldrh	r2, [r3, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	835a      	strh	r2, [r3, #26]
 800527c:	e015      	b.n	80052aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	211a      	movs	r1, #26
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	211a      	movs	r1, #26
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	4413      	add	r3, r2
 80052a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	7b9b      	ldrb	r3, [r3, #14]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 ffec 	bl	800728e <USBH_AllocPipe>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	7bdb      	ldrb	r3, [r3, #15]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 ffe2 	bl	800728e <USBH_AllocPipe>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	7b59      	ldrb	r1, [r3, #13]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	7b98      	ldrb	r0, [r3, #14]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	8b12      	ldrh	r2, [r2, #24]
 80052ea:	9202      	str	r2, [sp, #8]
 80052ec:	2202      	movs	r2, #2
 80052ee:	9201      	str	r2, [sp, #4]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4623      	mov	r3, r4
 80052f4:	4602      	mov	r2, r0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 ff9a 	bl	8007230 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	7b19      	ldrb	r1, [r3, #12]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	7bd8      	ldrb	r0, [r3, #15]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	8b52      	ldrh	r2, [r2, #26]
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	2202      	movs	r2, #2
 8005318:	9201      	str	r2, [sp, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4623      	mov	r3, r4
 800531e:	4602      	mov	r2, r0
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 ff85 	bl	8007230 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	7b5b      	ldrb	r3, [r3, #13]
 8005332:	2200      	movs	r2, #0
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f005 fd52 	bl	800ade0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	7b1b      	ldrb	r3, [r3, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f005 fd4b 	bl	800ade0 <USBH_LL_SetToggle>

  return USBH_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bd90      	pop	{r4, r7, pc}

08005354 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 ff7a 	bl	800726e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 ffa5 	bl	80072d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	7b1b      	ldrb	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	7b1b      	ldrb	r3, [r3, #12]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 ff67 	bl	800726e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	7b1b      	ldrb	r3, [r3, #12]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 ff92 	bl	80072d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	7b5b      	ldrb	r3, [r3, #13]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	7b5b      	ldrb	r3, [r3, #13]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 ff54 	bl	800726e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	7b5b      	ldrb	r3, [r3, #13]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 ff7f 	bl	80072d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f005 fdd9 	bl	800afa4 <free>
    phost->pActiveClass->pData = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053f8:	2200      	movs	r2, #0
 80053fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3340      	adds	r3, #64	; 0x40
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8b1 	bl	8005586 <GetLineCoding>
 8005424:	4603      	mov	r3, r0
 8005426:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005428:	7afb      	ldrb	r3, [r7, #11]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005434:	2102      	movs	r1, #2
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800543a:	7afb      	ldrb	r3, [r7, #11]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005464:	2b04      	cmp	r3, #4
 8005466:	d877      	bhi.n	8005558 <USBH_CDC_Process+0x114>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <USBH_CDC_Process+0x2c>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005485 	.word	0x08005485
 8005474:	0800548b 	.word	0x0800548b
 8005478:	080054bb 	.word	0x080054bb
 800547c:	0800552f 	.word	0x0800552f
 8005480:	0800553d 	.word	0x0800553d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e06d      	b.n	8005566 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f897 	bl	80055c4 <SetLineCoding>
 8005496:	4603      	mov	r3, r0
 8005498:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80054a8:	e058      	b.n	800555c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d055      	beq.n	800555c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2204      	movs	r2, #4
 80054b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80054b8:	e050      	b.n	800555c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3340      	adds	r3, #64	; 0x40
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f860 	bl	8005586 <GetLineCoding>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d126      	bne.n	800551e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	791b      	ldrb	r3, [r3, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d13b      	bne.n	8005560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d133      	bne.n	8005560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005504:	429a      	cmp	r2, r3
 8005506:	d12b      	bne.n	8005560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005512:	429a      	cmp	r2, r3
 8005514:	d124      	bne.n	8005560 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f984 	bl	8005824 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800551c:	e020      	b.n	8005560 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d01d      	beq.n	8005560 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800552c:	e018      	b.n	8005560 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f867 	bl	8005602 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8f8 	bl	800572a <CDC_ProcessReception>
      break;
 800553a:	e014      	b.n	8005566 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 f953 	bl	80067ea <USBH_ClrFeature>
 8005544:	4603      	mov	r3, r0
 8005546:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005548:	7bbb      	ldrb	r3, [r7, #14]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005556:	e005      	b.n	8005564 <USBH_CDC_Process+0x120>

    default:
      break;
 8005558:	bf00      	nop
 800555a:	e004      	b.n	8005566 <USBH_CDC_Process+0x122>
      break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <USBH_CDC_Process+0x122>
      break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <USBH_CDC_Process+0x122>
      break;
 8005564:	bf00      	nop

  }

  return status;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	22a1      	movs	r2, #161	; 0xa1
 8005594:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2207      	movs	r2, #7
 80055ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2207      	movs	r2, #7
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 faf8 	bl	8006baa <USBH_CtlReq>
 80055ba:	4603      	mov	r3, r0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2221      	movs	r2, #33	; 0x21
 80055d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2207      	movs	r2, #7
 80055ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2207      	movs	r2, #7
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fad9 	bl	8006baa <USBH_CtlReq>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af02      	add	r7, sp, #8
 8005608:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005614:	2300      	movs	r3, #0
 8005616:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800561e:	2b01      	cmp	r3, #1
 8005620:	d002      	beq.n	8005628 <CDC_ProcessTransmission+0x26>
 8005622:	2b02      	cmp	r3, #2
 8005624:	d025      	beq.n	8005672 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8005626:	e07c      	b.n	8005722 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	8b12      	ldrh	r2, [r2, #24]
 8005630:	4293      	cmp	r3, r2
 8005632:	d90c      	bls.n	800564e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	69d9      	ldr	r1, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8b1a      	ldrh	r2, [r3, #24]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	7b58      	ldrb	r0, [r3, #13]
 8005640:	2301      	movs	r3, #1
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4603      	mov	r3, r0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fdaf 	bl	80071aa <USBH_BulkSendData>
 800564c:	e00c      	b.n	8005668 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	7b58      	ldrb	r0, [r3, #13]
 800565c:	2301      	movs	r3, #1
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fda1 	bl	80071aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005670:	e057      	b.n	8005722 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	7b5b      	ldrb	r3, [r3, #13]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f005 fb87 	bl	800ad8c <USBH_LL_GetURBState>
 800567e:	4603      	mov	r3, r0
 8005680:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d136      	bne.n	80056f6 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	8b12      	ldrh	r2, [r2, #24]
 8005690:	4293      	cmp	r3, r2
 8005692:	d90e      	bls.n	80056b2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	8b12      	ldrh	r2, [r2, #24]
 800569c:	1a9a      	subs	r2, r3, r2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	8b12      	ldrh	r2, [r2, #24]
 80056aa:	441a      	add	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	61da      	str	r2, [r3, #28]
 80056b0:	e002      	b.n	80056b8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80056c8:	e006      	b.n	80056d8 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f892 	bl	80057fc <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2204      	movs	r2, #4
 80056dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80056ec:	2200      	movs	r2, #0
 80056ee:	4619      	mov	r1, r3
 80056f0:	f001 ff1e 	bl	8007530 <osMessagePut>
      break;
 80056f4:	e014      	b.n	8005720 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d111      	bne.n	8005720 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005718:	2200      	movs	r2, #0
 800571a:	4619      	mov	r1, r3
 800571c:	f001 ff08 	bl	8007530 <osMessagePut>
      break;
 8005720:	bf00      	nop
  }
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800573c:	2300      	movs	r3, #0
 800573e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005746:	2b03      	cmp	r3, #3
 8005748:	d002      	beq.n	8005750 <CDC_ProcessReception+0x26>
 800574a:	2b04      	cmp	r3, #4
 800574c:	d00e      	beq.n	800576c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800574e:	e051      	b.n	80057f4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	6a19      	ldr	r1, [r3, #32]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	8b5a      	ldrh	r2, [r3, #26]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	7b1b      	ldrb	r3, [r3, #12]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 fd49 	bl	80071f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2204      	movs	r2, #4
 8005766:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800576a:	e043      	b.n	80057f4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	7b1b      	ldrb	r3, [r3, #12]
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f005 fb0a 	bl	800ad8c <USBH_LL_GetURBState>
 8005778:	4603      	mov	r3, r0
 800577a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d137      	bne.n	80057f2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	7b1b      	ldrb	r3, [r3, #12]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f005 fa6d 	bl	800ac68 <USBH_LL_GetLastXferSize>
 800578e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	429a      	cmp	r2, r3
 8005798:	d016      	beq.n	80057c8 <CDC_ProcessReception+0x9e>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	8b5b      	ldrh	r3, [r3, #26]
 800579e:	461a      	mov	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d910      	bls.n	80057c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	441a      	add	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2203      	movs	r2, #3
 80057c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80057c6:	e006      	b.n	80057d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f81d 	bl	8005810 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80057ea:	2200      	movs	r2, #0
 80057ec:	4619      	mov	r1, r3
 80057ee:	f001 fe9f 	bl	8007530 <osMessagePut>
      break;
 80057f2:	bf00      	nop
  }
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b090      	sub	sp, #64	; 0x40
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800584c:	2302      	movs	r3, #2
 800584e:	e04d      	b.n	80058ec <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	79fa      	ldrb	r2, [r7, #7]
 8005854:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f847 	bl	80058fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <USBH_Init+0xbc>)
 800589e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80058a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80058a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fe14 	bl	80074dc <osMessageCreate>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <USBH_Init+0xc0>)
 80058be:	f107 0414 	add.w	r4, r7, #20
 80058c2:	461d      	mov	r5, r3
 80058c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fd6d 	bl	80073b6 <osThreadCreate>
 80058dc:	4602      	mov	r2, r0
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f005 f90d 	bl	800ab04 <USBH_LL_Init>

  return USBH_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3740      	adds	r7, #64	; 0x40
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bdb0      	pop	{r4, r5, r7, pc}
 80058f4:	0800b16c 	.word	0x0800b16c
 80058f8:	0800b188 	.word	0x0800b188

080058fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e009      	b.n	8005922 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	33e0      	adds	r3, #224	; 0xe0
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	2200      	movs	r2, #0
 800591a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b0e      	cmp	r3, #14
 8005926:	d9f2      	bls.n	800590e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e009      	b.n	8005942 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d3f1      	bcc.n	800592e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2240      	movs	r2, #64	; 0x40
 800596e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80059c8:	1c59      	adds	r1, r3, #1
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	33de      	adds	r3, #222	; 0xde
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	e004      	b.n	80059ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80059e0:	2302      	movs	r3, #2
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80059e6:	2302      	movs	r3, #2
 80059e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d204      	bcs.n	8005a1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005a1c:	e001      	b.n	8005a22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	70fb      	strb	r3, [r7, #3]
 8005a42:	460b      	mov	r3, r1
 8005a44:	70bb      	strb	r3, [r7, #2]
 8005a46:	4613      	mov	r3, r2
 8005a48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005a58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a5a:	e025      	b.n	8005aa8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	221a      	movs	r2, #26
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	3308      	adds	r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	795b      	ldrb	r3, [r3, #5]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d002      	beq.n	8005a7e <USBH_FindInterface+0x4e>
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d111      	bne.n	8005aa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a82:	78ba      	ldrb	r2, [r7, #2]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d002      	beq.n	8005a8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a88:	78bb      	ldrb	r3, [r7, #2]
 8005a8a:	2bff      	cmp	r3, #255	; 0xff
 8005a8c:	d109      	bne.n	8005aa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a92:	787a      	ldrb	r2, [r7, #1]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d002      	beq.n	8005a9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a98:	787b      	ldrb	r3, [r7, #1]
 8005a9a:	2bff      	cmp	r3, #255	; 0xff
 8005a9c:	d101      	bne.n	8005aa2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	e006      	b.n	8005ab0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d9d6      	bls.n	8005a5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005aae:	23ff      	movs	r3, #255	; 0xff
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f005 f859 	bl	800ab7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f005 f970 	bl	800adb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af04      	add	r7, sp, #16
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2203      	movs	r2, #3
 8005afc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b0b      	cmp	r3, #11
 8005b06:	f200 823c 	bhi.w	8005f82 <USBH_Process+0x4a6>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <USBH_Process+0x34>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b8f 	.word	0x08005b8f
 8005b18:	08005c13 	.word	0x08005c13
 8005b1c:	08005f01 	.word	0x08005f01
 8005b20:	08005f83 	.word	0x08005f83
 8005b24:	08005cd3 	.word	0x08005cd3
 8005b28:	08005e8b 	.word	0x08005e8b
 8005b2c:	08005d25 	.word	0x08005d25
 8005b30:	08005d61 	.word	0x08005d61
 8005b34:	08005d9b 	.word	0x08005d9b
 8005b38:	08005de3 	.word	0x08005de3
 8005b3c:	08005ee9 	.word	0x08005ee9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 821c 	beq.w	8005f86 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005b54:	20c8      	movs	r0, #200	; 0xc8
 8005b56:	f005 f976 	bl	800ae46 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f005 f869 	bl	800ac32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005b84:	2200      	movs	r2, #0
 8005b86:	4619      	mov	r1, r3
 8005b88:	f001 fcd2 	bl	8007530 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005b8c:	e1fb      	b.n	8005f86 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e025      	b.n	8005bf4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb2:	d914      	bls.n	8005bde <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d903      	bls.n	8005bd6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	220d      	movs	r2, #13
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e00e      	b.n	8005bf4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e00a      	b.n	8005bf4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005be4:	f103 020a 	add.w	r2, r3, #10
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005bee:	200a      	movs	r0, #10
 8005bf0:	f005 f929 	bl	800ae46 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f001 fc90 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005c10:	e1c0      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c22:	2104      	movs	r1, #4
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005c28:	2064      	movs	r0, #100	; 0x64
 8005c2a:	f005 f90c 	bl	800ae46 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f004 ffda 	bl	800abe8 <USBH_LL_GetSpeed>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2205      	movs	r2, #5
 8005c42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005c44:	2100      	movs	r1, #0
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fb21 	bl	800728e <USBH_AllocPipe>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005c54:	2180      	movs	r1, #128	; 0x80
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fb19 	bl	800728e <USBH_AllocPipe>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	7919      	ldrb	r1, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	9202      	str	r2, [sp, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9201      	str	r2, [sp, #4]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4603      	mov	r3, r0
 8005c84:	2280      	movs	r2, #128	; 0x80
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 fad2 	bl	8007230 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7959      	ldrb	r1, [r3, #5]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	9202      	str	r2, [sp, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	9201      	str	r2, [sp, #4]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	4603      	mov	r3, r0
 8005cac:	2200      	movs	r2, #0
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fabe 	bl	8007230 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f001 fc30 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005cd0:	e160      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f964 	bl	8005fa0 <USBH_HandleEnum>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8152 	bne.w	8005f8a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d103      	bne.n	8005d00 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e002      	b.n	8005d06 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2207      	movs	r2, #7
 8005d04:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2205      	movs	r2, #5
 8005d0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f001 fc07 	bl	8007530 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d22:	e132      	b.n	8005f8a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 812f 	beq.w	8005f8e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2205      	movs	r2, #5
 8005d46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005d56:	2200      	movs	r2, #0
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f001 fbe9 	bl	8007530 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d5e:	e116      	b.n	8005f8e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fcf6 	bl	800675c <USBH_SetCfg>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2209      	movs	r2, #9
 8005d7a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005d90:	2200      	movs	r2, #0
 8005d92:	4619      	mov	r1, r3
 8005d94:	f001 fbcc 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d98:	e0fc      	b.n	8005f94 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005da8:	2101      	movs	r1, #1
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fcf9 	bl	80067a2 <USBH_SetFeature>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	220a      	movs	r2, #10
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e002      	b.n	8005dc4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f001 fba8 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005de0:	e0d8      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d03f      	beq.n	8005e6c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e016      	b.n	8005e28 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	32de      	adds	r2, #222	; 0xde
 8005e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e04:	791a      	ldrb	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d108      	bne.n	8005e22 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005e10:	7bfa      	ldrb	r2, [r7, #15]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32de      	adds	r2, #222	; 0xde
 8005e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005e20:	e005      	b.n	8005e2e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	3301      	adds	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0e5      	beq.n	8005dfa <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2206      	movs	r2, #6
 8005e4e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e56:	2103      	movs	r1, #3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
 8005e5c:	e006      	b.n	8005e6c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	220d      	movs	r2, #13
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	220d      	movs	r2, #13
 8005e6a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2205      	movs	r2, #5
 8005e70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005e80:	2200      	movs	r2, #0
 8005e82:	4619      	mov	r1, r3
 8005e84:	f001 fb54 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e88:	e084      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d103      	bne.n	8005eb4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	220b      	movs	r2, #11
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e00a      	b.n	8005eca <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d106      	bne.n	8005eca <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	220d      	movs	r2, #13
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	220d      	movs	r2, #13
 8005ec8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2205      	movs	r2, #5
 8005ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f001 fb25 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ee6:	e055      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d04f      	beq.n	8005f92 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
      }
      break;
 8005efe:	e048      	b.n	8005f92 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fcf7 	bl	80058fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f3c:	2105      	movs	r1, #5
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fdb0 	bl	8005abc <USBH_Start>
 8005f5c:	e002      	b.n	8005f64 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f004 fe0c 	bl	800ab7c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f001 fad8 	bl	8007530 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f80:	e008      	b.n	8005f94 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8005f82:	bf00      	nop
 8005f84:	e006      	b.n	8005f94 <USBH_Process+0x4b8>
      break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <USBH_Process+0x4b8>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <USBH_Process+0x4b8>
    break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <USBH_Process+0x4b8>
      break;
 8005f92:	bf00      	nop
  }
  return USBH_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop

08005fa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	f200 8208 	bhi.w	80063ca <USBH_HandleEnum+0x42a>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <USBH_HandleEnum+0x20>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe1 	.word	0x08005fe1
 8005fc4:	0800609f 	.word	0x0800609f
 8005fc8:	08006109 	.word	0x08006109
 8005fcc:	08006197 	.word	0x08006197
 8005fd0:	08006201 	.word	0x08006201
 8005fd4:	08006271 	.word	0x08006271
 8005fd8:	0800630d 	.word	0x0800630d
 8005fdc:	0800638b 	.word	0x0800638b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005fe0:	2108      	movs	r1, #8
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 faea 	bl	80065bc <USBH_Get_DevDesc>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d130      	bne.n	8006054 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7919      	ldrb	r1, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006016:	b292      	uxth	r2, r2
 8006018:	9202      	str	r2, [sp, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	9201      	str	r2, [sp, #4]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	4603      	mov	r3, r0
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 f903 	bl	8007230 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7959      	ldrb	r1, [r3, #5]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800603e:	b292      	uxth	r2, r2
 8006040:	9202      	str	r2, [sp, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	9201      	str	r2, [sp, #4]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	4603      	mov	r3, r0
 800604a:	2200      	movs	r2, #0
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f8ef 	bl	8007230 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006052:	e1bc      	b.n	80063ce <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	2b03      	cmp	r3, #3
 8006058:	f040 81b9 	bne.w	80063ce <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006062:	3301      	adds	r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006072:	2b03      	cmp	r3, #3
 8006074:	d903      	bls.n	800607e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	220d      	movs	r2, #13
 800607a:	701a      	strb	r2, [r3, #0]
      break;
 800607c:	e1a7      	b.n	80063ce <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	795b      	ldrb	r3, [r3, #5]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f923 	bl	80072d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 f91d 	bl	80072d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
      break;
 800609c:	e197      	b.n	80063ce <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800609e:	2112      	movs	r1, #18
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa8b 	bl	80065bc <USBH_Get_DevDesc>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80060b6:	e18c      	b.n	80063d2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	f040 8189 	bne.w	80063d2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060c6:	3301      	adds	r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d903      	bls.n	80060e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	220d      	movs	r2, #13
 80060de:	701a      	strb	r2, [r3, #0]
      break;
 80060e0:	e177      	b.n	80063d2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	795b      	ldrb	r3, [r3, #5]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f8f1 	bl	80072d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f8eb 	bl	80072d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
      break;
 8006106:	e164      	b.n	80063d2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006108:	2101      	movs	r1, #1
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb02 	bl	8006714 <USBH_SetAddress>
 8006110:	4603      	mov	r3, r0
 8006112:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d132      	bne.n	8006180 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800611a:	2002      	movs	r0, #2
 800611c:	f004 fe93 	bl	800ae46 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2203      	movs	r2, #3
 800612c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7919      	ldrb	r1, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006142:	b292      	uxth	r2, r2
 8006144:	9202      	str	r2, [sp, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	9201      	str	r2, [sp, #4]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 f86d 	bl	8007230 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7959      	ldrb	r1, [r3, #5]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800616a:	b292      	uxth	r2, r2
 800616c:	9202      	str	r2, [sp, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	9201      	str	r2, [sp, #4]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	4603      	mov	r3, r0
 8006176:	2200      	movs	r2, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 f859 	bl	8007230 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800617e:	e12a      	b.n	80063d6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b03      	cmp	r3, #3
 8006184:	f040 8127 	bne.w	80063d6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	220d      	movs	r2, #13
 800618c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	705a      	strb	r2, [r3, #1]
      break;
 8006194:	e11f      	b.n	80063d6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006196:	2109      	movs	r1, #9
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa37 	bl	800660c <USBH_Get_CfgDesc>
 800619e:	4603      	mov	r3, r0
 80061a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2204      	movs	r2, #4
 80061ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80061ae:	e114      	b.n	80063da <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	f040 8111 	bne.w	80063da <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061be:	3301      	adds	r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d903      	bls.n	80061da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	220d      	movs	r2, #13
 80061d6:	701a      	strb	r2, [r3, #0]
      break;
 80061d8:	e0ff      	b.n	80063da <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	795b      	ldrb	r3, [r3, #5]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 f875 	bl	80072d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f86f 	bl	80072d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
      break;
 80061fe:	e0ec      	b.n	80063da <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f9ff 	bl	800660c <USBH_Get_CfgDesc>
 800620e:	4603      	mov	r3, r0
 8006210:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2205      	movs	r2, #5
 800621c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800621e:	e0de      	b.n	80063de <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b03      	cmp	r3, #3
 8006224:	f040 80db 	bne.w	80063de <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800622e:	3301      	adds	r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800623e:	2b03      	cmp	r3, #3
 8006240:	d903      	bls.n	800624a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	220d      	movs	r2, #13
 8006246:	701a      	strb	r2, [r3, #0]
      break;
 8006248:	e0c9      	b.n	80063de <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	795b      	ldrb	r3, [r3, #5]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f83d 	bl	80072d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	791b      	ldrb	r3, [r3, #4]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f837 	bl	80072d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
      break;
 800626e:	e0b6      	b.n	80063de <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006276:	2b00      	cmp	r3, #0
 8006278:	d036      	beq.n	80062e8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006286:	23ff      	movs	r3, #255	; 0xff
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f9e3 	bl	8006654 <USBH_Get_StringDesc>
 800628e:	4603      	mov	r3, r0
 8006290:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d111      	bne.n	80062bc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2206      	movs	r2, #6
 800629c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2205      	movs	r2, #5
 80062a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80062b2:	2200      	movs	r2, #0
 80062b4:	4619      	mov	r1, r3
 80062b6:	f001 f93b 	bl	8007530 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80062ba:	e092      	b.n	80063e2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	f040 808f 	bne.w	80063e2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2206      	movs	r2, #6
 80062c8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2205      	movs	r2, #5
 80062ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80062de:	2200      	movs	r2, #0
 80062e0:	4619      	mov	r1, r3
 80062e2:	f001 f925 	bl	8007530 <osMessagePut>
      break;
 80062e6:	e07c      	b.n	80063e2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2206      	movs	r2, #6
 80062ec:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2205      	movs	r2, #5
 80062f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006302:	2200      	movs	r2, #0
 8006304:	4619      	mov	r1, r3
 8006306:	f001 f913 	bl	8007530 <osMessagePut>
      break;
 800630a:	e06a      	b.n	80063e2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006312:	2b00      	cmp	r3, #0
 8006314:	d027      	beq.n	8006366 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006322:	23ff      	movs	r3, #255	; 0xff
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f995 	bl	8006654 <USBH_Get_StringDesc>
 800632a:	4603      	mov	r3, r0
 800632c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2207      	movs	r2, #7
 8006338:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800633a:	e054      	b.n	80063e6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d151      	bne.n	80063e6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2207      	movs	r2, #7
 8006346:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2205      	movs	r2, #5
 800634c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800635c:	2200      	movs	r2, #0
 800635e:	4619      	mov	r1, r3
 8006360:	f001 f8e6 	bl	8007530 <osMessagePut>
      break;
 8006364:	e03f      	b.n	80063e6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2207      	movs	r2, #7
 800636a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2205      	movs	r2, #5
 8006370:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006380:	2200      	movs	r2, #0
 8006382:	4619      	mov	r1, r3
 8006384:	f001 f8d4 	bl	8007530 <osMessagePut>
      break;
 8006388:	e02d      	b.n	80063e6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80063a0:	23ff      	movs	r3, #255	; 0xff
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f956 	bl	8006654 <USBH_Get_StringDesc>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80063b6:	e018      	b.n	80063ea <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d115      	bne.n	80063ea <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
      break;
 80063c2:	e012      	b.n	80063ea <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
      break;
 80063c8:	e00f      	b.n	80063ea <USBH_HandleEnum+0x44a>

    default:
      break;
 80063ca:	bf00      	nop
 80063cc:	e00e      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063ce:	bf00      	nop
 80063d0:	e00c      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063d2:	bf00      	nop
 80063d4:	e00a      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063d6:	bf00      	nop
 80063d8:	e008      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063da:	bf00      	nop
 80063dc:	e006      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063de:	bf00      	nop
 80063e0:	e004      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <USBH_HandleEnum+0x44c>
      break;
 80063ea:	bf00      	nop
  }
  return Status;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f804 	bl	800643a <USBH_HandleSof>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b0b      	cmp	r3, #11
 800644a:	d10a      	bne.n	8006462 <USBH_HandleSof+0x28>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
  }
}
 8006462:	bf00      	nop
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800648e:	2200      	movs	r2, #0
 8006490:	4619      	mov	r1, r3
 8006492:	f001 f84d 	bl	8007530 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006496:	bf00      	nop
}
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80064ae:	bf00      	nop
}
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064ee:	2200      	movs	r2, #0
 80064f0:	4619      	mov	r1, r3
 80064f2:	f001 f81d 	bl	8007530 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f004 fb46 	bl	800abb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fecf 	bl	80072d0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	795b      	ldrb	r3, [r3, #5]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fec9 	bl	80072d0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006552:	2200      	movs	r2, #0
 8006554:	4619      	mov	r1, r3
 8006556:	f000 ffeb 	bl	8007530 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	f04f 32ff 	mov.w	r2, #4294967295
 800657a:	4618      	mov	r0, r3
 800657c:	f001 f818 	bl	80075b0 <osMessageGet>
    if (event.status == osEventMessage)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b10      	cmp	r3, #16
 8006584:	d1f2      	bne.n	800656c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff faa8 	bl	8005adc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800658c:	e7ee      	b.n	800656c <USBH_Process_OS+0x8>

0800658e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80065aa:	2200      	movs	r2, #0
 80065ac:	4619      	mov	r1, r3
 80065ae:	f000 ffbf 	bl	8007530 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f864 	bl	80066aa <USBH_GetDescriptor>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	b292      	uxth	r2, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	f000 f918 	bl	8006832 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af02      	add	r7, sp, #8
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	331c      	adds	r3, #28
 800661c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006628:	2100      	movs	r1, #0
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f83d 	bl	80066aa <USBH_GetDescriptor>
 8006630:	4603      	mov	r3, r0
 8006632:	72fb      	strb	r3, [r7, #11]
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d107      	bne.n	800664a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006640:	887a      	ldrh	r2, [r7, #2]
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f964 	bl	8006912 <USBH_ParseCfgDesc>
  }

  return status;
 800664a:	7afb      	ldrb	r3, [r7, #11]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	607a      	str	r2, [r7, #4]
 800665e:	461a      	mov	r2, r3
 8006660:	460b      	mov	r3, r1
 8006662:	72fb      	strb	r3, [r7, #11]
 8006664:	4613      	mov	r3, r2
 8006666:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006670:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006678:	893b      	ldrh	r3, [r7, #8]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	460b      	mov	r3, r1
 800667e:	2100      	movs	r1, #0
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f812 	bl	80066aa <USBH_GetDescriptor>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d107      	bne.n	80066a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006696:	893a      	ldrh	r2, [r7, #8]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fa37 	bl	8006b0e <USBH_ParseStringDesc>
  }

  return status;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	72fb      	strb	r3, [r7, #11]
 80066b8:	4613      	mov	r3, r2
 80066ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	789b      	ldrb	r3, [r3, #2]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d11c      	bne.n	80066fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2206      	movs	r2, #6
 80066d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	893a      	ldrh	r2, [r7, #8]
 80066da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e6:	d104      	bne.n	80066f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f240 4209 	movw	r2, #1033	; 0x409
 80066ee:	829a      	strh	r2, [r3, #20]
 80066f0:	e002      	b.n	80066f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8b3a      	ldrh	r2, [r7, #24]
 80066fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80066fe:	8b3b      	ldrh	r3, [r7, #24]
 8006700:	461a      	mov	r2, r3
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fa50 	bl	8006baa <USBH_CtlReq>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10f      	bne.n	8006748 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2205      	movs	r2, #5
 8006732:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	b29a      	uxth	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa2c 	bl	8006baa <USBH_CtlReq>
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	789b      	ldrb	r3, [r3, #2]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10e      	bne.n	800678e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2209      	movs	r2, #9
 800677a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	887a      	ldrh	r2, [r7, #2]
 8006780:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa09 	bl	8006baa <USBH_CtlReq>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	789b      	ldrb	r3, [r3, #2]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10f      	bne.n	80067d6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2203      	movs	r2, #3
 80067c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067d6:	2200      	movs	r2, #0
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9e5 	bl	8006baa <USBH_CtlReq>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	789b      	ldrb	r3, [r3, #2]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d10f      	bne.n	800681e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9c1 	bl	8006baa <USBH_CtlReq>
 8006828:	4603      	mov	r3, r0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785a      	ldrb	r2, [r3, #1]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	3302      	adds	r3, #2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	b29a      	uxth	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3303      	adds	r3, #3
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	b29b      	uxth	r3, r3
 8006864:	4313      	orrs	r3, r2
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	791a      	ldrb	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	795a      	ldrb	r2, [r3, #5]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	799a      	ldrb	r2, [r3, #6]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	79da      	ldrb	r2, [r3, #7]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d939      	bls.n	8006906 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	3308      	adds	r3, #8
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b29a      	uxth	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3309      	adds	r3, #9
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	330a      	adds	r3, #10
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	330b      	adds	r3, #11
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	330c      	adds	r3, #12
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	330d      	adds	r3, #13
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	7b9a      	ldrb	r2, [r3, #14]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7bda      	ldrb	r2, [r3, #15]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	7c1a      	ldrb	r2, [r3, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	7c5a      	ldrb	r2, [r3, #17]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	745a      	strb	r2, [r3, #17]
  }
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b08a      	sub	sp, #40	; 0x28
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	785a      	ldrb	r2, [r3, #1]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3302      	adds	r3, #2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	3303      	adds	r3, #3
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b29b      	uxth	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	791a      	ldrb	r2, [r3, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	795a      	ldrb	r2, [r3, #5]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	799a      	ldrb	r2, [r3, #6]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	79da      	ldrb	r2, [r3, #7]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	7a1a      	ldrb	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b09      	cmp	r3, #9
 800698c:	d95f      	bls.n	8006a4e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800698e:	2309      	movs	r3, #9
 8006990:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006996:	e051      	b.n	8006a3c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006998:	f107 0316 	add.w	r3, r7, #22
 800699c:	4619      	mov	r1, r3
 800699e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a0:	f000 f8e8 	bl	8006b74 <USBH_GetNextDesc>
 80069a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d146      	bne.n	8006a3c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80069ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069b2:	221a      	movs	r2, #26
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	3308      	adds	r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	3302      	adds	r3, #2
 80069c0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80069c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069c4:	69f8      	ldr	r0, [r7, #28]
 80069c6:	f000 f846 	bl	8006a56 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069d4:	e022      	b.n	8006a1c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80069d6:	f107 0316 	add.w	r3, r7, #22
 80069da:	4619      	mov	r1, r3
 80069dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069de:	f000 f8c9 	bl	8006b74 <USBH_GetNextDesc>
 80069e2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	d117      	bne.n	8006a1c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80069ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069f4:	3201      	adds	r2, #1
 80069f6:	00d2      	lsls	r2, r2, #3
 80069f8:	211a      	movs	r1, #26
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	3308      	adds	r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a0c:	69b8      	ldr	r0, [r7, #24]
 8006a0e:	f000 f851 	bl	8006ab4 <USBH_ParseEPDesc>
            ep_ix++;
 8006a12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006a16:	3301      	adds	r3, #1
 8006a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	791b      	ldrb	r3, [r3, #4]
 8006a20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d204      	bcs.n	8006a32 <USBH_ParseCfgDesc+0x120>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	885a      	ldrh	r2, [r3, #2]
 8006a2c:	8afb      	ldrh	r3, [r7, #22]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d8d1      	bhi.n	80069d6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a36:	3301      	adds	r3, #1
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d804      	bhi.n	8006a4e <USBH_ParseCfgDesc+0x13c>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	885a      	ldrh	r2, [r3, #2]
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d8a4      	bhi.n	8006998 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785a      	ldrb	r2, [r3, #1]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	789a      	ldrb	r2, [r3, #2]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	78da      	ldrb	r2, [r3, #3]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	791a      	ldrb	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	795a      	ldrb	r2, [r3, #5]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	799a      	ldrb	r2, [r3, #6]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	79da      	ldrb	r2, [r3, #7]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	7a1a      	ldrb	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	721a      	strb	r2, [r3, #8]
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	785a      	ldrb	r2, [r3, #1]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	789a      	ldrb	r2, [r3, #2]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	78da      	ldrb	r2, [r3, #3]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	3305      	adds	r3, #5
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	799a      	ldrb	r2, [r3, #6]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	719a      	strb	r2, [r3, #6]
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d120      	bne.n	8006b68 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	1e9a      	subs	r2, r3, #2
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	bf28      	it	cs
 8006b32:	4613      	movcs	r3, r2
 8006b34:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	82fb      	strh	r3, [r7, #22]
 8006b40:	e00b      	b.n	8006b5a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b42:	8afb      	ldrh	r3, [r7, #22]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006b54:	8afb      	ldrh	r3, [r7, #22]
 8006b56:	3302      	adds	r3, #2
 8006b58:	82fb      	strh	r3, [r7, #22]
 8006b5a:	8afa      	ldrh	r2, [r7, #22]
 8006b5c:	8abb      	ldrh	r3, [r7, #20]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d3ef      	bcc.n	8006b42 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
  }
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	881a      	ldrh	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d002      	beq.n	8006bca <USBH_CtlReq+0x20>
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d01d      	beq.n	8006c04 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8006bc8:	e043      	b.n	8006c52 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2202      	movs	r2, #2
 8006be0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2203      	movs	r2, #3
 8006bea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f000 fc97 	bl	8007530 <osMessagePut>
      break;
 8006c02:	e026      	b.n	8006c52 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f829 	bl	8006c5c <USBH_HandleControl>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <USBH_CtlReq+0x70>
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d106      	bne.n	8006c28 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	761a      	strb	r2, [r3, #24]
 8006c26:	e005      	b.n	8006c34 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d102      	bne.n	8006c34 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2203      	movs	r2, #3
 8006c38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f000 fc70 	bl	8007530 <osMessagePut>
      break;
 8006c50:	bf00      	nop
  }
  return status;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7e1b      	ldrb	r3, [r3, #24]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	2b0a      	cmp	r3, #10
 8006c74:	f200 822b 	bhi.w	80070ce <USBH_HandleControl+0x472>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <USBH_HandleControl+0x24>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cad 	.word	0x08006cad
 8006c84:	08006cc7 	.word	0x08006cc7
 8006c88:	08006d69 	.word	0x08006d69
 8006c8c:	08006d8f 	.word	0x08006d8f
 8006c90:	08006e1b 	.word	0x08006e1b
 8006c94:	08006e47 	.word	0x08006e47
 8006c98:	08006f09 	.word	0x08006f09
 8006c9c:	08006f2b 	.word	0x08006f2b
 8006ca0:	08006fbd 	.word	0x08006fbd
 8006ca4:	08006fe5 	.word	0x08006fe5
 8006ca8:	08007077 	.word	0x08007077
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0110 	add.w	r1, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	795b      	ldrb	r3, [r3, #5]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fa19 	bl	80070f0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	761a      	strb	r2, [r3, #24]
      break;
 8006cc4:	e20e      	b.n	80070e4 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	795b      	ldrb	r3, [r3, #5]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f004 f85d 	bl	800ad8c <USBH_LL_GetURBState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d12c      	bne.n	8006d36 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7c1b      	ldrb	r3, [r3, #16]
 8006ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ce4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8adb      	ldrh	r3, [r3, #22]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006cee:	7b7b      	ldrb	r3, [r7, #13]
 8006cf0:	2b80      	cmp	r3, #128	; 0x80
 8006cf2:	d103      	bne.n	8006cfc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	761a      	strb	r2, [r3, #24]
 8006cfa:	e00d      	b.n	8006d18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2205      	movs	r2, #5
 8006d00:	761a      	strb	r2, [r3, #24]
 8006d02:	e009      	b.n	8006d18 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8006d04:	7b7b      	ldrb	r3, [r7, #13]
 8006d06:	2b80      	cmp	r3, #128	; 0x80
 8006d08:	d103      	bne.n	8006d12 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2209      	movs	r2, #9
 8006d0e:	761a      	strb	r2, [r3, #24]
 8006d10:	e002      	b.n	8006d18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2207      	movs	r2, #7
 8006d16:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f000 fbfe 	bl	8007530 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d34:	e1cd      	b.n	80070d2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d003      	beq.n	8006d44 <USBH_HandleControl+0xe8>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	f040 81c7 	bne.w	80070d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220b      	movs	r2, #11
 8006d48:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4619      	mov	r1, r3
 8006d62:	f000 fbe5 	bl	8007530 <osMessagePut>
      break;
 8006d66:	e1b4      	b.n	80070d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6899      	ldr	r1, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	899a      	ldrh	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f9f4 	bl	800716e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	761a      	strb	r2, [r3, #24]
      break;
 8006d8c:	e1aa      	b.n	80070e4 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	791b      	ldrb	r3, [r3, #4]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f003 fff9 	bl	800ad8c <USBH_LL_GetURBState>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2209      	movs	r2, #9
 8006da8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f000 fbb5 	bl	8007530 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d110      	bne.n	8006dee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006de4:	2200      	movs	r2, #0
 8006de6:	4619      	mov	r1, r3
 8006de8:	f000 fba2 	bl	8007530 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dec:	e173      	b.n	80070d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	f040 8170 	bne.w	80070d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	220b      	movs	r2, #11
 8006dfa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2203      	movs	r2, #3
 8006e00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e10:	2200      	movs	r2, #0
 8006e12:	4619      	mov	r1, r3
 8006e14:	f000 fb8c 	bl	8007530 <osMessagePut>
      break;
 8006e18:	e15d      	b.n	80070d6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6899      	ldr	r1, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	899a      	ldrh	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7958      	ldrb	r0, [r3, #5]
 8006e26:	2301      	movs	r3, #1
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f979 	bl	8007124 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2206      	movs	r2, #6
 8006e42:	761a      	strb	r2, [r3, #24]
      break;
 8006e44:	e14e      	b.n	80070e4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f003 ff9d 	bl	800ad8c <USBH_LL_GetURBState>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d111      	bne.n	8006e80 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2207      	movs	r2, #7
 8006e60:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2203      	movs	r2, #3
 8006e66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e76:	2200      	movs	r2, #0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f000 fb59 	bl	8007530 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e7e:	e12c      	b.n	80070da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d113      	bne.n	8006eae <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	220c      	movs	r2, #12
 8006e8a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2203      	movs	r2, #3
 8006e94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f000 fb42 	bl	8007530 <osMessagePut>
      break;
 8006eac:	e115      	b.n	80070da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d111      	bne.n	8006ed8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f000 fb2d 	bl	8007530 <osMessagePut>
      break;
 8006ed6:	e100      	b.n	80070da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	f040 80fd 	bne.w	80070da <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220b      	movs	r2, #11
 8006ee4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2203      	movs	r2, #3
 8006eee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006efe:	2200      	movs	r2, #0
 8006f00:	4619      	mov	r1, r3
 8006f02:	f000 fb15 	bl	8007530 <osMessagePut>
      break;
 8006f06:	e0e8      	b.n	80070da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f92c 	bl	800716e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2208      	movs	r2, #8
 8006f26:	761a      	strb	r2, [r3, #24]

      break;
 8006f28:	e0dc      	b.n	80070e4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f003 ff2b 	bl	800ad8c <USBH_LL_GetURBState>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d113      	bne.n	8006f68 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	220d      	movs	r2, #13
 8006f44:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4619      	mov	r1, r3
 8006f62:	f000 fae5 	bl	8007530 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f66:	e0ba      	b.n	80070de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d111      	bne.n	8006f92 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220b      	movs	r2, #11
 8006f72:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2203      	movs	r2, #3
 8006f78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f000 fad0 	bl	8007530 <osMessagePut>
      break;
 8006f90:	e0a5      	b.n	80070de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b05      	cmp	r3, #5
 8006f96:	f040 80a2 	bne.w	80070de <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f000 fabb 	bl	8007530 <osMessagePut>
      break;
 8006fba:	e090      	b.n	80070de <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	795a      	ldrb	r2, [r3, #5]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2100      	movs	r1, #0
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8aa 	bl	8007124 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	220a      	movs	r2, #10
 8006fe0:	761a      	strb	r2, [r3, #24]
      break;
 8006fe2:	e07f      	b.n	80070e4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	795b      	ldrb	r3, [r3, #5]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f003 fece 	bl	800ad8c <USBH_LL_GetURBState>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d113      	bne.n	8007022 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	220d      	movs	r2, #13
 8007002:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2203      	movs	r2, #3
 8007008:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007018:	2200      	movs	r2, #0
 800701a:	4619      	mov	r1, r3
 800701c:	f000 fa88 	bl	8007530 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007020:	e05f      	b.n	80070e2 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d111      	bne.n	800704c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2209      	movs	r2, #9
 800702c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2203      	movs	r2, #3
 8007032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007042:	2200      	movs	r2, #0
 8007044:	4619      	mov	r1, r3
 8007046:	f000 fa73 	bl	8007530 <osMessagePut>
      break;
 800704a:	e04a      	b.n	80070e2 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2b04      	cmp	r3, #4
 8007050:	d147      	bne.n	80070e2 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	220b      	movs	r2, #11
 8007056:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2203      	movs	r2, #3
 800705c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800706c:	2200      	movs	r2, #0
 800706e:	4619      	mov	r1, r3
 8007070:	f000 fa5e 	bl	8007530 <osMessagePut>
      break;
 8007074:	e035      	b.n	80070e2 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7e5b      	ldrb	r3, [r3, #25]
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	765a      	strb	r2, [r3, #25]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7e5b      	ldrb	r3, [r3, #25]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d806      	bhi.n	8007098 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007096:	e025      	b.n	80070e4 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800709e:	2106      	movs	r1, #6
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f90d 	bl	80072d0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f907 	bl	80072d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e00a      	b.n	80070e4 <USBH_HandleControl+0x488>

    default:
      break;
 80070ce:	bf00      	nop
 80070d0:	e008      	b.n	80070e4 <USBH_HandleControl+0x488>
      break;
 80070d2:	bf00      	nop
 80070d4:	e006      	b.n	80070e4 <USBH_HandleControl+0x488>
      break;
 80070d6:	bf00      	nop
 80070d8:	e004      	b.n	80070e4 <USBH_HandleControl+0x488>
      break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <USBH_HandleControl+0x488>
      break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <USBH_HandleControl+0x488>
      break;
 80070e2:	bf00      	nop
  }

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop

080070f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af04      	add	r7, sp, #16
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070fe:	79f9      	ldrb	r1, [r7, #7]
 8007100:	2300      	movs	r3, #0
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	2308      	movs	r3, #8
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	2300      	movs	r3, #0
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f003 fe08 	bl	800ad2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af04      	add	r7, sp, #16
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4611      	mov	r1, r2
 8007130:	461a      	mov	r2, r3
 8007132:	460b      	mov	r3, r1
 8007134:	80fb      	strh	r3, [r7, #6]
 8007136:	4613      	mov	r3, r2
 8007138:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007148:	7979      	ldrb	r1, [r7, #5]
 800714a:	7e3b      	ldrb	r3, [r7, #24]
 800714c:	9303      	str	r3, [sp, #12]
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	2301      	movs	r3, #1
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f003 fde3 	bl	800ad2a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b088      	sub	sp, #32
 8007172:	af04      	add	r7, sp, #16
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	4611      	mov	r1, r2
 800717a:	461a      	mov	r2, r3
 800717c:	460b      	mov	r3, r1
 800717e:	80fb      	strh	r3, [r7, #6]
 8007180:	4613      	mov	r3, r2
 8007182:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007184:	7979      	ldrb	r1, [r7, #5]
 8007186:	2300      	movs	r3, #0
 8007188:	9303      	str	r3, [sp, #12]
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	9302      	str	r3, [sp, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	2301      	movs	r3, #1
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	2300      	movs	r3, #0
 8007198:	2201      	movs	r2, #1
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f003 fdc5 	bl	800ad2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80071a0:	2300      	movs	r3, #0

}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b088      	sub	sp, #32
 80071ae:	af04      	add	r7, sp, #16
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	4611      	mov	r1, r2
 80071b6:	461a      	mov	r2, r3
 80071b8:	460b      	mov	r3, r1
 80071ba:	80fb      	strh	r3, [r7, #6]
 80071bc:	4613      	mov	r3, r2
 80071be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071ce:	7979      	ldrb	r1, [r7, #5]
 80071d0:	7e3b      	ldrb	r3, [r7, #24]
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	2301      	movs	r3, #1
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2302      	movs	r3, #2
 80071e2:	2200      	movs	r2, #0
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f003 fda0 	bl	800ad2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	460b      	mov	r3, r1
 8007204:	80fb      	strh	r3, [r7, #6]
 8007206:	4613      	mov	r3, r2
 8007208:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800720a:	7979      	ldrb	r1, [r7, #5]
 800720c:	2300      	movs	r3, #0
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	9302      	str	r3, [sp, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	2301      	movs	r3, #1
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2302      	movs	r3, #2
 800721e:	2201      	movs	r2, #1
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f003 fd82 	bl	800ad2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af04      	add	r7, sp, #16
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	70fb      	strb	r3, [r7, #3]
 8007242:	460b      	mov	r3, r1
 8007244:	70bb      	strb	r3, [r7, #2]
 8007246:	4613      	mov	r3, r2
 8007248:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800724a:	7878      	ldrb	r0, [r7, #1]
 800724c:	78ba      	ldrb	r2, [r7, #2]
 800724e:	78f9      	ldrb	r1, [r7, #3]
 8007250:	8b3b      	ldrh	r3, [r7, #24]
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	7d3b      	ldrb	r3, [r7, #20]
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	7c3b      	ldrb	r3, [r7, #16]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f003 fd15 	bl	800ac8e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f003 fd34 	bl	800acec <USBH_LL_ClosePipe>

  return USBH_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f836 	bl	800730c <USBH_GetFreePipe>
 80072a0:	4603      	mov	r3, r0
 80072a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00a      	beq.n	80072c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	33e0      	adds	r3, #224	; 0xe0
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80072c4:	89fb      	ldrh	r3, [r7, #14]
 80072c6:	b2db      	uxtb	r3, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	2b0a      	cmp	r3, #10
 80072e0:	d80d      	bhi.n	80072fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	33e0      	adds	r3, #224	; 0xe0
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	33e0      	adds	r3, #224	; 0xe0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	e00f      	b.n	800733e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	33e0      	adds	r3, #224	; 0xe0
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	b29b      	uxth	r3, r3
 8007336:	e007      	b.n	8007348 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	3301      	adds	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b0a      	cmp	r3, #10
 8007342:	d9ec      	bls.n	800731e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007344:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007366:	2b84      	cmp	r3, #132	; 0x84
 8007368:	d005      	beq.n	8007376 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800736a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	3303      	adds	r3, #3
 8007374:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738a:	f3ef 8305 	mrs	r3, IPSR
 800738e:	607b      	str	r3, [r7, #4]
  return(result);
 8007390:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2db      	uxtb	r3, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073ac:	f001 fa3c 	bl	8008828 <vTaskStartScheduler>
  
  return osOK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b8:	b089      	sub	sp, #36	; 0x24
 80073ba:	af04      	add	r7, sp, #16
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d020      	beq.n	800740a <osThreadCreate+0x54>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01c      	beq.n	800740a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685c      	ldr	r4, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681d      	ldr	r5, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691e      	ldr	r6, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff ffb6 	bl	8007354 <makeFreeRtosPriority>
 80073e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	9100      	str	r1, [sp, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	4632      	mov	r2, r6
 80073fc:	4629      	mov	r1, r5
 80073fe:	4620      	mov	r0, r4
 8007400:	f001 f84f 	bl	80084a2 <xTaskCreateStatic>
 8007404:	4603      	mov	r3, r0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e01c      	b.n	8007444 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685c      	ldr	r4, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007416:	b29e      	uxth	r6, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff ff98 	bl	8007354 <makeFreeRtosPriority>
 8007424:	4602      	mov	r2, r0
 8007426:	f107 030c 	add.w	r3, r7, #12
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	9200      	str	r2, [sp, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	4632      	mov	r2, r6
 8007432:	4629      	mov	r1, r5
 8007434:	4620      	mov	r0, r4
 8007436:	f001 f88e 	bl	8008556 <xTaskCreate>
 800743a:	4603      	mov	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d001      	beq.n	8007444 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800744e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <osDelay+0x16>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e000      	b.n	8007466 <osDelay+0x18>
 8007464:	2301      	movs	r3, #1
 8007466:	4618      	mov	r0, r3
 8007468:	f001 f9aa 	bl	80087c0 <vTaskDelay>
  
  return osOK;
 800746c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af02      	add	r7, sp, #8
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10b      	bne.n	80074a6 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	2303      	movs	r3, #3
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4613      	mov	r3, r2
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	2001      	movs	r0, #1
 800749e:	f000 fa17 	bl	80078d0 <xQueueGenericCreateStatic>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e016      	b.n	80074d4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e014      	b.n	80074d4 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d110      	bne.n	80074d2 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80074b0:	2203      	movs	r2, #3
 80074b2:	2100      	movs	r1, #0
 80074b4:	2001      	movs	r0, #1
 80074b6:	f000 fa7e 	bl	80079b6 <xQueueGenericCreate>
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <osSemaphoreCreate+0x58>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fad3 	bl	8007a74 <xQueueGenericSend>
      return sema;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	e000      	b.n	80074d4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80074d2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b085      	sub	sp, #20
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d012      	beq.n	8007514 <osMessageCreate+0x38>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68dc      	ldr	r4, [r3, #12]
 8007506:	2300      	movs	r3, #0
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4623      	mov	r3, r4
 800750c:	f000 f9e0 	bl	80078d0 <xQueueGenericCreateStatic>
 8007510:	4603      	mov	r3, r0
 8007512:	e008      	b.n	8007526 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	4619      	mov	r1, r3
 8007520:	f000 fa49 	bl	80079b6 <xQueueGenericCreate>
 8007524:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}
	...

08007530 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <osMessagePut+0x1e>
    ticks = 1;
 800754a:	2301      	movs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800754e:	f7ff ff19 	bl	8007384 <inHandlerMode>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d018      	beq.n	800758a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007558:	f107 0210 	add.w	r2, r7, #16
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	2300      	movs	r3, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fb80 	bl	8007c68 <xQueueGenericSendFromISR>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d001      	beq.n	8007572 <osMessagePut+0x42>
      return osErrorOS;
 800756e:	23ff      	movs	r3, #255	; 0xff
 8007570:	e018      	b.n	80075a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d014      	beq.n	80075a2 <osMessagePut+0x72>
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <osMessagePut+0x7c>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e00b      	b.n	80075a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800758a:	f107 0108 	add.w	r1, r7, #8
 800758e:	2300      	movs	r3, #0
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fa6e 	bl	8007a74 <xQueueGenericSend>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d001      	beq.n	80075a2 <osMessagePut+0x72>
      return osErrorOS;
 800759e:	23ff      	movs	r3, #255	; 0xff
 80075a0:	e000      	b.n	80075a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b08b      	sub	sp, #44	; 0x2c
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80075ca:	2380      	movs	r3, #128	; 0x80
 80075cc:	617b      	str	r3, [r7, #20]
    return event;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	461c      	mov	r4, r3
 80075d2:	f107 0314 	add.w	r3, r7, #20
 80075d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075de:	e054      	b.n	800768a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d103      	bne.n	80075f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
 80075f6:	e009      	b.n	800760c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d006      	beq.n	800760c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <osMessageGet+0x5c>
      ticks = 1;
 8007608:	2301      	movs	r3, #1
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800760c:	f7ff feba 	bl	8007384 <inHandlerMode>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01c      	beq.n	8007650 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007616:	f107 0220 	add.w	r2, r7, #32
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	68b8      	ldr	r0, [r7, #8]
 8007624:	f000 fd98 	bl	8008158 <xQueueReceiveFromISR>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	d102      	bne.n	8007634 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800762e:	2310      	movs	r3, #16
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e001      	b.n	8007638 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01d      	beq.n	800767a <osMessageGet+0xca>
 800763e:	4b15      	ldr	r3, [pc, #84]	; (8007694 <osMessageGet+0xe4>)
 8007640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	e014      	b.n	800767a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	3304      	adds	r3, #4
 8007656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007658:	4619      	mov	r1, r3
 800765a:	68b8      	ldr	r0, [r7, #8]
 800765c:	f000 fb98 	bl	8007d90 <xQueueReceive>
 8007660:	4603      	mov	r3, r0
 8007662:	2b01      	cmp	r3, #1
 8007664:	d102      	bne.n	800766c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007666:	2310      	movs	r3, #16
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e006      	b.n	800767a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <osMessageGet+0xc6>
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <osMessageGet+0xc8>
 8007676:	2340      	movs	r3, #64	; 0x40
 8007678:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	461c      	mov	r4, r3
 800767e:	f107 0314 	add.w	r3, r7, #20
 8007682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	372c      	adds	r7, #44	; 0x2c
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	bf00      	nop
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f103 0208 	add.w	r2, r3, #8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f103 0208 	add.w	r2, r3, #8
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0208 	add.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d103      	bne.n	800775a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e00c      	b.n	8007774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3308      	adds	r3, #8
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e002      	b.n	8007768 <vListInsert+0x2e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d2f6      	bcs.n	8007762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6892      	ldr	r2, [r2, #8]
 80077c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6852      	ldr	r2, [r2, #4]
 80077cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d103      	bne.n	80077e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60bb      	str	r3, [r7, #8]
 8007826:	e7fe      	b.n	8007826 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007828:	f001 ff50 	bl	80096cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007858:	3b01      	subs	r3, #1
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d114      	bne.n	80078a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01a      	beq.n	80078bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3310      	adds	r3, #16
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fa0a 	bl	8008ca4 <xTaskRemoveFromEventList>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d012      	beq.n	80078bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007896:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <xQueueGenericReset+0xcc>)
 8007898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	e009      	b.n	80078bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3310      	adds	r3, #16
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fef3 	bl	8007698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3324      	adds	r3, #36	; 0x24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff feee 	bl	8007698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078bc:	f001 ff34 	bl	8009728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078c0:	2301      	movs	r3, #1
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08e      	sub	sp, #56	; 0x38
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <xQueueGenericCreateStatic+0x28>
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f6:	e7fe      	b.n	80078f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <xQueueGenericCreateStatic+0x42>
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
 8007910:	e7fe      	b.n	8007910 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <xQueueGenericCreateStatic+0x4e>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <xQueueGenericCreateStatic+0x52>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <xQueueGenericCreateStatic+0x54>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <xQueueGenericCreateStatic+0x6c>
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	e7fe      	b.n	800793a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <xQueueGenericCreateStatic+0x78>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <xQueueGenericCreateStatic+0x7c>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <xQueueGenericCreateStatic+0x7e>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <xQueueGenericCreateStatic+0x96>
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e7fe      	b.n	8007964 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007966:	2348      	movs	r3, #72	; 0x48
 8007968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b48      	cmp	r3, #72	; 0x48
 800796e:	d009      	beq.n	8007984 <xQueueGenericCreateStatic+0xb4>
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e7fe      	b.n	8007982 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007984:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00d      	beq.n	80079ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007998:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f844 	bl	8007a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3730      	adds	r7, #48	; 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b08a      	sub	sp, #40	; 0x28
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <xQueueGenericCreate+0x28>
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	e7fe      	b.n	80079dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d102      	bne.n	80079ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e004      	b.n	80079f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	3348      	adds	r3, #72	; 0x48
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 ff81 	bl	8009900 <pvPortMalloc>
 80079fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3348      	adds	r3, #72	; 0x48
 8007a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a18:	79fa      	ldrb	r2, [r7, #7]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f805 	bl	8007a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a62:	2101      	movs	r1, #1
 8007a64:	69b8      	ldr	r0, [r7, #24]
 8007a66:	f7ff fecb 	bl	8007800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08e      	sub	sp, #56	; 0x38
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <xQueueGenericSend+0x30>
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <xQueueGenericSend+0x3e>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueGenericSend+0x42>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueGenericSend+0x44>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <xQueueGenericSend+0x5c>
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	e7fe      	b.n	8007ace <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d103      	bne.n	8007ade <xQueueGenericSend+0x6a>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <xQueueGenericSend+0x6e>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueGenericSend+0x70>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <xQueueGenericSend+0x88>
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	623b      	str	r3, [r7, #32]
 8007afa:	e7fe      	b.n	8007afa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afc:	f001 fa8a 	bl	8009014 <xTaskGetSchedulerState>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <xQueueGenericSend+0x98>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueGenericSend+0x9c>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueGenericSend+0x9e>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <xQueueGenericSend+0xb6>
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b2a:	f001 fdcf 	bl	80096cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <xQueueGenericSend+0xcc>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d129      	bne.n	8007b94 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b46:	f000 fb9c 	bl	8008282 <prvCopyDataToQueue>
 8007b4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d010      	beq.n	8007b76 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	3324      	adds	r3, #36	; 0x24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 f8a3 	bl	8008ca4 <xTaskRemoveFromEventList>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d013      	beq.n	8007b8c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b64:	4b3f      	ldr	r3, [pc, #252]	; (8007c64 <xQueueGenericSend+0x1f0>)
 8007b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	e00a      	b.n	8007b8c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b7c:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <xQueueGenericSend+0x1f0>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b8c:	f001 fdcc 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e063      	b.n	8007c5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b9a:	f001 fdc5 	bl	8009728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e05c      	b.n	8007c5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ba8:	f107 0314 	add.w	r3, r7, #20
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 f8db 	bl	8008d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bb6:	f001 fdb7 	bl	8009728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bba:	f000 fe93 	bl	80088e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bbe:	f001 fd85 	bl	80096cc <vPortEnterCritical>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bce:	d103      	bne.n	8007bd8 <xQueueGenericSend+0x164>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bde:	b25b      	sxtb	r3, r3
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d103      	bne.n	8007bee <xQueueGenericSend+0x17a>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bee:	f001 fd9b 	bl	8009728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bf2:	1d3a      	adds	r2, r7, #4
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f8ca 	bl	8008d94 <xTaskCheckForTimeOut>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d124      	bne.n	8007c50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c08:	f000 fc33 	bl	8008472 <prvIsQueueFull>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d018      	beq.n	8007c44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	3310      	adds	r3, #16
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f81e 	bl	8008c5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c22:	f000 fbbe 	bl	80083a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c26:	f000 fe6b 	bl	8008900 <xTaskResumeAll>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f47f af7c 	bne.w	8007b2a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <xQueueGenericSend+0x1f0>)
 8007c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	e772      	b.n	8007b2a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c46:	f000 fbac 	bl	80083a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c4a:	f000 fe59 	bl	8008900 <xTaskResumeAll>
 8007c4e:	e76c      	b.n	8007b2a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c52:	f000 fba6 	bl	80083a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c56:	f000 fe53 	bl	8008900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3738      	adds	r7, #56	; 0x38
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08e      	sub	sp, #56	; 0x38
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <xQueueGenericSendFromISR+0x2c>
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
 8007c92:	e7fe      	b.n	8007c92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <xQueueGenericSendFromISR+0x3a>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueGenericSendFromISR+0x3e>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericSendFromISR+0x40>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <xQueueGenericSendFromISR+0x58>
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
 8007cbe:	e7fe      	b.n	8007cbe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d103      	bne.n	8007cce <xQueueGenericSendFromISR+0x66>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <xQueueGenericSendFromISR+0x6a>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <xQueueGenericSendFromISR+0x6c>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <xQueueGenericSendFromISR+0x84>
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	e7fe      	b.n	8007cea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cec:	f001 fdca 	bl	8009884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cf0:	f3ef 8211 	mrs	r2, BASEPRI
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61ba      	str	r2, [r7, #24]
 8007d06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <xQueueGenericSendFromISR+0xb6>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d12c      	bne.n	8007d78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d2e:	f000 faa8 	bl	8008282 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d112      	bne.n	8007d62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d016      	beq.n	8007d72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 ffab 	bl	8008ca4 <xTaskRemoveFromEventList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00e      	beq.n	8007d72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e007      	b.n	8007d72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d66:	3301      	adds	r3, #1
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	b25a      	sxtb	r2, r3
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d72:	2301      	movs	r3, #1
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007d76:	e001      	b.n	8007d7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3738      	adds	r7, #56	; 0x38
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	; 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <xQueueReceive+0x2e>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e7fe      	b.n	8007dbc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d103      	bne.n	8007dcc <xQueueReceive+0x3c>
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <xQueueReceive+0x40>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e000      	b.n	8007dd2 <xQueueReceive+0x42>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <xQueueReceive+0x5a>
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e7fe      	b.n	8007de8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dea:	f001 f913 	bl	8009014 <xTaskGetSchedulerState>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <xQueueReceive+0x6a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <xQueueReceive+0x6e>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <xQueueReceive+0x70>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <xQueueReceive+0x88>
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61bb      	str	r3, [r7, #24]
 8007e16:	e7fe      	b.n	8007e16 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e18:	f001 fc58 	bl	80096cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01f      	beq.n	8007e68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e2c:	f000 fa93 	bl	8008356 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	1e5a      	subs	r2, r3, #1
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00f      	beq.n	8007e60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	3310      	adds	r3, #16
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 ff2d 	bl	8008ca4 <xTaskRemoveFromEventList>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e50:	4b3c      	ldr	r3, [pc, #240]	; (8007f44 <xQueueReceive+0x1b4>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e60:	f001 fc62 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e069      	b.n	8007f3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e6e:	f001 fc5b 	bl	8009728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e062      	b.n	8007f3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e7c:	f107 0310 	add.w	r3, r7, #16
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 ff71 	bl	8008d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e8a:	f001 fc4d 	bl	8009728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e8e:	f000 fd29 	bl	80088e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e92:	f001 fc1b 	bl	80096cc <vPortEnterCritical>
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea2:	d103      	bne.n	8007eac <xQueueReceive+0x11c>
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d103      	bne.n	8007ec2 <xQueueReceive+0x132>
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec2:	f001 fc31 	bl	8009728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec6:	1d3a      	adds	r2, r7, #4
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 ff60 	bl	8008d94 <xTaskCheckForTimeOut>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d123      	bne.n	8007f22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007edc:	f000 fab3 	bl	8008446 <prvIsQueueEmpty>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d017      	beq.n	8007f16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	3324      	adds	r3, #36	; 0x24
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 feb4 	bl	8008c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef6:	f000 fa54 	bl	80083a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007efa:	f000 fd01 	bl	8008900 <xTaskResumeAll>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d189      	bne.n	8007e18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <xQueueReceive+0x1b4>)
 8007f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	e780      	b.n	8007e18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f18:	f000 fa43 	bl	80083a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f1c:	f000 fcf0 	bl	8008900 <xTaskResumeAll>
 8007f20:	e77a      	b.n	8007e18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f24:	f000 fa3d 	bl	80083a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f28:	f000 fcea 	bl	8008900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f2e:	f000 fa8a 	bl	8008446 <prvIsQueueEmpty>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f43f af6f 	beq.w	8007e18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3730      	adds	r7, #48	; 0x30
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08e      	sub	sp, #56	; 0x38
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f52:	2300      	movs	r3, #0
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <xQueueSemaphoreTake+0x30>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	623b      	str	r3, [r7, #32]
 8007f76:	e7fe      	b.n	8007f76 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <xQueueSemaphoreTake+0x4c>
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e7fe      	b.n	8007f92 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f94:	f001 f83e 	bl	8009014 <xTaskGetSchedulerState>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d102      	bne.n	8007fa4 <xQueueSemaphoreTake+0x5c>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <xQueueSemaphoreTake+0x60>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <xQueueSemaphoreTake+0x62>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <xQueueSemaphoreTake+0x7a>
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fc2:	f001 fb83 	bl	80096cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d024      	beq.n	800801c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007fe2:	f001 f9d1 	bl	8009388 <pvTaskIncrementMutexHeldCount>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00f      	beq.n	8008014 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fe53 	bl	8008ca4 <xTaskRemoveFromEventList>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b53      	ldr	r3, [pc, #332]	; (8008154 <xQueueSemaphoreTake+0x20c>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008014:	f001 fb88 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 8008018:	2301      	movs	r3, #1
 800801a:	e096      	b.n	800814a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d110      	bne.n	8008044 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d009      	beq.n	800803c <xQueueSemaphoreTake+0xf4>
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	e7fe      	b.n	800803a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800803c:	f001 fb74 	bl	8009728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008040:	2300      	movs	r3, #0
 8008042:	e082      	b.n	800814a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fe8a 	bl	8008d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008054:	2301      	movs	r3, #1
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008058:	f001 fb66 	bl	8009728 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800805c:	f000 fc42 	bl	80088e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008060:	f001 fb34 	bl	80096cc <vPortEnterCritical>
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800806a:	b25b      	sxtb	r3, r3
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d103      	bne.n	800807a <xQueueSemaphoreTake+0x132>
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008080:	b25b      	sxtb	r3, r3
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d103      	bne.n	8008090 <xQueueSemaphoreTake+0x148>
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008090:	f001 fb4a 	bl	8009728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008094:	463a      	mov	r2, r7
 8008096:	f107 030c 	add.w	r3, r7, #12
 800809a:	4611      	mov	r1, r2
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fe79 	bl	8008d94 <xTaskCheckForTimeOut>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d132      	bne.n	800810e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080aa:	f000 f9cc 	bl	8008446 <prvIsQueueEmpty>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d026      	beq.n	8008102 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80080bc:	f001 fb06 	bl	80096cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 ffc3 	bl	8009050 <xTaskPriorityInherit>
 80080ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80080cc:	f001 fb2c 	bl	8009728 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fdbf 	bl	8008c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080e0:	f000 f95f 	bl	80083a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080e4:	f000 fc0c 	bl	8008900 <xTaskResumeAll>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f47f af69 	bne.w	8007fc2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80080f0:	4b18      	ldr	r3, [pc, #96]	; (8008154 <xQueueSemaphoreTake+0x20c>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	e75f      	b.n	8007fc2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008104:	f000 f94d 	bl	80083a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008108:	f000 fbfa 	bl	8008900 <xTaskResumeAll>
 800810c:	e759      	b.n	8007fc2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800810e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008110:	f000 f947 	bl	80083a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008114:	f000 fbf4 	bl	8008900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800811a:	f000 f994 	bl	8008446 <prvIsQueueEmpty>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	f43f af4e 	beq.w	8007fc2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00d      	beq.n	8008148 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800812c:	f001 face 	bl	80096cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008132:	f000 f88e 	bl	8008252 <prvGetDisinheritPriorityAfterTimeout>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800813e:	4618      	mov	r0, r3
 8008140:	f001 f88a 	bl	8009258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008144:	f001 faf0 	bl	8009728 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800814a:	4618      	mov	r0, r3
 800814c:	3738      	adds	r7, #56	; 0x38
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	e000ed04 	.word	0xe000ed04

08008158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	; 0x38
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <xQueueReceiveFromISR+0x2a>
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	623b      	str	r3, [r7, #32]
 8008180:	e7fe      	b.n	8008180 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <xQueueReceiveFromISR+0x38>
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <xQueueReceiveFromISR+0x3c>
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <xQueueReceiveFromISR+0x3e>
 8008194:	2300      	movs	r3, #0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <xQueueReceiveFromISR+0x56>
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	e7fe      	b.n	80081ac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081ae:	f001 fb69 	bl	8009884 <vPortValidateInterruptPriority>
	__asm volatile
 80081b2:	f3ef 8211 	mrs	r2, BASEPRI
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	61ba      	str	r2, [r7, #24]
 80081c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80081ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02f      	beq.n	800823a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e8:	f000 f8b5 	bl	8008356 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	1e5a      	subs	r2, r3, #1
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80081f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d112      	bne.n	8008224 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d016      	beq.n	8008234 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	3310      	adds	r3, #16
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fd4a 	bl	8008ca4 <xTaskRemoveFromEventList>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00e      	beq.n	8008234 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e007      	b.n	8008234 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008228:	3301      	adds	r3, #1
 800822a:	b2db      	uxtb	r3, r3
 800822c:	b25a      	sxtb	r2, r3
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008234:	2301      	movs	r3, #1
 8008236:	637b      	str	r3, [r7, #52]	; 0x34
 8008238:	e001      	b.n	800823e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800823a:	2300      	movs	r3, #0
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800824a:	4618      	mov	r0, r3
 800824c:	3738      	adds	r7, #56	; 0x38
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	d006      	beq.n	8008270 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f1c3 0307 	rsb	r3, r3, #7
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	e001      	b.n	8008274 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008274:	68fb      	ldr	r3, [r7, #12]
	}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d14d      	bne.n	8008344 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 ff4f 	bl	8009150 <xTaskPriorityDisinherit>
 80082b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	609a      	str	r2, [r3, #8]
 80082ba:	e043      	b.n	8008344 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d119      	bne.n	80082f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6858      	ldr	r0, [r3, #4]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	461a      	mov	r2, r3
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	f002 fe71 	bl	800afb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d32b      	bcc.n	8008344 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	e026      	b.n	8008344 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68d8      	ldr	r0, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	461a      	mov	r2, r3
 8008300:	68b9      	ldr	r1, [r7, #8]
 8008302:	f002 fe57 	bl	800afb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	425b      	negs	r3, r3
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d207      	bcs.n	8008332 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	425b      	negs	r3, r3
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d105      	bne.n	8008344 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3b01      	subs	r3, #1
 8008342:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800834c:	697b      	ldr	r3, [r7, #20]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d018      	beq.n	800839a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	d303      	bcc.n	800838a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68d9      	ldr	r1, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	461a      	mov	r2, r3
 8008394:	6838      	ldr	r0, [r7, #0]
 8008396:	f002 fe0d 	bl	800afb4 <memcpy>
	}
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083aa:	f001 f98f 	bl	80096cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083b6:	e011      	b.n	80083dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d012      	beq.n	80083e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3324      	adds	r3, #36	; 0x24
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fc6d 	bl	8008ca4 <xTaskRemoveFromEventList>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083d0:	f000 fd40 	bl	8008e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dce9      	bgt.n	80083b8 <prvUnlockQueue+0x16>
 80083e4:	e000      	b.n	80083e8 <prvUnlockQueue+0x46>
					break;
 80083e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	22ff      	movs	r2, #255	; 0xff
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083f0:	f001 f99a 	bl	8009728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083f4:	f001 f96a 	bl	80096cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008400:	e011      	b.n	8008426 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d012      	beq.n	8008430 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3310      	adds	r3, #16
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fc48 	bl	8008ca4 <xTaskRemoveFromEventList>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800841a:	f000 fd1b 	bl	8008e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	3b01      	subs	r3, #1
 8008422:	b2db      	uxtb	r3, r3
 8008424:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842a:	2b00      	cmp	r3, #0
 800842c:	dce9      	bgt.n	8008402 <prvUnlockQueue+0x60>
 800842e:	e000      	b.n	8008432 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008430:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	22ff      	movs	r2, #255	; 0xff
 8008436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800843a:	f001 f975 	bl	8009728 <vPortExitCritical>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800844e:	f001 f93d 	bl	80096cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e001      	b.n	8008464 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008464:	f001 f960 	bl	8009728 <vPortExitCritical>

	return xReturn;
 8008468:	68fb      	ldr	r3, [r7, #12]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800847a:	f001 f927 	bl	80096cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	429a      	cmp	r2, r3
 8008488:	d102      	bne.n	8008490 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	e001      	b.n	8008494 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008494:	f001 f948 	bl	8009728 <vPortExitCritical>

	return xReturn;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b08e      	sub	sp, #56	; 0x38
 80084a6:	af04      	add	r7, sp, #16
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <xTaskCreateStatic+0x28>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	623b      	str	r3, [r7, #32]
 80084c8:	e7fe      	b.n	80084c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <xTaskCreateStatic+0x42>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e7fe      	b.n	80084e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084e4:	2354      	movs	r3, #84	; 0x54
 80084e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b54      	cmp	r3, #84	; 0x54
 80084ec:	d009      	beq.n	8008502 <xTaskCreateStatic+0x60>
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	61bb      	str	r3, [r7, #24]
 8008500:	e7fe      	b.n	8008500 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008502:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01e      	beq.n	8008548 <xTaskCreateStatic+0xa6>
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01b      	beq.n	8008548 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008518:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	2202      	movs	r2, #2
 800851e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008522:	2300      	movs	r3, #0
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	9302      	str	r3, [sp, #8]
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f850 	bl	80085e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008542:	f000 f8d3 	bl	80086ec <prvAddNewTaskToReadyList>
 8008546:	e001      	b.n	800854c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800854c:	697b      	ldr	r3, [r7, #20]
	}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008556:	b580      	push	{r7, lr}
 8008558:	b08c      	sub	sp, #48	; 0x30
 800855a:	af04      	add	r7, sp, #16
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008566:	88fb      	ldrh	r3, [r7, #6]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f001 f9c8 	bl	8009900 <pvPortMalloc>
 8008570:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008578:	2054      	movs	r0, #84	; 0x54
 800857a:	f001 f9c1 	bl	8009900 <pvPortMalloc>
 800857e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	631a      	str	r2, [r3, #48]	; 0x30
 800858c:	e005      	b.n	800859a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f001 fa78 	bl	8009a84 <vPortFree>
 8008594:	e001      	b.n	800859a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d017      	beq.n	80085d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	9302      	str	r3, [sp, #8]
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f80e 	bl	80085e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085c4:	69f8      	ldr	r0, [r7, #28]
 80085c6:	f000 f891 	bl	80086ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ca:	2301      	movs	r3, #1
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	e002      	b.n	80085d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295
 80085d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085d6:	69bb      	ldr	r3, [r7, #24]
	}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085f8:	3b01      	subs	r3, #1
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f023 0307 	bic.w	r3, r3, #7
 8008606:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <prvInitialiseNewTask+0x46>
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e7fe      	b.n	8008624 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01f      	beq.n	800866c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800862c:	2300      	movs	r3, #0
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e012      	b.n	8008658 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	7819      	ldrb	r1, [r3, #0]
 800863a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	3334      	adds	r3, #52	; 0x34
 8008642:	460a      	mov	r2, r1
 8008644:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d006      	beq.n	8008660 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b0f      	cmp	r3, #15
 800865c:	d9e9      	bls.n	8008632 <prvInitialiseNewTask+0x52>
 800865e:	e000      	b.n	8008662 <prvInitialiseNewTask+0x82>
			{
				break;
 8008660:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800866a:	e003      	b.n	8008674 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	2b06      	cmp	r3, #6
 8008678:	d901      	bls.n	800867e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800867a:	2306      	movs	r3, #6
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008688:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	2200      	movs	r2, #0
 800868e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff f81f 	bl	80076d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	3318      	adds	r3, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff f81a 	bl	80076d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	f1c3 0207 	rsb	r2, r3, #7
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	2200      	movs	r2, #0
 80086be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f000 fed5 	bl	800947c <pxPortInitialiseStack>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e4:	bf00      	nop
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086f4:	f000 ffea 	bl	80096cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086f8:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	4a29      	ldr	r2, [pc, #164]	; (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 8008700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008702:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800870a:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008710:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d110      	bne.n	800873a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008718:	f000 fbc2 	bl	8008ea0 <prvInitialiseTaskLists>
 800871c:	e00d      	b.n	800873a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800871e:	4b23      	ldr	r3, [pc, #140]	; (80087ac <prvAddNewTaskToReadyList+0xc0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008726:	4b20      	ldr	r3, [pc, #128]	; (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	429a      	cmp	r2, r3
 8008732:	d802      	bhi.n	800873a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008734:	4a1c      	ldr	r2, [pc, #112]	; (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800873a:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <prvAddNewTaskToReadyList+0xc4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <prvAddNewTaskToReadyList+0xc4>)
 8008742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	2201      	movs	r2, #1
 800874a:	409a      	lsls	r2, r3
 800874c:	4b19      	ldr	r3, [pc, #100]	; (80087b4 <prvAddNewTaskToReadyList+0xc8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4313      	orrs	r3, r2
 8008752:	4a18      	ldr	r2, [pc, #96]	; (80087b4 <prvAddNewTaskToReadyList+0xc8>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <prvAddNewTaskToReadyList+0xcc>)
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f7fe ffc0 	bl	80076f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008772:	f000 ffd9 	bl	8009728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008776:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <prvAddNewTaskToReadyList+0xc0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800877e:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	429a      	cmp	r2, r3
 800878a:	d207      	bcs.n	800879c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <prvAddNewTaskToReadyList+0xd0>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200001b4 	.word	0x200001b4
 80087a8:	200000b4 	.word	0x200000b4
 80087ac:	200001c0 	.word	0x200001c0
 80087b0:	200001d0 	.word	0x200001d0
 80087b4:	200001bc 	.word	0x200001bc
 80087b8:	200000b8 	.word	0x200000b8
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <vTaskDelay+0x60>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <vTaskDelay+0x2e>
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	e7fe      	b.n	80087ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80087ee:	f000 f879 	bl	80088e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087f2:	2100      	movs	r1, #0
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fddb 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087fa:	f000 f881 	bl	8008900 <xTaskResumeAll>
 80087fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008806:	4b07      	ldr	r3, [pc, #28]	; (8008824 <vTaskDelay+0x64>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200001dc 	.word	0x200001dc
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008836:	463a      	mov	r2, r7
 8008838:	1d39      	adds	r1, r7, #4
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fa3c 	bl	8009cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	9202      	str	r2, [sp, #8]
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	2300      	movs	r3, #0
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	460a      	mov	r2, r1
 8008856:	491d      	ldr	r1, [pc, #116]	; (80088cc <vTaskStartScheduler+0xa4>)
 8008858:	481d      	ldr	r0, [pc, #116]	; (80088d0 <vTaskStartScheduler+0xa8>)
 800885a:	f7ff fe22 	bl	80084a2 <xTaskCreateStatic>
 800885e:	4602      	mov	r2, r0
 8008860:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <vTaskStartScheduler+0xac>)
 8008862:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <vTaskStartScheduler+0xac>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e001      	b.n	8008876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d115      	bne.n	80088a8 <vTaskStartScheduler+0x80>
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800888e:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <vTaskStartScheduler+0xb0>)
 8008890:	f04f 32ff 	mov.w	r2, #4294967295
 8008894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <vTaskStartScheduler+0xb4>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800889c:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <vTaskStartScheduler+0xb8>)
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088a2:	f000 fe75 	bl	8009590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a6:	e00d      	b.n	80088c4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ae:	d109      	bne.n	80088c4 <vTaskStartScheduler+0x9c>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e7fe      	b.n	80088c2 <vTaskStartScheduler+0x9a>
}
 80088c4:	bf00      	nop
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	0800b1a4 	.word	0x0800b1a4
 80088d0:	08008e6d 	.word	0x08008e6d
 80088d4:	200001d8 	.word	0x200001d8
 80088d8:	200001d4 	.word	0x200001d4
 80088dc:	200001c0 	.word	0x200001c0
 80088e0:	200001b8 	.word	0x200001b8

080088e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <vTaskSuspendAll+0x18>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a03      	ldr	r2, [pc, #12]	; (80088fc <vTaskSuspendAll+0x18>)
 80088f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088f2:	bf00      	nop
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	200001dc 	.word	0x200001dc

08008900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800890e:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <xTaskResumeAll+0x114>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <xTaskResumeAll+0x2a>
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	e7fe      	b.n	8008928 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800892a:	f000 fecf 	bl	80096cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800892e:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <xTaskResumeAll+0x114>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3b01      	subs	r3, #1
 8008934:	4a37      	ldr	r2, [pc, #220]	; (8008a14 <xTaskResumeAll+0x114>)
 8008936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008938:	4b36      	ldr	r3, [pc, #216]	; (8008a14 <xTaskResumeAll+0x114>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d161      	bne.n	8008a04 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008940:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <xTaskResumeAll+0x118>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d05d      	beq.n	8008a04 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008948:	e02e      	b.n	80089a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894a:	4b34      	ldr	r3, [pc, #208]	; (8008a1c <xTaskResumeAll+0x11c>)
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3318      	adds	r3, #24
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe ff28 	bl	80077ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3304      	adds	r3, #4
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe ff23 	bl	80077ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	2201      	movs	r2, #1
 800896c:	409a      	lsls	r2, r3
 800896e:	4b2c      	ldr	r3, [pc, #176]	; (8008a20 <xTaskResumeAll+0x120>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4313      	orrs	r3, r2
 8008974:	4a2a      	ldr	r2, [pc, #168]	; (8008a20 <xTaskResumeAll+0x120>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <xTaskResumeAll+0x124>)
 8008986:	441a      	add	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fe feaf 	bl	80076f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4b23      	ldr	r3, [pc, #140]	; (8008a28 <xTaskResumeAll+0x128>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	429a      	cmp	r2, r3
 80089a0:	d302      	bcc.n	80089a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80089a2:	4b22      	ldr	r3, [pc, #136]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a8:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <xTaskResumeAll+0x11c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1cc      	bne.n	800894a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089b6:	f000 fb0d 	bl	8008fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089ba:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <xTaskResumeAll+0x130>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d010      	beq.n	80089e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089c6:	f000 f837 	bl	8008a38 <xTaskIncrementTick>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3b01      	subs	r3, #1
 80089da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f1      	bne.n	80089c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <xTaskResumeAll+0x130>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089e8:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d009      	beq.n	8008a04 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <xTaskResumeAll+0x134>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a04:	f000 fe90 	bl	8009728 <vPortExitCritical>

	return xAlreadyYielded;
 8008a08:	68bb      	ldr	r3, [r7, #8]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	200001dc 	.word	0x200001dc
 8008a18:	200001b4 	.word	0x200001b4
 8008a1c:	20000174 	.word	0x20000174
 8008a20:	200001bc 	.word	0x200001bc
 8008a24:	200000b8 	.word	0x200000b8
 8008a28:	200000b4 	.word	0x200000b4
 8008a2c:	200001c8 	.word	0x200001c8
 8008a30:	200001c4 	.word	0x200001c4
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a42:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <xTaskIncrementTick+0x144>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 8087 	bne.w	8008b5a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <xTaskIncrementTick+0x148>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a54:	4a4a      	ldr	r2, [pc, #296]	; (8008b80 <xTaskIncrementTick+0x148>)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d11f      	bne.n	8008aa0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a60:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <xTaskIncrementTick+0x46>
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	e7fe      	b.n	8008a7c <xTaskIncrementTick+0x44>
 8008a7e:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <xTaskIncrementTick+0x150>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a3e      	ldr	r2, [pc, #248]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	4a3e      	ldr	r2, [pc, #248]	; (8008b88 <xTaskIncrementTick+0x150>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <xTaskIncrementTick+0x154>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3301      	adds	r3, #1
 8008a98:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <xTaskIncrementTick+0x154>)
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	f000 fa9a 	bl	8008fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aa0:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d348      	bcc.n	8008b3c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aaa:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	601a      	str	r2, [r3, #0]
					break;
 8008abc:	e03e      	b.n	8008b3c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008abe:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d203      	bcs.n	8008ade <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ad6:	4a2e      	ldr	r2, [pc, #184]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008adc:	e02e      	b.n	8008b3c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fe62 	bl	80077ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fe59 	bl	80077ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	2201      	movs	r2, #1
 8008b00:	409a      	lsls	r2, r3
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <xTaskIncrementTick+0x15c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <xTaskIncrementTick+0x15c>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <xTaskIncrementTick+0x160>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe fde5 	bl	80076f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <xTaskIncrementTick+0x164>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3b9      	bcc.n	8008aaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	e7b6      	b.n	8008aaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3c:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <xTaskIncrementTick+0x164>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4915      	ldr	r1, [pc, #84]	; (8008b98 <xTaskIncrementTick+0x160>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d907      	bls.n	8008b64 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e004      	b.n	8008b64 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTaskIncrementTick+0x168>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <xTaskIncrementTick+0x168>)
 8008b62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <xTaskIncrementTick+0x16c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200001dc 	.word	0x200001dc
 8008b80:	200001b8 	.word	0x200001b8
 8008b84:	2000016c 	.word	0x2000016c
 8008b88:	20000170 	.word	0x20000170
 8008b8c:	200001cc 	.word	0x200001cc
 8008b90:	200001d4 	.word	0x200001d4
 8008b94:	200001bc 	.word	0x200001bc
 8008b98:	200000b8 	.word	0x200000b8
 8008b9c:	200000b4 	.word	0x200000b4
 8008ba0:	200001c4 	.word	0x200001c4
 8008ba4:	200001c8 	.word	0x200001c8

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b26      	ldr	r3, [pc, #152]	; (8008c48 <vTaskSwitchContext+0xa0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bb6:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <vTaskSwitchContext+0xa4>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bbc:	e03e      	b.n	8008c3c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008bbe:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <vTaskSwitchContext+0xa4>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <vTaskSwitchContext+0xa8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	fab3 f383 	clz	r3, r3
 8008bd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f1c3 031f 	rsb	r3, r3, #31
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	491e      	ldr	r1, [pc, #120]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
 8008c00:	e7fe      	b.n	8008c00 <vTaskSwitchContext+0x58>
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4a11      	ldr	r2, [pc, #68]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008c0e:	4413      	add	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3308      	adds	r3, #8
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d104      	bne.n	8008c32 <vTaskSwitchContext+0x8a>
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008c3a:	6013      	str	r3, [r2, #0]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	200001dc 	.word	0x200001dc
 8008c4c:	200001c8 	.word	0x200001c8
 8008c50:	200001bc 	.word	0x200001bc
 8008c54:	200000b8 	.word	0x200000b8
 8008c58:	200000b4 	.word	0x200000b4

08008c5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <vTaskPlaceOnEventList+0x24>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e7fe      	b.n	8008c7e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <vTaskPlaceOnEventList+0x44>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3318      	adds	r3, #24
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fe fd56 	bl	800773a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c8e:	2101      	movs	r1, #1
 8008c90:	6838      	ldr	r0, [r7, #0]
 8008c92:	f000 fb8d 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200000b4 	.word	0x200000b4

08008ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <xTaskRemoveFromEventList+0x2a>
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e7fe      	b.n	8008ccc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3318      	adds	r3, #24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fd6a 	bl	80077ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cd8:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <xTaskRemoveFromEventList+0xac>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11c      	bne.n	8008d1a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fd61 	bl	80077ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	2201      	movs	r2, #1
 8008cf0:	409a      	lsls	r2, r3
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <xTaskRemoveFromEventList+0xb0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <xTaskRemoveFromEventList+0xb0>)
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <xTaskRemoveFromEventList+0xb4>)
 8008d0a:	441a      	add	r2, r3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fe fced 	bl	80076f2 <vListInsertEnd>
 8008d18:	e005      	b.n	8008d26 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	4619      	mov	r1, r3
 8008d20:	480e      	ldr	r0, [pc, #56]	; (8008d5c <xTaskRemoveFromEventList+0xb8>)
 8008d22:	f7fe fce6 	bl	80076f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <xTaskRemoveFromEventList+0xbc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d905      	bls.n	8008d40 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <xTaskRemoveFromEventList+0xc0>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e001      	b.n	8008d44 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d44:	697b      	ldr	r3, [r7, #20]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200001dc 	.word	0x200001dc
 8008d54:	200001bc 	.word	0x200001bc
 8008d58:	200000b8 	.word	0x200000b8
 8008d5c:	20000174 	.word	0x20000174
 8008d60:	200000b4 	.word	0x200000b4
 8008d64:	200001c8 	.word	0x200001c8

08008d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <vTaskInternalSetTimeOutState+0x24>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <vTaskInternalSetTimeOutState+0x28>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	605a      	str	r2, [r3, #4]
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	200001cc 	.word	0x200001cc
 8008d90:	200001b8 	.word	0x200001b8

08008d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d109      	bne.n	8008db8 <xTaskCheckForTimeOut+0x24>
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	e7fe      	b.n	8008db6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <xTaskCheckForTimeOut+0x3e>
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	e7fe      	b.n	8008dd0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008dd2:	f000 fc7b 	bl	80096cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <xTaskCheckForTimeOut+0xb8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d102      	bne.n	8008df6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e023      	b.n	8008e3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <xTaskCheckForTimeOut+0xbc>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d007      	beq.n	8008e12 <xTaskCheckForTimeOut+0x7e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e015      	b.n	8008e3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20b      	bcs.n	8008e34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff9d 	bl	8008d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e004      	b.n	8008e3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e3e:	f000 fc73 	bl	8009728 <vPortExitCritical>

	return xReturn;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200001b8 	.word	0x200001b8
 8008e50:	200001cc 	.word	0x200001cc

08008e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <vTaskMissedYield+0x14>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	200001c8 	.word	0x200001c8

08008e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e74:	f000 f854 	bl	8008f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e78:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <prvIdleTask+0x2c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d907      	bls.n	8008e90 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <prvIdleTask+0x30>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e90:	f000 ff0c 	bl	8009cac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e94:	e7ee      	b.n	8008e74 <prvIdleTask+0x8>
 8008e96:	bf00      	nop
 8008e98:	200000b8 	.word	0x200000b8
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	e00c      	b.n	8008ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4a12      	ldr	r2, [pc, #72]	; (8008f00 <prvInitialiseTaskLists+0x60>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fbec 	bl	8007698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	607b      	str	r3, [r7, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d9ef      	bls.n	8008eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ecc:	480d      	ldr	r0, [pc, #52]	; (8008f04 <prvInitialiseTaskLists+0x64>)
 8008ece:	f7fe fbe3 	bl	8007698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ed2:	480d      	ldr	r0, [pc, #52]	; (8008f08 <prvInitialiseTaskLists+0x68>)
 8008ed4:	f7fe fbe0 	bl	8007698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ed8:	480c      	ldr	r0, [pc, #48]	; (8008f0c <prvInitialiseTaskLists+0x6c>)
 8008eda:	f7fe fbdd 	bl	8007698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ede:	480c      	ldr	r0, [pc, #48]	; (8008f10 <prvInitialiseTaskLists+0x70>)
 8008ee0:	f7fe fbda 	bl	8007698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ee4:	480b      	ldr	r0, [pc, #44]	; (8008f14 <prvInitialiseTaskLists+0x74>)
 8008ee6:	f7fe fbd7 	bl	8007698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <prvInitialiseTaskLists+0x78>)
 8008eec:	4a05      	ldr	r2, [pc, #20]	; (8008f04 <prvInitialiseTaskLists+0x64>)
 8008eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <prvInitialiseTaskLists+0x7c>)
 8008ef2:	4a05      	ldr	r2, [pc, #20]	; (8008f08 <prvInitialiseTaskLists+0x68>)
 8008ef4:	601a      	str	r2, [r3, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200000b8 	.word	0x200000b8
 8008f04:	20000144 	.word	0x20000144
 8008f08:	20000158 	.word	0x20000158
 8008f0c:	20000174 	.word	0x20000174
 8008f10:	20000188 	.word	0x20000188
 8008f14:	200001a0 	.word	0x200001a0
 8008f18:	2000016c 	.word	0x2000016c
 8008f1c:	20000170 	.word	0x20000170

08008f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f26:	e019      	b.n	8008f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f28:	f000 fbd0 	bl	80096cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <prvCheckTasksWaitingTermination+0x4c>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fc37 	bl	80077ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <prvCheckTasksWaitingTermination+0x50>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <prvCheckTasksWaitingTermination+0x50>)
 8008f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvCheckTasksWaitingTermination+0x54>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <prvCheckTasksWaitingTermination+0x54>)
 8008f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f52:	f000 fbe9 	bl	8009728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f80e 	bl	8008f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <prvCheckTasksWaitingTermination+0x54>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e1      	bne.n	8008f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000188 	.word	0x20000188
 8008f70:	200001b4 	.word	0x200001b4
 8008f74:	2000019c 	.word	0x2000019c

08008f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d108      	bne.n	8008f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fd78 	bl	8009a84 <vPortFree>
				vPortFree( pxTCB );
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fd75 	bl	8009a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f9a:	e017      	b.n	8008fcc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d103      	bne.n	8008fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fd6c 	bl	8009a84 <vPortFree>
	}
 8008fac:	e00e      	b.n	8008fcc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d009      	beq.n	8008fcc <prvDeleteTCB+0x54>
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	e7fe      	b.n	8008fca <prvDeleteTCB+0x52>
	}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <prvResetNextTaskUnblockTime+0x38>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <prvResetNextTaskUnblockTime+0x3c>)
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fec:	e008      	b.n	8009000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <prvResetNextTaskUnblockTime+0x38>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4a04      	ldr	r2, [pc, #16]	; (8009010 <prvResetNextTaskUnblockTime+0x3c>)
 8008ffe:	6013      	str	r3, [r2, #0]
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	2000016c 	.word	0x2000016c
 8009010:	200001d4 	.word	0x200001d4

08009014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800901a:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <xTaskGetSchedulerState+0x34>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009022:	2301      	movs	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	e008      	b.n	800903a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009028:	4b08      	ldr	r3, [pc, #32]	; (800904c <xTaskGetSchedulerState+0x38>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009030:	2302      	movs	r3, #2
 8009032:	607b      	str	r3, [r7, #4]
 8009034:	e001      	b.n	800903a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800903a:	687b      	ldr	r3, [r7, #4]
	}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	200001c0 	.word	0x200001c0
 800904c:	200001dc 	.word	0x200001dc

08009050 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d069      	beq.n	800913a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	4b36      	ldr	r3, [pc, #216]	; (8009144 <xTaskPriorityInherit+0xf4>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	429a      	cmp	r2, r3
 8009072:	d259      	bcs.n	8009128 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	db06      	blt.n	800908a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907c:	4b31      	ldr	r3, [pc, #196]	; (8009144 <xTaskPriorityInherit+0xf4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	f1c3 0207 	rsb	r2, r3, #7
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6959      	ldr	r1, [r3, #20]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a2b      	ldr	r2, [pc, #172]	; (8009148 <xTaskPriorityInherit+0xf8>)
 800909c:	4413      	add	r3, r2
 800909e:	4299      	cmp	r1, r3
 80090a0:	d13a      	bne.n	8009118 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fb80 	bl	80077ac <uxListRemove>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d115      	bne.n	80090de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	4924      	ldr	r1, [pc, #144]	; (8009148 <xTaskPriorityInherit+0xf8>)
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTaskPriorityInherit+0x8e>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	2201      	movs	r2, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43da      	mvns	r2, r3
 80090d4:	4b1d      	ldr	r3, [pc, #116]	; (800914c <xTaskPriorityInherit+0xfc>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	4a1c      	ldr	r2, [pc, #112]	; (800914c <xTaskPriorityInherit+0xfc>)
 80090dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090de:	4b19      	ldr	r3, [pc, #100]	; (8009144 <xTaskPriorityInherit+0xf4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	2201      	movs	r2, #1
 80090ee:	409a      	lsls	r2, r3
 80090f0:	4b16      	ldr	r3, [pc, #88]	; (800914c <xTaskPriorityInherit+0xfc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	4a15      	ldr	r2, [pc, #84]	; (800914c <xTaskPriorityInherit+0xfc>)
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4a10      	ldr	r2, [pc, #64]	; (8009148 <xTaskPriorityInherit+0xf8>)
 8009108:	441a      	add	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3304      	adds	r3, #4
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7fe faee 	bl	80076f2 <vListInsertEnd>
 8009116:	e004      	b.n	8009122 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <xTaskPriorityInherit+0xf4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009122:	2301      	movs	r3, #1
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e008      	b.n	800913a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800912c:	4b05      	ldr	r3, [pc, #20]	; (8009144 <xTaskPriorityInherit+0xf4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	429a      	cmp	r2, r3
 8009134:	d201      	bcs.n	800913a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009136:	2301      	movs	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800913a:	68fb      	ldr	r3, [r7, #12]
	}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	200000b4 	.word	0x200000b4
 8009148:	200000b8 	.word	0x200000b8
 800914c:	200001bc 	.word	0x200001bc

08009150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d06c      	beq.n	8009240 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009166:	4b39      	ldr	r3, [pc, #228]	; (800924c <xTaskPriorityDisinherit+0xfc>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	429a      	cmp	r2, r3
 800916e:	d009      	beq.n	8009184 <xTaskPriorityDisinherit+0x34>
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e7fe      	b.n	8009182 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <xTaskPriorityDisinherit+0x50>
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60bb      	str	r3, [r7, #8]
 800919e:	e7fe      	b.n	800919e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a4:	1e5a      	subs	r2, r3, #1
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d044      	beq.n	8009240 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d140      	bne.n	8009240 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe faf2 	bl	80077ac <uxListRemove>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d115      	bne.n	80091fa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d2:	491f      	ldr	r1, [pc, #124]	; (8009250 <xTaskPriorityDisinherit+0x100>)
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <xTaskPriorityDisinherit+0xaa>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	2201      	movs	r2, #1
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	43da      	mvns	r2, r3
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <xTaskPriorityDisinherit+0x104>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4013      	ands	r3, r2
 80091f6:	4a17      	ldr	r2, [pc, #92]	; (8009254 <xTaskPriorityDisinherit+0x104>)
 80091f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	f1c3 0207 	rsb	r2, r3, #7
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	2201      	movs	r2, #1
 8009214:	409a      	lsls	r2, r3
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <xTaskPriorityDisinherit+0x104>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4313      	orrs	r3, r2
 800921c:	4a0d      	ldr	r2, [pc, #52]	; (8009254 <xTaskPriorityDisinherit+0x104>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a08      	ldr	r2, [pc, #32]	; (8009250 <xTaskPriorityDisinherit+0x100>)
 800922e:	441a      	add	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe fa5b 	bl	80076f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009240:	697b      	ldr	r3, [r7, #20]
	}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200000b4 	.word	0x200000b4
 8009250:	200000b8 	.word	0x200000b8
 8009254:	200001bc 	.word	0x200001bc

08009258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009266:	2301      	movs	r3, #1
 8009268:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8081 	beq.w	8009374 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	e7fe      	b.n	800928c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d902      	bls.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	e002      	b.n	80092a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d062      	beq.n	8009374 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d15d      	bne.n	8009374 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092b8:	4b30      	ldr	r3, [pc, #192]	; (800937c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d109      	bne.n	80092d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	e7fe      	b.n	80092d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	db04      	blt.n	80092f4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f1c3 0207 	rsb	r2, r3, #7
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	6959      	ldr	r1, [r3, #20]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4a1f      	ldr	r2, [pc, #124]	; (8009380 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009304:	4413      	add	r3, r2
 8009306:	4299      	cmp	r1, r3
 8009308:	d134      	bne.n	8009374 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	3304      	adds	r3, #4
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fa4c 	bl	80077ac <uxListRemove>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d115      	bne.n	8009346 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	4918      	ldr	r1, [pc, #96]	; (8009380 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	2201      	movs	r2, #1
 8009336:	fa02 f303 	lsl.w	r3, r2, r3
 800933a:	43da      	mvns	r2, r3
 800933c:	4b11      	ldr	r3, [pc, #68]	; (8009384 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4013      	ands	r3, r2
 8009342:	4a10      	ldr	r2, [pc, #64]	; (8009384 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009344:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	2201      	movs	r2, #1
 800934c:	409a      	lsls	r2, r3
 800934e:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4313      	orrs	r3, r2
 8009354:	4a0b      	ldr	r2, [pc, #44]	; (8009384 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4a06      	ldr	r2, [pc, #24]	; (8009380 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009366:	441a      	add	r2, r3
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fe f9bf 	bl	80076f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009374:	bf00      	nop
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	200000b4 	.word	0x200000b4
 8009380:	200000b8 	.word	0x200000b8
 8009384:	200001bc 	.word	0x200001bc

08009388 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800938c:	4b07      	ldr	r3, [pc, #28]	; (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800939a:	3201      	adds	r2, #1
 800939c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800939e:	4b03      	ldr	r3, [pc, #12]	; (80093ac <pvTaskIncrementMutexHeldCount+0x24>)
 80093a0:	681b      	ldr	r3, [r3, #0]
	}
 80093a2:	4618      	mov	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	200000b4 	.word	0x200000b4

080093b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ba:	4b29      	ldr	r3, [pc, #164]	; (8009460 <prvAddCurrentTaskToDelayedList+0xb0>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c0:	4b28      	ldr	r3, [pc, #160]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f9f0 	bl	80077ac <uxListRemove>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093d2:	4b24      	ldr	r3, [pc, #144]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	2201      	movs	r2, #1
 80093da:	fa02 f303 	lsl.w	r3, r2, r3
 80093de:	43da      	mvns	r2, r3
 80093e0:	4b21      	ldr	r3, [pc, #132]	; (8009468 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4013      	ands	r3, r2
 80093e6:	4a20      	ldr	r2, [pc, #128]	; (8009468 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d10a      	bne.n	8009408 <prvAddCurrentTaskToDelayedList+0x58>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f8:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4619      	mov	r1, r3
 8009400:	481a      	ldr	r0, [pc, #104]	; (800946c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009402:	f7fe f976 	bl	80076f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009406:	e026      	b.n	8009456 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009410:	4b14      	ldr	r3, [pc, #80]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	429a      	cmp	r2, r3
 800941e:	d209      	bcs.n	8009434 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009420:	4b13      	ldr	r3, [pc, #76]	; (8009470 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f7fe f984 	bl	800773a <vListInsert>
}
 8009432:	e010      	b.n	8009456 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <prvAddCurrentTaskToDelayedList+0xb4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3304      	adds	r3, #4
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f7fe f97a 	bl	800773a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	429a      	cmp	r2, r3
 800944e:	d202      	bcs.n	8009456 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009450:	4a09      	ldr	r2, [pc, #36]	; (8009478 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6013      	str	r3, [r2, #0]
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200001b8 	.word	0x200001b8
 8009464:	200000b4 	.word	0x200000b4
 8009468:	200001bc 	.word	0x200001bc
 800946c:	200001a0 	.word	0x200001a0
 8009470:	20000170 	.word	0x20000170
 8009474:	2000016c 	.word	0x2000016c
 8009478:	200001d4 	.word	0x200001d4

0800947c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3b04      	subs	r3, #4
 800948c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b04      	subs	r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f023 0201 	bic.w	r2, r3, #1
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094ac:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <pxPortInitialiseStack+0x64>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b14      	subs	r3, #20
 80094b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3b04      	subs	r3, #4
 80094c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f06f 0202 	mvn.w	r2, #2
 80094ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3b20      	subs	r3, #32
 80094d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094d2:	68fb      	ldr	r3, [r7, #12]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	080094e5 	.word	0x080094e5

080094e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094ee:	4b11      	ldr	r3, [pc, #68]	; (8009534 <prvTaskExitError+0x50>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d009      	beq.n	800950c <prvTaskExitError+0x28>
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e7fe      	b.n	800950a <prvTaskExitError+0x26>
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800951e:	bf00      	nop
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0fc      	beq.n	8009520 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000028 	.word	0x20000028
	...

08009540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <pxCurrentTCBConst2>)
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6808      	ldr	r0, [r1, #0]
 8009546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	f380 8809 	msr	PSP, r0
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	4770      	bx	lr
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst2>:
 8009560:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009568:	4808      	ldr	r0, [pc, #32]	; (800958c <prvPortStartFirstTask+0x24>)
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	6800      	ldr	r0, [r0, #0]
 800956e:	f380 8808 	msr	MSP, r0
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8814 	msr	CONTROL, r0
 800957a:	b662      	cpsie	i
 800957c:	b661      	cpsie	f
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	df00      	svc	0
 8009588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800958a:	bf00      	nop
 800958c:	e000ed08 	.word	0xe000ed08

08009590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009596:	4b44      	ldr	r3, [pc, #272]	; (80096a8 <xPortStartScheduler+0x118>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a44      	ldr	r2, [pc, #272]	; (80096ac <xPortStartScheduler+0x11c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d109      	bne.n	80095b4 <xPortStartScheduler+0x24>
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	e7fe      	b.n	80095b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095b4:	4b3c      	ldr	r3, [pc, #240]	; (80096a8 <xPortStartScheduler+0x118>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a3d      	ldr	r2, [pc, #244]	; (80096b0 <xPortStartScheduler+0x120>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d109      	bne.n	80095d2 <xPortStartScheduler+0x42>
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	e7fe      	b.n	80095d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095d2:	4b38      	ldr	r3, [pc, #224]	; (80096b4 <xPortStartScheduler+0x124>)
 80095d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	22ff      	movs	r2, #255	; 0xff
 80095e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <xPortStartScheduler+0x128>)
 80095f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095fa:	4b30      	ldr	r3, [pc, #192]	; (80096bc <xPortStartScheduler+0x12c>)
 80095fc:	2207      	movs	r2, #7
 80095fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009600:	e009      	b.n	8009616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009602:	4b2e      	ldr	r3, [pc, #184]	; (80096bc <xPortStartScheduler+0x12c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3b01      	subs	r3, #1
 8009608:	4a2c      	ldr	r2, [pc, #176]	; (80096bc <xPortStartScheduler+0x12c>)
 800960a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961e:	2b80      	cmp	r3, #128	; 0x80
 8009620:	d0ef      	beq.n	8009602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009622:	4b26      	ldr	r3, [pc, #152]	; (80096bc <xPortStartScheduler+0x12c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1c3 0307 	rsb	r3, r3, #7
 800962a:	2b04      	cmp	r3, #4
 800962c:	d009      	beq.n	8009642 <xPortStartScheduler+0xb2>
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	e7fe      	b.n	8009640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009642:	4b1e      	ldr	r3, [pc, #120]	; (80096bc <xPortStartScheduler+0x12c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	4a1c      	ldr	r2, [pc, #112]	; (80096bc <xPortStartScheduler+0x12c>)
 800964a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <xPortStartScheduler+0x12c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009654:	4a19      	ldr	r2, [pc, #100]	; (80096bc <xPortStartScheduler+0x12c>)
 8009656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <xPortStartScheduler+0x130>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a16      	ldr	r2, [pc, #88]	; (80096c0 <xPortStartScheduler+0x130>)
 8009666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800966a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800966c:	4b14      	ldr	r3, [pc, #80]	; (80096c0 <xPortStartScheduler+0x130>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a13      	ldr	r2, [pc, #76]	; (80096c0 <xPortStartScheduler+0x130>)
 8009672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009678:	f000 f8d6 	bl	8009828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800967c:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <xPortStartScheduler+0x134>)
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009682:	f000 f8f5 	bl	8009870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <xPortStartScheduler+0x138>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a0f      	ldr	r2, [pc, #60]	; (80096c8 <xPortStartScheduler+0x138>)
 800968c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009692:	f7ff ff69 	bl	8009568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009696:	f7ff fa87 	bl	8008ba8 <vTaskSwitchContext>
	prvTaskExitError();
 800969a:	f7ff ff23 	bl	80094e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	e000ed00 	.word	0xe000ed00
 80096ac:	410fc271 	.word	0x410fc271
 80096b0:	410fc270 	.word	0x410fc270
 80096b4:	e000e400 	.word	0xe000e400
 80096b8:	200001e0 	.word	0x200001e0
 80096bc:	200001e4 	.word	0x200001e4
 80096c0:	e000ed20 	.word	0xe000ed20
 80096c4:	20000028 	.word	0x20000028
 80096c8:	e000ef34 	.word	0xe000ef34

080096cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <vPortEnterCritical+0x54>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	4a0d      	ldr	r2, [pc, #52]	; (8009720 <vPortEnterCritical+0x54>)
 80096ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <vPortEnterCritical+0x54>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d10e      	bne.n	8009714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <vPortEnterCritical+0x58>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d009      	beq.n	8009714 <vPortEnterCritical+0x48>
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	603b      	str	r3, [r7, #0]
 8009712:	e7fe      	b.n	8009712 <vPortEnterCritical+0x46>
	}
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000028 	.word	0x20000028
 8009724:	e000ed04 	.word	0xe000ed04

08009728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <vPortExitCritical+0x4c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <vPortExitCritical+0x22>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	e7fe      	b.n	8009748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800974a:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <vPortExitCritical+0x4c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3b01      	subs	r3, #1
 8009750:	4a08      	ldr	r2, [pc, #32]	; (8009774 <vPortExitCritical+0x4c>)
 8009752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009754:	4b07      	ldr	r3, [pc, #28]	; (8009774 <vPortExitCritical+0x4c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <vPortExitCritical+0x3e>
 800975c:	2300      	movs	r3, #0
 800975e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20000028 	.word	0x20000028
	...

08009780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009780:	f3ef 8009 	mrs	r0, PSP
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <pxCurrentTCBConst>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	f01e 0f10 	tst.w	lr, #16
 8009790:	bf08      	it	eq
 8009792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	6010      	str	r0, [r2, #0]
 800979c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097a4:	f380 8811 	msr	BASEPRI, r0
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f7ff f9fa 	bl	8008ba8 <vTaskSwitchContext>
 80097b4:	f04f 0000 	mov.w	r0, #0
 80097b8:	f380 8811 	msr	BASEPRI, r0
 80097bc:	bc09      	pop	{r0, r3}
 80097be:	6819      	ldr	r1, [r3, #0]
 80097c0:	6808      	ldr	r0, [r1, #0]
 80097c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c6:	f01e 0f10 	tst.w	lr, #16
 80097ca:	bf08      	it	eq
 80097cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097d0:	f380 8809 	msr	PSP, r0
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst>:
 80097e0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009800:	f7ff f91a 	bl	8008a38 <xTaskIncrementTick>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <SysTick_Handler+0x3c>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <vPortSetupTimerInterrupt+0x34>)
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <vPortSetupTimerInterrupt+0x38>)
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009838:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <vPortSetupTimerInterrupt+0x3c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <vPortSetupTimerInterrupt+0x40>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	099b      	lsrs	r3, r3, #6
 8009844:	4a09      	ldr	r2, [pc, #36]	; (800986c <vPortSetupTimerInterrupt+0x44>)
 8009846:	3b01      	subs	r3, #1
 8009848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800984a:	4b04      	ldr	r3, [pc, #16]	; (800985c <vPortSetupTimerInterrupt+0x34>)
 800984c:	2207      	movs	r2, #7
 800984e:	601a      	str	r2, [r3, #0]
}
 8009850:	bf00      	nop
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	e000e010 	.word	0xe000e010
 8009860:	e000e018 	.word	0xe000e018
 8009864:	2000002c 	.word	0x2000002c
 8009868:	10624dd3 	.word	0x10624dd3
 800986c:	e000e014 	.word	0xe000e014

08009870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009880 <vPortEnableVFP+0x10>
 8009874:	6801      	ldr	r1, [r0, #0]
 8009876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800987a:	6001      	str	r1, [r0, #0]
 800987c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800987e:	bf00      	nop
 8009880:	e000ed88 	.word	0xe000ed88

08009884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800988a:	f3ef 8305 	mrs	r3, IPSR
 800988e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b0f      	cmp	r3, #15
 8009894:	d913      	bls.n	80098be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009896:	4a16      	ldr	r2, [pc, #88]	; (80098f0 <vPortValidateInterruptPriority+0x6c>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098a0:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <vPortValidateInterruptPriority+0x70>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	7afa      	ldrb	r2, [r7, #11]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d209      	bcs.n	80098be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e7fe      	b.n	80098bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <vPortValidateInterruptPriority+0x74>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098c6:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <vPortValidateInterruptPriority+0x78>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d909      	bls.n	80098e2 <vPortValidateInterruptPriority+0x5e>
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	e7fe      	b.n	80098e0 <vPortValidateInterruptPriority+0x5c>
	}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	e000e3f0 	.word	0xe000e3f0
 80098f4:	200001e0 	.word	0x200001e0
 80098f8:	e000ed0c 	.word	0xe000ed0c
 80098fc:	200001e4 	.word	0x200001e4

08009900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	; 0x28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009908:	2300      	movs	r3, #0
 800990a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800990c:	f7fe ffea 	bl	80088e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009910:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <pvPortMalloc+0x170>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009918:	f000 f90c 	bl	8009b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800991c:	4b55      	ldr	r3, [pc, #340]	; (8009a74 <pvPortMalloc+0x174>)
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4013      	ands	r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	f040 808c 	bne.w	8009a42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01c      	beq.n	800996a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009930:	2208      	movs	r2, #8
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4413      	add	r3, r2
 8009936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	2b00      	cmp	r3, #0
 8009940:	d013      	beq.n	800996a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f023 0307 	bic.w	r3, r3, #7
 8009948:	3308      	adds	r3, #8
 800994a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <pvPortMalloc+0x6a>
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e7fe      	b.n	8009968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d068      	beq.n	8009a42 <pvPortMalloc+0x142>
 8009970:	4b41      	ldr	r3, [pc, #260]	; (8009a78 <pvPortMalloc+0x178>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	429a      	cmp	r2, r3
 8009978:	d863      	bhi.n	8009a42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800997a:	4b40      	ldr	r3, [pc, #256]	; (8009a7c <pvPortMalloc+0x17c>)
 800997c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800997e:	4b3f      	ldr	r3, [pc, #252]	; (8009a7c <pvPortMalloc+0x17c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009984:	e004      	b.n	8009990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d903      	bls.n	80099a2 <pvPortMalloc+0xa2>
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1f1      	bne.n	8009986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099a2:	4b33      	ldr	r3, [pc, #204]	; (8009a70 <pvPortMalloc+0x170>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d04a      	beq.n	8009a42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2208      	movs	r2, #8
 80099b2:	4413      	add	r3, r2
 80099b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	1ad2      	subs	r2, r2, r3
 80099c6:	2308      	movs	r3, #8
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d91e      	bls.n	8009a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4413      	add	r3, r2
 80099d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <pvPortMalloc+0xf4>
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	e7fe      	b.n	80099f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	1ad2      	subs	r2, r2, r3
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a06:	69b8      	ldr	r0, [r7, #24]
 8009a08:	f000 f8f6 	bl	8009bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <pvPortMalloc+0x178>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	4a18      	ldr	r2, [pc, #96]	; (8009a78 <pvPortMalloc+0x178>)
 8009a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a1a:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <pvPortMalloc+0x178>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b18      	ldr	r3, [pc, #96]	; (8009a80 <pvPortMalloc+0x180>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d203      	bcs.n	8009a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a26:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <pvPortMalloc+0x178>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <pvPortMalloc+0x180>)
 8009a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <pvPortMalloc+0x174>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a42:	f7fe ff5d 	bl	8008900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d009      	beq.n	8009a64 <pvPortMalloc+0x164>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e7fe      	b.n	8009a62 <pvPortMalloc+0x162>
	return pvReturn;
 8009a64:	69fb      	ldr	r3, [r7, #28]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3728      	adds	r7, #40	; 0x28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20003df0 	.word	0x20003df0
 8009a74:	20003dfc 	.word	0x20003dfc
 8009a78:	20003df4 	.word	0x20003df4
 8009a7c:	20003de8 	.word	0x20003de8
 8009a80:	20003df8 	.word	0x20003df8

08009a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d046      	beq.n	8009b24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a96:	2308      	movs	r3, #8
 8009a98:	425b      	negs	r3, r3
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <vPortFree+0xa8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4013      	ands	r3, r2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <vPortFree+0x42>
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e7fe      	b.n	8009ac4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <vPortFree+0x5e>
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	e7fe      	b.n	8009ae0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <vPortFree+0xa8>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4013      	ands	r3, r2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d019      	beq.n	8009b24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d115      	bne.n	8009b24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <vPortFree+0xa8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	43db      	mvns	r3, r3
 8009b02:	401a      	ands	r2, r3
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b08:	f7fe feec 	bl	80088e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <vPortFree+0xac>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4413      	add	r3, r2
 8009b16:	4a06      	ldr	r2, [pc, #24]	; (8009b30 <vPortFree+0xac>)
 8009b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b1a:	6938      	ldr	r0, [r7, #16]
 8009b1c:	f000 f86c 	bl	8009bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b20:	f7fe feee 	bl	8008900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b24:	bf00      	nop
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20003dfc 	.word	0x20003dfc
 8009b30:	20003df4 	.word	0x20003df4

08009b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b40:	4b27      	ldr	r3, [pc, #156]	; (8009be0 <prvHeapInit+0xac>)
 8009b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00c      	beq.n	8009b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0307 	bic.w	r3, r3, #7
 8009b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	4a1f      	ldr	r2, [pc, #124]	; (8009be0 <prvHeapInit+0xac>)
 8009b64:	4413      	add	r3, r2
 8009b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b6c:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <prvHeapInit+0xb0>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <prvHeapInit+0xb0>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b80:	2208      	movs	r2, #8
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0307 	bic.w	r3, r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <prvHeapInit+0xb4>)
 8009b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <prvHeapInit+0xb4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b9e:	4b12      	ldr	r3, [pc, #72]	; (8009be8 <prvHeapInit+0xb4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	1ad2      	subs	r2, r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb4:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <prvHeapInit+0xb4>)
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <prvHeapInit+0xb8>)
 8009bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	4a09      	ldr	r2, [pc, #36]	; (8009bf0 <prvHeapInit+0xbc>)
 8009bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <prvHeapInit+0xc0>)
 8009bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	200001e8 	.word	0x200001e8
 8009be4:	20003de8 	.word	0x20003de8
 8009be8:	20003df0 	.word	0x20003df0
 8009bec:	20003df8 	.word	0x20003df8
 8009bf0:	20003df4 	.word	0x20003df4
 8009bf4:	20003dfc 	.word	0x20003dfc

08009bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c00:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <prvInsertBlockIntoFreeList+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e002      	b.n	8009c0c <prvInsertBlockIntoFreeList+0x14>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d8f7      	bhi.n	8009c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	4413      	add	r3, r2
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d108      	bne.n	8009c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	441a      	add	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d118      	bne.n	8009c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d00d      	beq.n	8009c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	441a      	add	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e008      	b.n	8009c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c76:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e003      	b.n	8009c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d002      	beq.n	8009c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20003de8 	.word	0x20003de8
 8009ca8:	20003df0 	.word	0x20003df0

08009cac <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8009cb0:	bf00      	nop
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
	...

08009cbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	4a06      	ldr	r2, [pc, #24]	; (8009cec <vApplicationGetIdleTaskMemory+0x30>)
 8009cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2280      	movs	r2, #128	; 0x80
 8009cd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8009cda:	bf00      	nop
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	20003e00 	.word	0x20003e00
 8009cec:	20003e54 	.word	0x20003e54

08009cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009cf0:	b5b0      	push	{r4, r5, r7, lr}
 8009cf2:	b0aa      	sub	sp, #168	; 0xa8
 8009cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009cf6:	f7f6 fbeb 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009cfa:	f000 f8a5 	bl	8009e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009cfe:	f000 f9f7 	bl	800a0f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8009d02:	f000 f90b 	bl	8009f1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8009d06:	f000 f937 	bl	8009f78 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8009d0a:	f000 f96b 	bl	8009fe4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009d0e:	f000 f99b 	bl	800a048 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8009d12:	f000 f9c3 	bl	800a09c <MX_USART6_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of usart2_sem */
  osSemaphoreDef(usart2_sem);
 8009d16:	2300      	movs	r3, #0
 8009d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  usart2_semHandle = osSemaphoreCreate(osSemaphore(usart2_sem), 1);
 8009d22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009d26:	2101      	movs	r1, #1
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fd fba4 	bl	8007476 <osSemaphoreCreate>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	4b38      	ldr	r3, [pc, #224]	; (8009e14 <main+0x124>)
 8009d32:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usart3_MQ1 */
  osMessageQDef(usart3_MQ1, 8, uint8_t);
 8009d34:	4b38      	ldr	r3, [pc, #224]	; (8009e18 <main+0x128>)
 8009d36:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8009d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart3_MQ1Handle = osMessageCreate(osMessageQ(usart3_MQ1), NULL);
 8009d40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009d44:	2100      	movs	r1, #0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd fbc8 	bl	80074dc <osMessageCreate>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	4b33      	ldr	r3, [pc, #204]	; (8009e1c <main+0x12c>)
 8009d50:	601a      	str	r2, [r3, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8009d52:	4b33      	ldr	r3, [pc, #204]	; (8009e20 <main+0x130>)
 8009d54:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8009d58:	461d      	mov	r5, r3
 8009d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009d66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fd fb22 	bl	80073b6 <osThreadCreate>
 8009d72:	4602      	mov	r2, r0
 8009d74:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <main+0x134>)
 8009d76:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLED_Task */
  osThreadDef(myLED_Task, StartLED_Task, osPriorityLow, 0, 128);
 8009d78:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <main+0x138>)
 8009d7a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009d7e:	461d      	mov	r5, r3
 8009d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED_TaskHandle = osThreadCreate(osThread(myLED_Task), NULL);
 8009d8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fd fb0f 	bl	80073b6 <osThreadCreate>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	4b24      	ldr	r3, [pc, #144]	; (8009e2c <main+0x13c>)
 8009d9c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myButton_Task */
  osThreadDef(myButton_Task, StartButton_Task, osPriorityLow, 0, 128);
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <main+0x140>)
 8009da0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009da4:	461d      	mov	r5, r3
 8009da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButton_TaskHandle = osThreadCreate(osThread(myButton_Task), NULL);
 8009db2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009db6:	2100      	movs	r1, #0
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd fafc 	bl	80073b6 <osThreadCreate>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <main+0x144>)
 8009dc2:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart2_Rx_handle */
  osThreadDef(uart2_Rx_handle, Start_uart2_Rx_handle, osPriorityNormal, 0, 128);
 8009dc4:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <main+0x148>)
 8009dc6:	f107 0420 	add.w	r4, r7, #32
 8009dca:	461d      	mov	r5, r3
 8009dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2_Rx_handleHandle = osThreadCreate(osThread(uart2_Rx_handle), NULL);
 8009dd8:	f107 0320 	add.w	r3, r7, #32
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fd fae9 	bl	80073b6 <osThreadCreate>
 8009de4:	4602      	mov	r2, r0
 8009de6:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <main+0x14c>)
 8009de8:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart3_Rx_handle */
  osThreadDef(uart3_Rx_handle, Start_uart3_Rx_handle, osPriorityNormal, 0, 128);
 8009dea:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <main+0x150>)
 8009dec:	1d3c      	adds	r4, r7, #4
 8009dee:	461d      	mov	r5, r3
 8009df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Rx_handleHandle = osThreadCreate(osThread(uart3_Rx_handle), NULL);
 8009dfc:	1d3b      	adds	r3, r7, #4
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fd fad8 	bl	80073b6 <osThreadCreate>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <main+0x154>)
 8009e0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009e0c:	f7fd facc 	bl	80073a8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009e10:	e7fe      	b.n	8009e10 <main+0x120>
 8009e12:	bf00      	nop
 8009e14:	20004108 	.word	0x20004108
 8009e18:	0800b1ac 	.word	0x0800b1ac
 8009e1c:	2000406c 	.word	0x2000406c
 8009e20:	0800b1c8 	.word	0x0800b1c8
 8009e24:	20004068 	.word	0x20004068
 8009e28:	0800b1f0 	.word	0x0800b1f0
 8009e2c:	20004070 	.word	0x20004070
 8009e30:	0800b21c 	.word	0x0800b21c
 8009e34:	200041e8 	.word	0x200041e8
 8009e38:	0800b248 	.word	0x0800b248
 8009e3c:	200041ec 	.word	0x200041ec
 8009e40:	0800b274 	.word	0x0800b274
 8009e44:	200041a4 	.word	0x200041a4

08009e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b094      	sub	sp, #80	; 0x50
 8009e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e4e:	f107 0320 	add.w	r3, r7, #32
 8009e52:	2230      	movs	r2, #48	; 0x30
 8009e54:	2100      	movs	r1, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 f8b7 	bl	800afca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60bb      	str	r3, [r7, #8]
 8009e70:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <SystemClock_Config+0xcc>)
 8009e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e74:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <SystemClock_Config+0xcc>)
 8009e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8009e7c:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <SystemClock_Config+0xcc>)
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e84:	60bb      	str	r3, [r7, #8]
 8009e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e88:	2300      	movs	r3, #0
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <SystemClock_Config+0xd0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a21      	ldr	r2, [pc, #132]	; (8009f18 <SystemClock_Config+0xd0>)
 8009e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <SystemClock_Config+0xd0>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea0:	607b      	str	r3, [r7, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009eb8:	2308      	movs	r3, #8
 8009eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009ebc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8009ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009ec6:	2307      	movs	r3, #7
 8009ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009eca:	f107 0320 	add.w	r3, r7, #32
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7f8 fc5e 	bl	8002790 <HAL_RCC_OscConfig>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <SystemClock_Config+0x96>
  {
    Error_Handler();
 8009eda:	f000 fa6d 	bl	800a3b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009ede:	230f      	movs	r3, #15
 8009ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009ef6:	f107 030c 	add.w	r3, r7, #12
 8009efa:	2105      	movs	r1, #5
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7f8 feb7 	bl	8002c70 <HAL_RCC_ClockConfig>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8009f08:	f000 fa56 	bl	800a3b8 <Error_Handler>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	3750      	adds	r7, #80	; 0x50
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	40023800 	.word	0x40023800
 8009f18:	40007000 	.word	0x40007000

08009f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f22:	4a13      	ldr	r2, [pc, #76]	; (8009f70 <MX_I2C1_Init+0x54>)
 8009f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f28:	4a12      	ldr	r2, [pc, #72]	; (8009f74 <MX_I2C1_Init+0x58>)
 8009f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009f32:	4b0e      	ldr	r3, [pc, #56]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009f40:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009f58:	4804      	ldr	r0, [pc, #16]	; (8009f6c <MX_I2C1_Init+0x50>)
 8009f5a:	f7f8 fae1 	bl	8002520 <HAL_I2C_Init>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009f64:	f000 fa28 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009f68:	bf00      	nop
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	200040b4 	.word	0x200040b4
 8009f70:	40005400 	.word	0x40005400
 8009f74:	000186a0 	.word	0x000186a0

08009f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009f7c:	4b17      	ldr	r3, [pc, #92]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f7e:	4a18      	ldr	r2, [pc, #96]	; (8009fe0 <MX_SPI1_Init+0x68>)
 8009f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009f82:	4b16      	ldr	r3, [pc, #88]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009f90:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fbc:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009fc8:	4804      	ldr	r0, [pc, #16]	; (8009fdc <MX_SPI1_Init+0x64>)
 8009fca:	f7f9 f875 	bl	80030b8 <HAL_SPI_Init>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009fd4:	f000 f9f0 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009fd8:	bf00      	nop
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	2000414c 	.word	0x2000414c
 8009fe0:	40013000 	.word	0x40013000

08009fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009fe8:	4b15      	ldr	r3, [pc, #84]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <MX_USART2_UART_Init+0x60>)
 8009fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 8009ff0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009ff6:	4b12      	ldr	r3, [pc, #72]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ffc:	4b10      	ldr	r3, [pc, #64]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a004:	2200      	movs	r2, #0
 800a006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a008:	4b0d      	ldr	r3, [pc, #52]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a00a:	220c      	movs	r2, #12
 800a00c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a00e:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a010:	2200      	movs	r2, #0
 800a012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a014:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a016:	2200      	movs	r2, #0
 800a018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a01a:	4809      	ldr	r0, [pc, #36]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a01c:	f7f9 faee 	bl	80035fc <HAL_UART_Init>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a026:	f000 f9c7 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	4b03      	ldr	r3, [pc, #12]	; (800a040 <MX_USART2_UART_Init+0x5c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f042 0220 	orr.w	r2, r2, #32
 800a038:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 800a03a:	bf00      	nop
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200041a8 	.word	0x200041a8
 800a044:	40004400 	.word	0x40004400

0800a048 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a04c:	4b11      	ldr	r3, [pc, #68]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a04e:	4a12      	ldr	r2, [pc, #72]	; (800a098 <MX_USART3_UART_Init+0x50>)
 800a050:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800a052:	4b10      	ldr	r3, [pc, #64]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a058:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a062:	2200      	movs	r2, #0
 800a064:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a068:	2200      	movs	r2, #0
 800a06a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a06e:	220c      	movs	r2, #12
 800a070:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a074:	2200      	movs	r2, #0
 800a076:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a078:	4b06      	ldr	r3, [pc, #24]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a07e:	4805      	ldr	r0, [pc, #20]	; (800a094 <MX_USART3_UART_Init+0x4c>)
 800a080:	f7f9 fabc 	bl	80035fc <HAL_UART_Init>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a08a:	f000 f995 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a08e:	bf00      	nop
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20004074 	.word	0x20004074
 800a098:	40004800 	.word	0x40004800

0800a09c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a0a0:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0a2:	4a12      	ldr	r2, [pc, #72]	; (800a0ec <MX_USART6_UART_Init+0x50>)
 800a0a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800a0a6:	4b10      	ldr	r3, [pc, #64]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a0ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a0ae:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0c2:	220c      	movs	r2, #12
 800a0c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0c6:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <MX_USART6_UART_Init+0x4c>)
 800a0d4:	f7f9 fa92 	bl	80035fc <HAL_UART_Init>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a0de:	f000 f96b 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a0e2:	bf00      	nop
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000410c 	.word	0x2000410c
 800a0ec:	40011400 	.word	0x40011400

0800a0f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08c      	sub	sp, #48	; 0x30
 800a0f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0f6:	f107 031c 	add.w	r3, r7, #28
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	605a      	str	r2, [r3, #4]
 800a100:	609a      	str	r2, [r3, #8]
 800a102:	60da      	str	r2, [r3, #12]
 800a104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a106:	2300      	movs	r3, #0
 800a108:	61bb      	str	r3, [r7, #24]
 800a10a:	4b7d      	ldr	r3, [pc, #500]	; (800a300 <MX_GPIO_Init+0x210>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	4a7c      	ldr	r2, [pc, #496]	; (800a300 <MX_GPIO_Init+0x210>)
 800a110:	f043 0310 	orr.w	r3, r3, #16
 800a114:	6313      	str	r3, [r2, #48]	; 0x30
 800a116:	4b7a      	ldr	r3, [pc, #488]	; (800a300 <MX_GPIO_Init+0x210>)
 800a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11a:	f003 0310 	and.w	r3, r3, #16
 800a11e:	61bb      	str	r3, [r7, #24]
 800a120:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	4b76      	ldr	r3, [pc, #472]	; (800a300 <MX_GPIO_Init+0x210>)
 800a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12a:	4a75      	ldr	r2, [pc, #468]	; (800a300 <MX_GPIO_Init+0x210>)
 800a12c:	f043 0304 	orr.w	r3, r3, #4
 800a130:	6313      	str	r3, [r2, #48]	; 0x30
 800a132:	4b73      	ldr	r3, [pc, #460]	; (800a300 <MX_GPIO_Init+0x210>)
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	f003 0304 	and.w	r3, r3, #4
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a13e:	2300      	movs	r3, #0
 800a140:	613b      	str	r3, [r7, #16]
 800a142:	4b6f      	ldr	r3, [pc, #444]	; (800a300 <MX_GPIO_Init+0x210>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	4a6e      	ldr	r2, [pc, #440]	; (800a300 <MX_GPIO_Init+0x210>)
 800a148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14c:	6313      	str	r3, [r2, #48]	; 0x30
 800a14e:	4b6c      	ldr	r3, [pc, #432]	; (800a300 <MX_GPIO_Init+0x210>)
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]
 800a15e:	4b68      	ldr	r3, [pc, #416]	; (800a300 <MX_GPIO_Init+0x210>)
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	4a67      	ldr	r2, [pc, #412]	; (800a300 <MX_GPIO_Init+0x210>)
 800a164:	f043 0301 	orr.w	r3, r3, #1
 800a168:	6313      	str	r3, [r2, #48]	; 0x30
 800a16a:	4b65      	ldr	r3, [pc, #404]	; (800a300 <MX_GPIO_Init+0x210>)
 800a16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]
 800a17a:	4b61      	ldr	r3, [pc, #388]	; (800a300 <MX_GPIO_Init+0x210>)
 800a17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17e:	4a60      	ldr	r2, [pc, #384]	; (800a300 <MX_GPIO_Init+0x210>)
 800a180:	f043 0302 	orr.w	r3, r3, #2
 800a184:	6313      	str	r3, [r2, #48]	; 0x30
 800a186:	4b5e      	ldr	r3, [pc, #376]	; (800a300 <MX_GPIO_Init+0x210>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	60bb      	str	r3, [r7, #8]
 800a190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a192:	2300      	movs	r3, #0
 800a194:	607b      	str	r3, [r7, #4]
 800a196:	4b5a      	ldr	r3, [pc, #360]	; (800a300 <MX_GPIO_Init+0x210>)
 800a198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19a:	4a59      	ldr	r2, [pc, #356]	; (800a300 <MX_GPIO_Init+0x210>)
 800a19c:	f043 0308 	orr.w	r3, r3, #8
 800a1a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1a2:	4b57      	ldr	r3, [pc, #348]	; (800a300 <MX_GPIO_Init+0x210>)
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|USART3_RT_Pin, GPIO_PIN_RESET);
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f242 0108 	movw	r1, #8200	; 0x2008
 800a1b4:	4853      	ldr	r0, [pc, #332]	; (800a304 <MX_GPIO_Init+0x214>)
 800a1b6:	f7f6 fc8d 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4852      	ldr	r0, [pc, #328]	; (800a308 <MX_GPIO_Init+0x218>)
 800a1c0:	f7f6 fc88 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f24f 0110 	movw	r1, #61456	; 0xf010
 800a1ca:	4850      	ldr	r0, [pc, #320]	; (800a30c <MX_GPIO_Init+0x21c>)
 800a1cc:	f7f6 fc82 	bl	8000ad4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_RT_GPIO_Port, USART6_RT_Pin, GPIO_PIN_RESET);
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1d6:	484c      	ldr	r0, [pc, #304]	; (800a308 <MX_GPIO_Init+0x218>)
 800a1d8:	f7f6 fc7c 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin USART3_RT_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|USART3_RT_Pin;
 800a1dc:	f242 0308 	movw	r3, #8200	; 0x2008
 800a1e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a1ee:	f107 031c 	add.w	r3, r7, #28
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4843      	ldr	r0, [pc, #268]	; (800a304 <MX_GPIO_Init+0x214>)
 800a1f6:	f7f6 fad3 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin USART6_RT_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|USART6_RT_Pin;
 800a1fa:	f240 1301 	movw	r3, #257	; 0x101
 800a1fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a200:	2301      	movs	r3, #1
 800a202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a204:	2300      	movs	r3, #0
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a208:	2300      	movs	r3, #0
 800a20a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a20c:	f107 031c 	add.w	r3, r7, #28
 800a210:	4619      	mov	r1, r3
 800a212:	483d      	ldr	r0, [pc, #244]	; (800a308 <MX_GPIO_Init+0x218>)
 800a214:	f7f6 fac4 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a218:	2308      	movs	r3, #8
 800a21a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a21c:	2302      	movs	r3, #2
 800a21e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a220:	2300      	movs	r3, #0
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a224:	2300      	movs	r3, #0
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a228:	2305      	movs	r3, #5
 800a22a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a22c:	f107 031c 	add.w	r3, r7, #28
 800a230:	4619      	mov	r1, r3
 800a232:	4835      	ldr	r0, [pc, #212]	; (800a308 <MX_GPIO_Init+0x218>)
 800a234:	f7f6 fab4 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a238:	2301      	movs	r3, #1
 800a23a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a23c:	4b34      	ldr	r3, [pc, #208]	; (800a310 <MX_GPIO_Init+0x220>)
 800a23e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a240:	2300      	movs	r3, #0
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a244:	f107 031c 	add.w	r3, r7, #28
 800a248:	4619      	mov	r1, r3
 800a24a:	4832      	ldr	r0, [pc, #200]	; (800a314 <MX_GPIO_Init+0x224>)
 800a24c:	f7f6 faa8 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a250:	2310      	movs	r3, #16
 800a252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a254:	2302      	movs	r3, #2
 800a256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a258:	2300      	movs	r3, #0
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a25c:	2300      	movs	r3, #0
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a260:	2306      	movs	r3, #6
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a264:	f107 031c 	add.w	r3, r7, #28
 800a268:	4619      	mov	r1, r3
 800a26a:	482a      	ldr	r0, [pc, #168]	; (800a314 <MX_GPIO_Init+0x224>)
 800a26c:	f7f6 fa98 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a270:	2304      	movs	r3, #4
 800a272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a274:	2300      	movs	r3, #0
 800a276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a27c:	f107 031c 	add.w	r3, r7, #28
 800a280:	4619      	mov	r1, r3
 800a282:	4825      	ldr	r0, [pc, #148]	; (800a318 <MX_GPIO_Init+0x228>)
 800a284:	f7f6 fa8c 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a288:	f24f 0310 	movw	r3, #61456	; 0xf010
 800a28c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a28e:	2301      	movs	r3, #1
 800a290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a296:	2300      	movs	r3, #0
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a29a:	f107 031c 	add.w	r3, r7, #28
 800a29e:	4619      	mov	r1, r3
 800a2a0:	481a      	ldr	r0, [pc, #104]	; (800a30c <MX_GPIO_Init+0x21c>)
 800a2a2:	f7f6 fa7d 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800a2a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a2aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a2b8:	2306      	movs	r3, #6
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2bc:	f107 031c 	add.w	r3, r7, #28
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4811      	ldr	r0, [pc, #68]	; (800a308 <MX_GPIO_Init+0x218>)
 800a2c4:	f7f6 fa6c 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a2d4:	f107 031c 	add.w	r3, r7, #28
 800a2d8:	4619      	mov	r1, r3
 800a2da:	480c      	ldr	r0, [pc, #48]	; (800a30c <MX_GPIO_Init+0x21c>)
 800a2dc:	f7f6 fa60 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <MX_GPIO_Init+0x220>)
 800a2e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a2ec:	f107 031c 	add.w	r3, r7, #28
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4804      	ldr	r0, [pc, #16]	; (800a304 <MX_GPIO_Init+0x214>)
 800a2f4:	f7f6 fa54 	bl	80007a0 <HAL_GPIO_Init>

}
 800a2f8:	bf00      	nop
 800a2fa:	3730      	adds	r7, #48	; 0x30
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40023800 	.word	0x40023800
 800a304:	40021000 	.word	0x40021000
 800a308:	40020800 	.word	0x40020800
 800a30c:	40020c00 	.word	0x40020c00
 800a310:	10120000 	.word	0x10120000
 800a314:	40020000 	.word	0x40020000
 800a318:	40020400 	.word	0x40020400

0800a31c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a324:	f000 fae0 	bl	800a8e8 <MX_USB_HOST_Init>
#ifdef SOFTWARE_DEBUG
	  osDelay(2000);
	  freemem = xPortGetFreeHeapSize();
	  vTaskList (pcWriteBuffer);
#endif
    osDelay(1);
 800a328:	2001      	movs	r0, #1
 800a32a:	f7fd f890 	bl	800744e <osDelay>
 800a32e:	e7fb      	b.n	800a328 <StartDefaultTask+0xc>

0800a330 <StartLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Task */
void StartLED_Task(void const * argument)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a338:	2001      	movs	r0, #1
 800a33a:	f7fd f888 	bl	800744e <osDelay>
 800a33e:	e7fb      	b.n	800a338 <StartLED_Task+0x8>

0800a340 <StartButton_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton_Task */
void StartButton_Task(void const * argument)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_Task */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800a348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a34c:	4803      	ldr	r0, [pc, #12]	; (800a35c <StartButton_Task+0x1c>)
 800a34e:	f7f6 fbda 	bl	8000b06 <HAL_GPIO_TogglePin>
	  osDelay(150);
 800a352:	2096      	movs	r0, #150	; 0x96
 800a354:	f7fd f87b 	bl	800744e <osDelay>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800a358:	e7f6      	b.n	800a348 <StartButton_Task+0x8>
 800a35a:	bf00      	nop
 800a35c:	40020c00 	.word	0x40020c00

0800a360 <Start_uart2_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart2_Rx_handle */
void Start_uart2_Rx_handle(void const * argument)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart2_Rx_handle */

  /* Infinite loop */
  for(;;)
  {
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800a368:	4b08      	ldr	r3, [pc, #32]	; (800a38c <Start_uart2_Rx_handle+0x2c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f04f 31ff 	mov.w	r1, #4294967295
 800a370:	4618      	mov	r0, r3
 800a372:	f7fd fde9 	bl	8007f48 <xQueueSemaphoreTake>
 800a376:	4603      	mov	r3, r0
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d1f5      	bne.n	800a368 <Start_uart2_Rx_handle+0x8>
	  {
		  xSemaphoreTake(usart2_semHandle, portMAX_DELAY);
 800a37c:	4b03      	ldr	r3, [pc, #12]	; (800a38c <Start_uart2_Rx_handle+0x2c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f04f 31ff 	mov.w	r1, #4294967295
 800a384:	4618      	mov	r0, r3
 800a386:	f7fd fddf 	bl	8007f48 <xQueueSemaphoreTake>
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800a38a:	e7ed      	b.n	800a368 <Start_uart2_Rx_handle+0x8>
 800a38c:	20004108 	.word	0x20004108

0800a390 <Start_uart3_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart3_Rx_handle */
void Start_uart3_Rx_handle(void const * argument)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart3_Rx_handle */
  /* Infinite loop */
	for(;;)
 800a398:	e7fe      	b.n	800a398 <Start_uart3_Rx_handle+0x8>

0800a39a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3aa:	d101      	bne.n	800a3b0 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a3ac:	f7f6 f8b2 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a3bc:	bf00      	nop
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
	...

0800a3c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
 800a3d2:	4b12      	ldr	r3, [pc, #72]	; (800a41c <HAL_MspInit+0x54>)
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	4a11      	ldr	r2, [pc, #68]	; (800a41c <HAL_MspInit+0x54>)
 800a3d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a3de:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <HAL_MspInit+0x54>)
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e6:	607b      	str	r3, [r7, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	603b      	str	r3, [r7, #0]
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_MspInit+0x54>)
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_MspInit+0x54>)
 800a3f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3fa:	4b08      	ldr	r3, [pc, #32]	; (800a41c <HAL_MspInit+0x54>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a406:	2200      	movs	r2, #0
 800a408:	210f      	movs	r1, #15
 800a40a:	f06f 0001 	mvn.w	r0, #1
 800a40e:	f7f6 f97b 	bl	8000708 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40023800 	.word	0x40023800

0800a420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08a      	sub	sp, #40	; 0x28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a19      	ldr	r2, [pc, #100]	; (800a4a4 <HAL_I2C_MspInit+0x84>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d12c      	bne.n	800a49c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a442:	2300      	movs	r3, #0
 800a444:	613b      	str	r3, [r7, #16]
 800a446:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	4a17      	ldr	r2, [pc, #92]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a44c:	f043 0302 	orr.w	r3, r3, #2
 800a450:	6313      	str	r3, [r2, #48]	; 0x30
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800a45e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a464:	2312      	movs	r3, #18
 800a466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a468:	2301      	movs	r3, #1
 800a46a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a46c:	2300      	movs	r3, #0
 800a46e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a470:	2304      	movs	r3, #4
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	4619      	mov	r1, r3
 800a47a:	480c      	ldr	r0, [pc, #48]	; (800a4ac <HAL_I2C_MspInit+0x8c>)
 800a47c:	f7f6 f990 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	4a07      	ldr	r2, [pc, #28]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a48a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a48e:	6413      	str	r3, [r2, #64]	; 0x40
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <HAL_I2C_MspInit+0x88>)
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a49c:	bf00      	nop
 800a49e:	3728      	adds	r7, #40	; 0x28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	40005400 	.word	0x40005400
 800a4a8:	40023800 	.word	0x40023800
 800a4ac:	40020400 	.word	0x40020400

0800a4b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	; 0x28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4b8:	f107 0314 	add.w	r3, r7, #20
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	605a      	str	r2, [r3, #4]
 800a4c2:	609a      	str	r2, [r3, #8]
 800a4c4:	60da      	str	r2, [r3, #12]
 800a4c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a19      	ldr	r2, [pc, #100]	; (800a534 <HAL_SPI_MspInit+0x84>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d12b      	bne.n	800a52a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	613b      	str	r3, [r7, #16]
 800a4d6:	4b18      	ldr	r3, [pc, #96]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	4a17      	ldr	r2, [pc, #92]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a4dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4ea:	613b      	str	r3, [r7, #16]
 800a4ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	4b11      	ldr	r3, [pc, #68]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	4a10      	ldr	r2, [pc, #64]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a4fe:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <HAL_SPI_MspInit+0x88>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a50a:	23e0      	movs	r3, #224	; 0xe0
 800a50c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a50e:	2302      	movs	r3, #2
 800a510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a512:	2300      	movs	r3, #0
 800a514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a516:	2300      	movs	r3, #0
 800a518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a51a:	2305      	movs	r3, #5
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	4619      	mov	r1, r3
 800a524:	4805      	ldr	r0, [pc, #20]	; (800a53c <HAL_SPI_MspInit+0x8c>)
 800a526:	f7f6 f93b 	bl	80007a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a52a:	bf00      	nop
 800a52c:	3728      	adds	r7, #40	; 0x28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	40013000 	.word	0x40013000
 800a538:	40023800 	.word	0x40023800
 800a53c:	40020000 	.word	0x40020000

0800a540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08e      	sub	sp, #56	; 0x38
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	605a      	str	r2, [r3, #4]
 800a552:	609a      	str	r2, [r3, #8]
 800a554:	60da      	str	r2, [r3, #12]
 800a556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a57      	ldr	r2, [pc, #348]	; (800a6bc <HAL_UART_MspInit+0x17c>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d134      	bne.n	800a5cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a562:	2300      	movs	r3, #0
 800a564:	623b      	str	r3, [r7, #32]
 800a566:	4b56      	ldr	r3, [pc, #344]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	4a55      	ldr	r2, [pc, #340]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a570:	6413      	str	r3, [r2, #64]	; 0x40
 800a572:	4b53      	ldr	r3, [pc, #332]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57a:	623b      	str	r3, [r7, #32]
 800a57c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
 800a582:	4b4f      	ldr	r3, [pc, #316]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	4a4e      	ldr	r2, [pc, #312]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	6313      	str	r3, [r2, #48]	; 0x30
 800a58e:	4b4c      	ldr	r3, [pc, #304]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a59a:	230c      	movs	r3, #12
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a5aa:	2307      	movs	r3, #7
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4843      	ldr	r0, [pc, #268]	; (800a6c4 <HAL_UART_MspInit+0x184>)
 800a5b6:	f7f6 f8f3 	bl	80007a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2105      	movs	r1, #5
 800a5be:	2026      	movs	r0, #38	; 0x26
 800a5c0:	f7f6 f8a2 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a5c4:	2026      	movs	r0, #38	; 0x26
 800a5c6:	f7f6 f8bb 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a5ca:	e073      	b.n	800a6b4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a3d      	ldr	r2, [pc, #244]	; (800a6c8 <HAL_UART_MspInit+0x188>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d135      	bne.n	800a642 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	61bb      	str	r3, [r7, #24]
 800a5da:	4b39      	ldr	r3, [pc, #228]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5de:	4a38      	ldr	r2, [pc, #224]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a5e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5e6:	4b36      	ldr	r3, [pc, #216]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	4b32      	ldr	r3, [pc, #200]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fa:	4a31      	ldr	r2, [pc, #196]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a5fc:	f043 0302 	orr.w	r3, r3, #2
 800a600:	6313      	str	r3, [r2, #48]	; 0x30
 800a602:	4b2f      	ldr	r3, [pc, #188]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a60e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a614:	2302      	movs	r3, #2
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a618:	2300      	movs	r3, #0
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a61c:	2303      	movs	r3, #3
 800a61e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a620:	2307      	movs	r3, #7
 800a622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a628:	4619      	mov	r1, r3
 800a62a:	4828      	ldr	r0, [pc, #160]	; (800a6cc <HAL_UART_MspInit+0x18c>)
 800a62c:	f7f6 f8b8 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a630:	2200      	movs	r2, #0
 800a632:	2105      	movs	r1, #5
 800a634:	2027      	movs	r0, #39	; 0x27
 800a636:	f7f6 f867 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a63a:	2027      	movs	r0, #39	; 0x27
 800a63c:	f7f6 f880 	bl	8000740 <HAL_NVIC_EnableIRQ>
}
 800a640:	e038      	b.n	800a6b4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a22      	ldr	r2, [pc, #136]	; (800a6d0 <HAL_UART_MspInit+0x190>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d133      	bne.n	800a6b4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a64c:	2300      	movs	r3, #0
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	4b1b      	ldr	r3, [pc, #108]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a654:	4a1a      	ldr	r2, [pc, #104]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a656:	f043 0320 	orr.w	r3, r3, #32
 800a65a:	6453      	str	r3, [r2, #68]	; 0x44
 800a65c:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a672:	f043 0304 	orr.w	r3, r3, #4
 800a676:	6313      	str	r3, [r2, #48]	; 0x30
 800a678:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <HAL_UART_MspInit+0x180>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a684:	23c0      	movs	r3, #192	; 0xc0
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a688:	2302      	movs	r3, #2
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a690:	2303      	movs	r3, #3
 800a692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a694:	2308      	movs	r3, #8
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a69c:	4619      	mov	r1, r3
 800a69e:	480d      	ldr	r0, [pc, #52]	; (800a6d4 <HAL_UART_MspInit+0x194>)
 800a6a0:	f7f6 f87e 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2105      	movs	r1, #5
 800a6a8:	2047      	movs	r0, #71	; 0x47
 800a6aa:	f7f6 f82d 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a6ae:	2047      	movs	r0, #71	; 0x47
 800a6b0:	f7f6 f846 	bl	8000740 <HAL_NVIC_EnableIRQ>
}
 800a6b4:	bf00      	nop
 800a6b6:	3738      	adds	r7, #56	; 0x38
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	40004400 	.word	0x40004400
 800a6c0:	40023800 	.word	0x40023800
 800a6c4:	40020000 	.word	0x40020000
 800a6c8:	40004800 	.word	0x40004800
 800a6cc:	40020400 	.word	0x40020400
 800a6d0:	40011400 	.word	0x40011400
 800a6d4:	40020800 	.word	0x40020800

0800a6d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08c      	sub	sp, #48	; 0x30
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	201c      	movs	r0, #28
 800a6ee:	f7f6 f80b 	bl	8000708 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800a6f2:	201c      	movs	r0, #28
 800a6f4:	f7f6 f824 	bl	8000740 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	4b20      	ldr	r3, [pc, #128]	; (800a780 <HAL_InitTick+0xa8>)
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a700:	4a1f      	ldr	r2, [pc, #124]	; (800a780 <HAL_InitTick+0xa8>)
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	6413      	str	r3, [r2, #64]	; 0x40
 800a708:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <HAL_InitTick+0xa8>)
 800a70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a714:	f107 0210 	add.w	r2, r7, #16
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7f8 fc98 	bl	8003054 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a724:	f7f8 fc6e 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800a728:	4603      	mov	r3, r0
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	4a14      	ldr	r2, [pc, #80]	; (800a784 <HAL_InitTick+0xac>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	0c9b      	lsrs	r3, r3, #18
 800a738:	3b01      	subs	r3, #1
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <HAL_InitTick+0xb0>)
 800a73e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800a744:	4b10      	ldr	r3, [pc, #64]	; (800a788 <HAL_InitTick+0xb0>)
 800a746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a74a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800a74c:	4a0e      	ldr	r2, [pc, #56]	; (800a788 <HAL_InitTick+0xb0>)
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <HAL_InitTick+0xb0>)
 800a754:	2200      	movs	r2, #0
 800a756:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a758:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <HAL_InitTick+0xb0>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800a75e:	480a      	ldr	r0, [pc, #40]	; (800a788 <HAL_InitTick+0xb0>)
 800a760:	f7f8 fd0e 	bl	8003180 <HAL_TIM_Base_Init>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800a76a:	4807      	ldr	r0, [pc, #28]	; (800a788 <HAL_InitTick+0xb0>)
 800a76c:	f7f8 fd3d 	bl	80031ea <HAL_TIM_Base_Start_IT>
 800a770:	4603      	mov	r3, r0
 800a772:	e000      	b.n	800a776 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
}
 800a776:	4618      	mov	r0, r3
 800a778:	3730      	adds	r7, #48	; 0x30
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	40023800 	.word	0x40023800
 800a784:	431bde83 	.word	0x431bde83
 800a788:	200041f0 	.word	0x200041f0

0800a78c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a790:	bf00      	nop
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a79a:	b480      	push	{r7}
 800a79c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a79e:	e7fe      	b.n	800a79e <HardFault_Handler+0x4>

0800a7a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a7a4:	e7fe      	b.n	800a7a4 <MemManage_Handler+0x4>

0800a7a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7aa:	e7fe      	b.n	800a7aa <BusFault_Handler+0x4>

0800a7ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7b0:	e7fe      	b.n	800a7b0 <UsageFault_Handler+0x4>

0800a7b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a7c4:	4802      	ldr	r0, [pc, #8]	; (800a7d0 <TIM2_IRQHandler+0x10>)
 800a7c6:	f7f8 fd34 	bl	8003232 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a7ca:	bf00      	nop
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200041f0 	.word	0x200041f0

0800a7d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
////	static portBASE_TYPE xHigherPriorityTaskWoken;
////	xHigherPriorityTaskWoken = pdFALSE;
////
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a7d8:	4802      	ldr	r0, [pc, #8]	; (800a7e4 <USART2_IRQHandler+0x10>)
 800a7da:	f7f8 ff5d 	bl	8003698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//
  /* USER CODE END USART2_IRQn 1 */
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200041a8 	.word	0x200041a8

0800a7e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a7ec:	4802      	ldr	r0, [pc, #8]	; (800a7f8 <USART3_IRQHandler+0x10>)
 800a7ee:	f7f8 ff53 	bl	8003698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
//
  /* USER CODE END USART3_IRQn 1 */
}
 800a7f2:	bf00      	nop
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004074 	.word	0x20004074

0800a7fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800a800:	4802      	ldr	r0, [pc, #8]	; (800a80c <OTG_FS_IRQHandler+0x10>)
 800a802:	f7f6 fc2b 	bl	800105c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a806:	bf00      	nop
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20004614 	.word	0x20004614

0800a810 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a814:	4802      	ldr	r0, [pc, #8]	; (800a820 <USART6_IRQHandler+0x10>)
 800a816:	f7f8 ff3f 	bl	8003698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800a81a:	bf00      	nop
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	2000410c 	.word	0x2000410c

0800a824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <_sbrk+0x50>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <_sbrk+0x16>
		heap_end = &end;
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <_sbrk+0x50>)
 800a836:	4a10      	ldr	r2, [pc, #64]	; (800a878 <_sbrk+0x54>)
 800a838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a83a:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <_sbrk+0x50>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <_sbrk+0x50>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4413      	add	r3, r2
 800a848:	466a      	mov	r2, sp
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d907      	bls.n	800a85e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a84e:	f000 fb77 	bl	800af40 <__errno>
 800a852:	4602      	mov	r2, r0
 800a854:	230c      	movs	r3, #12
 800a856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295
 800a85c:	e006      	b.n	800a86c <_sbrk+0x48>
	}

	heap_end += incr;
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <_sbrk+0x50>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	4a03      	ldr	r2, [pc, #12]	; (800a874 <_sbrk+0x50>)
 800a868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a86a:	68fb      	ldr	r3, [r7, #12]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20004054 	.word	0x20004054
 800a878:	200048e0 	.word	0x200048e0

0800a87c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a880:	4b16      	ldr	r3, [pc, #88]	; (800a8dc <SystemInit+0x60>)
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	4a15      	ldr	r2, [pc, #84]	; (800a8dc <SystemInit+0x60>)
 800a888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a88c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <SystemInit+0x64>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a12      	ldr	r2, [pc, #72]	; (800a8e0 <SystemInit+0x64>)
 800a896:	f043 0301 	orr.w	r3, r3, #1
 800a89a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a89c:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <SystemInit+0x64>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a8a2:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <SystemInit+0x64>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a0e      	ldr	r2, [pc, #56]	; (800a8e0 <SystemInit+0x64>)
 800a8a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <SystemInit+0x64>)
 800a8b4:	4a0b      	ldr	r2, [pc, #44]	; (800a8e4 <SystemInit+0x68>)
 800a8b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a8b8:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <SystemInit+0x64>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <SystemInit+0x64>)
 800a8be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <SystemInit+0x64>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a8ca:	4b04      	ldr	r3, [pc, #16]	; (800a8dc <SystemInit+0x60>)
 800a8cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8d0:	609a      	str	r2, [r3, #8]
#endif
}
 800a8d2:	bf00      	nop
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	e000ed00 	.word	0xe000ed00
 800a8e0:	40023800 	.word	0x40023800
 800a8e4:	24003010 	.word	0x24003010

0800a8e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	490e      	ldr	r1, [pc, #56]	; (800a928 <MX_USB_HOST_Init+0x40>)
 800a8f0:	480e      	ldr	r0, [pc, #56]	; (800a92c <MX_USB_HOST_Init+0x44>)
 800a8f2:	f7fa ffa1 	bl	8005838 <USBH_Init>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a8fc:	f7ff fd5c 	bl	800a3b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a900:	490b      	ldr	r1, [pc, #44]	; (800a930 <MX_USB_HOST_Init+0x48>)
 800a902:	480a      	ldr	r0, [pc, #40]	; (800a92c <MX_USB_HOST_Init+0x44>)
 800a904:	f7fb f84e 	bl	80059a4 <USBH_RegisterClass>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a90e:	f7ff fd53 	bl	800a3b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a912:	4806      	ldr	r0, [pc, #24]	; (800a92c <MX_USB_HOST_Init+0x44>)
 800a914:	f7fb f8d2 	bl	8005abc <USBH_Start>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a91e:	f7ff fd4b 	bl	800a3b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a922:	bf00      	nop
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	0800a935 	.word	0x0800a935
 800a92c:	20004230 	.word	0x20004230
 800a930:	20000008 	.word	0x20000008

0800a934 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	3b01      	subs	r3, #1
 800a944:	2b04      	cmp	r3, #4
 800a946:	d819      	bhi.n	800a97c <USBH_UserProcess+0x48>
 800a948:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USBH_UserProcess+0x1c>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a97d 	.word	0x0800a97d
 800a954:	0800a96d 	.word	0x0800a96d
 800a958:	0800a97d 	.word	0x0800a97d
 800a95c:	0800a975 	.word	0x0800a975
 800a960:	0800a965 	.word	0x0800a965
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a964:	4b09      	ldr	r3, [pc, #36]	; (800a98c <USBH_UserProcess+0x58>)
 800a966:	2203      	movs	r2, #3
 800a968:	701a      	strb	r2, [r3, #0]
  break;
 800a96a:	e008      	b.n	800a97e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a96c:	4b07      	ldr	r3, [pc, #28]	; (800a98c <USBH_UserProcess+0x58>)
 800a96e:	2202      	movs	r2, #2
 800a970:	701a      	strb	r2, [r3, #0]
  break;
 800a972:	e004      	b.n	800a97e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <USBH_UserProcess+0x58>)
 800a976:	2201      	movs	r2, #1
 800a978:	701a      	strb	r2, [r3, #0]
  break;
 800a97a:	e000      	b.n	800a97e <USBH_UserProcess+0x4a>

  default:
  break;
 800a97c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	20004058 	.word	0x20004058

0800a990 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	; 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9b0:	d147      	bne.n	800aa42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ba:	4a24      	ldr	r2, [pc, #144]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a9c2:	4b22      	ldr	r3, [pc, #136]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	613b      	str	r3, [r7, #16]
 800a9cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a9ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a9dc:	f107 0314 	add.w	r3, r7, #20
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	481b      	ldr	r0, [pc, #108]	; (800aa50 <HAL_HCD_MspInit+0xc0>)
 800a9e4:	f7f5 fedc 	bl	80007a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a9e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a9ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9fa:	230a      	movs	r3, #10
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9fe:	f107 0314 	add.w	r3, r7, #20
 800aa02:	4619      	mov	r1, r3
 800aa04:	4812      	ldr	r0, [pc, #72]	; (800aa50 <HAL_HCD_MspInit+0xc0>)
 800aa06:	f7f5 fecb 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	4a0f      	ldr	r2, [pc, #60]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800aa10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa14:	6353      	str	r3, [r2, #52]	; 0x34
 800aa16:	2300      	movs	r3, #0
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	4a0b      	ldr	r2, [pc, #44]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800aa20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa24:	6453      	str	r3, [r2, #68]	; 0x44
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <HAL_HCD_MspInit+0xbc>)
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa32:	2200      	movs	r2, #0
 800aa34:	2105      	movs	r1, #5
 800aa36:	2043      	movs	r0, #67	; 0x43
 800aa38:	f7f5 fe66 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa3c:	2043      	movs	r0, #67	; 0x43
 800aa3e:	f7f5 fe7f 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa42:	bf00      	nop
 800aa44:	3728      	adds	r7, #40	; 0x28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40023800 	.word	0x40023800
 800aa50:	40020000 	.word	0x40020000

0800aa54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fb fcd7 	bl	8006416 <USBH_LL_IncTimer>
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fb fd1b 	bl	80064ba <USBH_LL_Connect>
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fb fd30 	bl	8006500 <USBH_LL_Disconnect>
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
 800aab4:	4613      	mov	r3, r2
 800aab6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fb fd65 	bl	800658e <USBH_LL_NotifyURBChange>
#endif
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fb fcc5 	bl	800646a <USBH_LL_PortEnabled>
} 
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fb fcd1 	bl	800649e <USBH_LL_PortDisabled>
} 
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d12a      	bne.n	800ab6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ab16:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab22:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ab2e:	4b12      	ldr	r3, [pc, #72]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab30:	2208      	movs	r2, #8
 800ab32:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ab34:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab42:	2202      	movs	r2, #2
 800ab44:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab46:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab4c:	480a      	ldr	r0, [pc, #40]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab4e:	f7f5 fff5 	bl	8000b3c <HAL_HCD_Init>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab58:	f7ff fc2e 	bl	800a3b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab5c:	4806      	ldr	r0, [pc, #24]	; (800ab78 <USBH_LL_Init+0x74>)
 800ab5e:	f7f6 fbf9 	bl	8001354 <HAL_HCD_GetCurrentFrame>
 800ab62:	4603      	mov	r3, r0
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fb fc46 	bl	80063f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20004614 	.word	0x20004614

0800ab7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f6 fb66 	bl	8001264 <HAL_HCD_Start>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f95c 	bl	800ae5c <USBH_Get_USB_Status>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f6 fb6e 	bl	80012aa <HAL_HCD_Stop>
 800abce:	4603      	mov	r3, r0
 800abd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 f941 	bl	800ae5c <USBH_Get_USB_Status>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800abde:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800abf0:	2301      	movs	r3, #1
 800abf2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f6 fbb8 	bl	8001370 <HAL_HCD_GetCurrentSpeed>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d007      	beq.n	800ac16 <USBH_LL_GetSpeed+0x2e>
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d302      	bcc.n	800ac10 <USBH_LL_GetSpeed+0x28>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d006      	beq.n	800ac1c <USBH_LL_GetSpeed+0x34>
 800ac0e:	e008      	b.n	800ac22 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	e008      	b.n	800ac28 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ac16:	2301      	movs	r3, #1
 800ac18:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1a:	e005      	b.n	800ac28 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac20:	e002      	b.n	800ac28 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ac22:	2301      	movs	r3, #1
 800ac24:	73fb      	strb	r3, [r7, #15]
    break;
 800ac26:	bf00      	nop
  }
  return  speed;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f6 fb4b 	bl	80012e4 <HAL_HCD_ResetPort>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f901 	bl	800ae5c <USBH_Get_USB_Status>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f6 fb53 	bl	800132a <HAL_HCD_HC_GetXferCount>
 800ac84:	4603      	mov	r3, r0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac8e:	b590      	push	{r4, r7, lr}
 800ac90:	b089      	sub	sp, #36	; 0x24
 800ac92:	af04      	add	r7, sp, #16
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	70fb      	strb	r3, [r7, #3]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70bb      	strb	r3, [r7, #2]
 800aca4:	4613      	mov	r3, r2
 800aca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800acb6:	787c      	ldrb	r4, [r7, #1]
 800acb8:	78ba      	ldrb	r2, [r7, #2]
 800acba:	78f9      	ldrb	r1, [r7, #3]
 800acbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acbe:	9302      	str	r3, [sp, #8]
 800acc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	4623      	mov	r3, r4
 800acce:	f7f5 ff97 	bl	8000c00 <HAL_HCD_HC_Init>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 f8bf 	bl	800ae5c <USBH_Get_USB_Status>
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd90      	pop	{r4, r7, pc}

0800acec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad06:	78fa      	ldrb	r2, [r7, #3]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f6 f810 	bl	8000d30 <HAL_HCD_HC_Halt>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f8a0 	bl	800ae5c <USBH_Get_USB_Status>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ad2a:	b590      	push	{r4, r7, lr}
 800ad2c:	b089      	sub	sp, #36	; 0x24
 800ad2e:	af04      	add	r7, sp, #16
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	4608      	mov	r0, r1
 800ad34:	4611      	mov	r1, r2
 800ad36:	461a      	mov	r2, r3
 800ad38:	4603      	mov	r3, r0
 800ad3a:	70fb      	strb	r3, [r7, #3]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70bb      	strb	r3, [r7, #2]
 800ad40:	4613      	mov	r3, r2
 800ad42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad52:	787c      	ldrb	r4, [r7, #1]
 800ad54:	78ba      	ldrb	r2, [r7, #2]
 800ad56:	78f9      	ldrb	r1, [r7, #3]
 800ad58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	f7f6 f803 	bl	8000d78 <HAL_HCD_HC_SubmitRequest>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 f86f 	bl	800ae5c <USBH_Get_USB_Status>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd90      	pop	{r4, r7, pc}

0800ad8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad9e:	78fa      	ldrb	r2, [r7, #3]
 800ada0:	4611      	mov	r1, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f6 faac 	bl	8001300 <HAL_HCD_HC_GetURBState>
 800ada8:	4603      	mov	r3, r0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d103      	bne.n	800add0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f872 	bl	800aeb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800add0:	20c8      	movs	r0, #200	; 0xc8
 800add2:	f7f5 fbbf 	bl	8000554 <HAL_Delay>
  return USBH_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
 800adec:	4613      	mov	r3, r2
 800adee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	440b      	add	r3, r1
 800ae06:	333b      	adds	r3, #59	; 0x3b
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ae0e:	78fa      	ldrb	r2, [r7, #3]
 800ae10:	68f9      	ldr	r1, [r7, #12]
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3350      	adds	r3, #80	; 0x50
 800ae1e:	78ba      	ldrb	r2, [r7, #2]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e009      	b.n	800ae38 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	440b      	add	r3, r1
 800ae32:	3351      	adds	r3, #81	; 0x51
 800ae34:	78ba      	ldrb	r2, [r7, #2]
 800ae36:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7f5 fb80 	bl	8000554 <HAL_Delay>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d817      	bhi.n	800aea0 <USBH_Get_USB_Status+0x44>
 800ae70:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <USBH_Get_USB_Status+0x1c>)
 800ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800ae89 	.word	0x0800ae89
 800ae7c:	0800ae8f 	.word	0x0800ae8f
 800ae80:	0800ae95 	.word	0x0800ae95
 800ae84:	0800ae9b 	.word	0x0800ae9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae8c:	e00b      	b.n	800aea6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae8e:	2302      	movs	r3, #2
 800ae90:	73fb      	strb	r3, [r7, #15]
    break;
 800ae92:	e008      	b.n	800aea6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae94:	2301      	movs	r3, #1
 800ae96:	73fb      	strb	r3, [r7, #15]
    break;
 800ae98:	e005      	b.n	800aea6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9e:	e002      	b.n	800aea6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aea0:	2302      	movs	r3, #2
 800aea2:	73fb      	strb	r3, [r7, #15]
    break;
 800aea4:	bf00      	nop
  }
  return usb_status;
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800aec8:	2301      	movs	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	e001      	b.n	800aed2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	461a      	mov	r2, r3
 800aed6:	2101      	movs	r1, #1
 800aed8:	4803      	ldr	r0, [pc, #12]	; (800aee8 <MX_DriverVbusFS+0x34>)
 800aeda:	f7f5 fdfb 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800aede:	bf00      	nop
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	40020800 	.word	0x40020800

0800aeec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800aeec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800aef0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800aef2:	e003      	b.n	800aefc <LoopCopyDataInit>

0800aef4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800aef4:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800aef6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800aef8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800aefa:	3104      	adds	r1, #4

0800aefc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800aefc:	480b      	ldr	r0, [pc, #44]	; (800af2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800aefe:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800af00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800af02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800af04:	d3f6      	bcc.n	800aef4 <CopyDataInit>
  ldr  r2, =_sbss
 800af06:	4a0b      	ldr	r2, [pc, #44]	; (800af34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800af08:	e002      	b.n	800af10 <LoopFillZerobss>

0800af0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800af0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800af0c:	f842 3b04 	str.w	r3, [r2], #4

0800af10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af10:	4b09      	ldr	r3, [pc, #36]	; (800af38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800af12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800af14:	d3f9      	bcc.n	800af0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800af16:	f7ff fcb1 	bl	800a87c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af1a:	f000 f817 	bl	800af4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af1e:	f7fe fee7 	bl	8009cf0 <main>
  bx  lr    
 800af22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800af24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800af28:	0800b2b8 	.word	0x0800b2b8
  ldr  r0, =_sdata
 800af2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800af30:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800af34:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800af38:	200048dc 	.word	0x200048dc

0800af3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af3c:	e7fe      	b.n	800af3c <ADC_IRQHandler>
	...

0800af40 <__errno>:
 800af40:	4b01      	ldr	r3, [pc, #4]	; (800af48 <__errno+0x8>)
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	20000030 	.word	0x20000030

0800af4c <__libc_init_array>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4e0d      	ldr	r6, [pc, #52]	; (800af84 <__libc_init_array+0x38>)
 800af50:	4c0d      	ldr	r4, [pc, #52]	; (800af88 <__libc_init_array+0x3c>)
 800af52:	1ba4      	subs	r4, r4, r6
 800af54:	10a4      	asrs	r4, r4, #2
 800af56:	2500      	movs	r5, #0
 800af58:	42a5      	cmp	r5, r4
 800af5a:	d109      	bne.n	800af70 <__libc_init_array+0x24>
 800af5c:	4e0b      	ldr	r6, [pc, #44]	; (800af8c <__libc_init_array+0x40>)
 800af5e:	4c0c      	ldr	r4, [pc, #48]	; (800af90 <__libc_init_array+0x44>)
 800af60:	f000 f8f6 	bl	800b150 <_init>
 800af64:	1ba4      	subs	r4, r4, r6
 800af66:	10a4      	asrs	r4, r4, #2
 800af68:	2500      	movs	r5, #0
 800af6a:	42a5      	cmp	r5, r4
 800af6c:	d105      	bne.n	800af7a <__libc_init_array+0x2e>
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af74:	4798      	blx	r3
 800af76:	3501      	adds	r5, #1
 800af78:	e7ee      	b.n	800af58 <__libc_init_array+0xc>
 800af7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af7e:	4798      	blx	r3
 800af80:	3501      	adds	r5, #1
 800af82:	e7f2      	b.n	800af6a <__libc_init_array+0x1e>
 800af84:	0800b2b0 	.word	0x0800b2b0
 800af88:	0800b2b0 	.word	0x0800b2b0
 800af8c:	0800b2b0 	.word	0x0800b2b0
 800af90:	0800b2b4 	.word	0x0800b2b4

0800af94 <malloc>:
 800af94:	4b02      	ldr	r3, [pc, #8]	; (800afa0 <malloc+0xc>)
 800af96:	4601      	mov	r1, r0
 800af98:	6818      	ldr	r0, [r3, #0]
 800af9a:	f000 b86d 	b.w	800b078 <_malloc_r>
 800af9e:	bf00      	nop
 800afa0:	20000030 	.word	0x20000030

0800afa4 <free>:
 800afa4:	4b02      	ldr	r3, [pc, #8]	; (800afb0 <free+0xc>)
 800afa6:	4601      	mov	r1, r0
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	f000 b817 	b.w	800afdc <_free_r>
 800afae:	bf00      	nop
 800afb0:	20000030 	.word	0x20000030

0800afb4 <memcpy>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	1e43      	subs	r3, r0, #1
 800afb8:	440a      	add	r2, r1
 800afba:	4291      	cmp	r1, r2
 800afbc:	d100      	bne.n	800afc0 <memcpy+0xc>
 800afbe:	bd10      	pop	{r4, pc}
 800afc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afc8:	e7f7      	b.n	800afba <memcpy+0x6>

0800afca <memset>:
 800afca:	4402      	add	r2, r0
 800afcc:	4603      	mov	r3, r0
 800afce:	4293      	cmp	r3, r2
 800afd0:	d100      	bne.n	800afd4 <memset+0xa>
 800afd2:	4770      	bx	lr
 800afd4:	f803 1b01 	strb.w	r1, [r3], #1
 800afd8:	e7f9      	b.n	800afce <memset+0x4>
	...

0800afdc <_free_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4605      	mov	r5, r0
 800afe0:	2900      	cmp	r1, #0
 800afe2:	d045      	beq.n	800b070 <_free_r+0x94>
 800afe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afe8:	1f0c      	subs	r4, r1, #4
 800afea:	2b00      	cmp	r3, #0
 800afec:	bfb8      	it	lt
 800afee:	18e4      	addlt	r4, r4, r3
 800aff0:	f000 f8ac 	bl	800b14c <__malloc_lock>
 800aff4:	4a1f      	ldr	r2, [pc, #124]	; (800b074 <_free_r+0x98>)
 800aff6:	6813      	ldr	r3, [r2, #0]
 800aff8:	4610      	mov	r0, r2
 800affa:	b933      	cbnz	r3, 800b00a <_free_r+0x2e>
 800affc:	6063      	str	r3, [r4, #4]
 800affe:	6014      	str	r4, [r2, #0]
 800b000:	4628      	mov	r0, r5
 800b002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b006:	f000 b8a2 	b.w	800b14e <__malloc_unlock>
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	d90c      	bls.n	800b028 <_free_r+0x4c>
 800b00e:	6821      	ldr	r1, [r4, #0]
 800b010:	1862      	adds	r2, r4, r1
 800b012:	4293      	cmp	r3, r2
 800b014:	bf04      	itt	eq
 800b016:	681a      	ldreq	r2, [r3, #0]
 800b018:	685b      	ldreq	r3, [r3, #4]
 800b01a:	6063      	str	r3, [r4, #4]
 800b01c:	bf04      	itt	eq
 800b01e:	1852      	addeq	r2, r2, r1
 800b020:	6022      	streq	r2, [r4, #0]
 800b022:	6004      	str	r4, [r0, #0]
 800b024:	e7ec      	b.n	800b000 <_free_r+0x24>
 800b026:	4613      	mov	r3, r2
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	b10a      	cbz	r2, 800b030 <_free_r+0x54>
 800b02c:	42a2      	cmp	r2, r4
 800b02e:	d9fa      	bls.n	800b026 <_free_r+0x4a>
 800b030:	6819      	ldr	r1, [r3, #0]
 800b032:	1858      	adds	r0, r3, r1
 800b034:	42a0      	cmp	r0, r4
 800b036:	d10b      	bne.n	800b050 <_free_r+0x74>
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	4401      	add	r1, r0
 800b03c:	1858      	adds	r0, r3, r1
 800b03e:	4282      	cmp	r2, r0
 800b040:	6019      	str	r1, [r3, #0]
 800b042:	d1dd      	bne.n	800b000 <_free_r+0x24>
 800b044:	6810      	ldr	r0, [r2, #0]
 800b046:	6852      	ldr	r2, [r2, #4]
 800b048:	605a      	str	r2, [r3, #4]
 800b04a:	4401      	add	r1, r0
 800b04c:	6019      	str	r1, [r3, #0]
 800b04e:	e7d7      	b.n	800b000 <_free_r+0x24>
 800b050:	d902      	bls.n	800b058 <_free_r+0x7c>
 800b052:	230c      	movs	r3, #12
 800b054:	602b      	str	r3, [r5, #0]
 800b056:	e7d3      	b.n	800b000 <_free_r+0x24>
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	1821      	adds	r1, r4, r0
 800b05c:	428a      	cmp	r2, r1
 800b05e:	bf04      	itt	eq
 800b060:	6811      	ldreq	r1, [r2, #0]
 800b062:	6852      	ldreq	r2, [r2, #4]
 800b064:	6062      	str	r2, [r4, #4]
 800b066:	bf04      	itt	eq
 800b068:	1809      	addeq	r1, r1, r0
 800b06a:	6021      	streq	r1, [r4, #0]
 800b06c:	605c      	str	r4, [r3, #4]
 800b06e:	e7c7      	b.n	800b000 <_free_r+0x24>
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	bf00      	nop
 800b074:	2000405c 	.word	0x2000405c

0800b078 <_malloc_r>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	1ccd      	adds	r5, r1, #3
 800b07c:	f025 0503 	bic.w	r5, r5, #3
 800b080:	3508      	adds	r5, #8
 800b082:	2d0c      	cmp	r5, #12
 800b084:	bf38      	it	cc
 800b086:	250c      	movcc	r5, #12
 800b088:	2d00      	cmp	r5, #0
 800b08a:	4606      	mov	r6, r0
 800b08c:	db01      	blt.n	800b092 <_malloc_r+0x1a>
 800b08e:	42a9      	cmp	r1, r5
 800b090:	d903      	bls.n	800b09a <_malloc_r+0x22>
 800b092:	230c      	movs	r3, #12
 800b094:	6033      	str	r3, [r6, #0]
 800b096:	2000      	movs	r0, #0
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	f000 f857 	bl	800b14c <__malloc_lock>
 800b09e:	4a21      	ldr	r2, [pc, #132]	; (800b124 <_malloc_r+0xac>)
 800b0a0:	6814      	ldr	r4, [r2, #0]
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	b991      	cbnz	r1, 800b0cc <_malloc_r+0x54>
 800b0a6:	4c20      	ldr	r4, [pc, #128]	; (800b128 <_malloc_r+0xb0>)
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	b91b      	cbnz	r3, 800b0b4 <_malloc_r+0x3c>
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f000 f83d 	bl	800b12c <_sbrk_r>
 800b0b2:	6020      	str	r0, [r4, #0]
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f000 f838 	bl	800b12c <_sbrk_r>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d124      	bne.n	800b10a <_malloc_r+0x92>
 800b0c0:	230c      	movs	r3, #12
 800b0c2:	6033      	str	r3, [r6, #0]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f000 f842 	bl	800b14e <__malloc_unlock>
 800b0ca:	e7e4      	b.n	800b096 <_malloc_r+0x1e>
 800b0cc:	680b      	ldr	r3, [r1, #0]
 800b0ce:	1b5b      	subs	r3, r3, r5
 800b0d0:	d418      	bmi.n	800b104 <_malloc_r+0x8c>
 800b0d2:	2b0b      	cmp	r3, #11
 800b0d4:	d90f      	bls.n	800b0f6 <_malloc_r+0x7e>
 800b0d6:	600b      	str	r3, [r1, #0]
 800b0d8:	50cd      	str	r5, [r1, r3]
 800b0da:	18cc      	adds	r4, r1, r3
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f000 f836 	bl	800b14e <__malloc_unlock>
 800b0e2:	f104 000b 	add.w	r0, r4, #11
 800b0e6:	1d23      	adds	r3, r4, #4
 800b0e8:	f020 0007 	bic.w	r0, r0, #7
 800b0ec:	1ac3      	subs	r3, r0, r3
 800b0ee:	d0d3      	beq.n	800b098 <_malloc_r+0x20>
 800b0f0:	425a      	negs	r2, r3
 800b0f2:	50e2      	str	r2, [r4, r3]
 800b0f4:	e7d0      	b.n	800b098 <_malloc_r+0x20>
 800b0f6:	428c      	cmp	r4, r1
 800b0f8:	684b      	ldr	r3, [r1, #4]
 800b0fa:	bf16      	itet	ne
 800b0fc:	6063      	strne	r3, [r4, #4]
 800b0fe:	6013      	streq	r3, [r2, #0]
 800b100:	460c      	movne	r4, r1
 800b102:	e7eb      	b.n	800b0dc <_malloc_r+0x64>
 800b104:	460c      	mov	r4, r1
 800b106:	6849      	ldr	r1, [r1, #4]
 800b108:	e7cc      	b.n	800b0a4 <_malloc_r+0x2c>
 800b10a:	1cc4      	adds	r4, r0, #3
 800b10c:	f024 0403 	bic.w	r4, r4, #3
 800b110:	42a0      	cmp	r0, r4
 800b112:	d005      	beq.n	800b120 <_malloc_r+0xa8>
 800b114:	1a21      	subs	r1, r4, r0
 800b116:	4630      	mov	r0, r6
 800b118:	f000 f808 	bl	800b12c <_sbrk_r>
 800b11c:	3001      	adds	r0, #1
 800b11e:	d0cf      	beq.n	800b0c0 <_malloc_r+0x48>
 800b120:	6025      	str	r5, [r4, #0]
 800b122:	e7db      	b.n	800b0dc <_malloc_r+0x64>
 800b124:	2000405c 	.word	0x2000405c
 800b128:	20004060 	.word	0x20004060

0800b12c <_sbrk_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4c06      	ldr	r4, [pc, #24]	; (800b148 <_sbrk_r+0x1c>)
 800b130:	2300      	movs	r3, #0
 800b132:	4605      	mov	r5, r0
 800b134:	4608      	mov	r0, r1
 800b136:	6023      	str	r3, [r4, #0]
 800b138:	f7ff fb74 	bl	800a824 <_sbrk>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_sbrk_r+0x1a>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	b103      	cbz	r3, 800b146 <_sbrk_r+0x1a>
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	200048d8 	.word	0x200048d8

0800b14c <__malloc_lock>:
 800b14c:	4770      	bx	lr

0800b14e <__malloc_unlock>:
 800b14e:	4770      	bx	lr

0800b150 <_init>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr

0800b15c <_fini>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	bf00      	nop
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr
