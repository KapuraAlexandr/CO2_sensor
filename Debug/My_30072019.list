
My_30072019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b550  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800b6e0  0800b6e0  0001b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b864  0800b864  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b86c  0800b86c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004858  20000094  0800b908  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048ec  0800b908  000248ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263d9  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d0a  00000000  00000000  0004649d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc0  00000000  00000000  0004b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ac8  00000000  00000000  0004ce68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027442  00000000  00000000  0004e930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c21  00000000  00000000  00075d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbd16  00000000  00000000  0008e993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a6a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007abc  00000000  00000000  0016a724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6c8 	.word	0x0800b6c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b6c8 	.word	0x0800b6c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8fa 	bl	80006f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f00a fbc4 	bl	800ac8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f00a fa3a 	bl	800a97c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	20004068 	.word	0x20004068

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20004068 	.word	0x20004068

08000554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff ffee 	bl	800053c <HAL_GetTick>
 8000560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056c:	d005      	beq.n	800057a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_Delay+0x40>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4413      	add	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057a:	bf00      	nop
 800057c:	f7ff ffde 	bl	800053c <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <HAL_Delay+0x28>
  {
  }
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000004 	.word	0x20000004

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	; (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff4c 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800071a:	f7ff ff61 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 800071e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f7ff ffb1 	bl	800068c <NVIC_EncodePriority>
 800072a:	4602      	mov	r2, r0
 800072c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff80 	bl	8000638 <__NVIC_SetPriority>
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff54 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b02      	cmp	r3, #2
 800076e:	d004      	beq.n	800077a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00c      	b.n	8000794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e16b      	b.n	8000a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007bc:	2201      	movs	r2, #1
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f040 815a 	bne.w	8000a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d00b      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d007      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	2b11      	cmp	r3, #17
 80007f0:	d003      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d130      	bne.n	800085c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2203      	movs	r2, #3
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4013      	ands	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	4313      	orrs	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	091b      	lsrs	r3, r3, #4
 8000846:	f003 0201 	and.w	r2, r3, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4313      	orrs	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4313      	orrs	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0xfc>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b12      	cmp	r3, #18
 800089a:	d123      	bne.n	80008e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	220f      	movs	r2, #15
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	691a      	ldr	r2, [r3, #16]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	08da      	lsrs	r2, r3, #3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3208      	adds	r2, #8
 80008de:	69b9      	ldr	r1, [r7, #24]
 80008e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	2203      	movs	r2, #3
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0203 	and.w	r2, r3, #3
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 80b4 	beq.w	8000a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a5e      	ldr	r2, [pc, #376]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000942:	4a5a      	ldr	r2, [pc, #360]	; (8000aac <HAL_GPIO_Init+0x30c>)
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	3302      	adds	r3, #2
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <HAL_GPIO_Init+0x310>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d02b      	beq.n	80009c6 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <HAL_GPIO_Init+0x314>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d025      	beq.n	80009c2 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_GPIO_Init+0x318>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d01f      	beq.n	80009be <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_GPIO_Init+0x31c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d019      	beq.n	80009ba <HAL_GPIO_Init+0x21a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4d      	ldr	r2, [pc, #308]	; (8000ac0 <HAL_GPIO_Init+0x320>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x216>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_GPIO_Init+0x324>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x212>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <HAL_GPIO_Init+0x328>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x20e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <HAL_GPIO_Init+0x32c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x20a>
 80009a6:	2307      	movs	r3, #7
 80009a8:	e00e      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009aa:	2308      	movs	r3, #8
 80009ac:	e00c      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e00a      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b2:	2305      	movs	r3, #5
 80009b4:	e008      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b6:	2304      	movs	r3, #4
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ba:	2303      	movs	r3, #3
 80009bc:	e004      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009be:	2302      	movs	r3, #2
 80009c0:	e002      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c6:	2300      	movs	r3, #0
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	f002 0203 	and.w	r2, r2, #3
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	4093      	lsls	r3, r2
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d8:	4934      	ldr	r1, [pc, #208]	; (8000aac <HAL_GPIO_Init+0x30c>)
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a0a:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a88:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f67f ae90 	bls.w	80007bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40021400 	.word	0x40021400
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40021c00 	.word	0x40021c00
 8000ad0:	40013c00 	.word	0x40013c00

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	401a      	ands	r2, r3
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d104      	bne.n	8000b2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	041a      	lsls	r2, r3, #16
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	b08f      	sub	sp, #60	; 0x3c
 8000b40:	af0a      	add	r7, sp, #40	; 0x28
 8000b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e054      	b.n	8000bf8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d106      	bne.n	8000b6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f00a f9cd 	bl	800af08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fc93 	bl	80044b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	687e      	ldr	r6, [r7, #4]
 8000b9a:	466d      	mov	r5, sp
 8000b9c:	f106 0410 	add.w	r4, r6, #16
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bb0:	1d33      	adds	r3, r6, #4
 8000bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f003 fc0d 	bl	80043d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fc8a 	bl	80044da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	687e      	ldr	r6, [r7, #4]
 8000bce:	466d      	mov	r5, sp
 8000bd0:	f106 0410 	add.w	r4, r6, #16
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000be4:	1d33      	adds	r3, r6, #4
 8000be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f003 fd9d 	bl	8004728 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c00 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70bb      	strb	r3, [r7, #2]
 8000c16:	4613      	mov	r3, r2
 8000c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_HCD_HC_Init+0x28>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e07f      	b.n	8000d28 <HAL_HCD_HC_Init+0x128>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	333d      	adds	r3, #61	; 0x3d
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3338      	adds	r3, #56	; 0x38
 8000c54:	787a      	ldrb	r2, [r7, #1]
 8000c56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c6a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3339      	adds	r3, #57	; 0x39
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333f      	adds	r3, #63	; 0x3f
 8000c90:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c9e:	b2d8      	uxtb	r0, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	333a      	adds	r3, #58	; 0x3a
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da0a      	bge.n	8000cd0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	333b      	adds	r3, #59	; 0x3b
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e009      	b.n	8000ce4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	333b      	adds	r3, #59	; 0x3b
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333c      	adds	r3, #60	; 0x3c
 8000cf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cf8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	787c      	ldrb	r4, [r7, #1]
 8000d00:	78ba      	ldrb	r2, [r7, #2]
 8000d02:	78f9      	ldrb	r1, [r7, #3]
 8000d04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f003 fe89 	bl	8004a2c <USB_HC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_HCD_HC_Halt+0x1e>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e00f      	b.n	8000d6e <HAL_HCD_HC_Halt+0x3e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 f8c3 	bl	8004eea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70bb      	strb	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d92:	78fa      	ldrb	r2, [r7, #3]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	333b      	adds	r3, #59	; 0x3b
 8000da2:	78ba      	ldrb	r2, [r7, #2]
 8000da4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	333f      	adds	r3, #63	; 0x3f
 8000db6:	787a      	ldrb	r2, [r7, #1]
 8000db8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000dba:	7c3b      	ldrb	r3, [r7, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d114      	bne.n	8000dea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	3342      	adds	r3, #66	; 0x42
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	333d      	adds	r3, #61	; 0x3d
 8000de4:	7f3a      	ldrb	r2, [r7, #28]
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e009      	b.n	8000dfe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3342      	adds	r3, #66	; 0x42
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	f200 80d6 	bhi.w	8000fb2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_HCD_HC_SubmitRequest+0x94>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000f9d 	.word	0x08000f9d
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	08000f13 	.word	0x08000f13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e1c:	7c3b      	ldrb	r3, [r7, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 80c9 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 80c5 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8000e2c:	8b3b      	ldrh	r3, [r7, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d109      	bne.n	8000e46 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3351      	adds	r3, #81	; 0x51
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3351      	adds	r3, #81	; 0x51
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3342      	adds	r3, #66	; 0x42
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e70:	e0a1      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3342      	adds	r3, #66	; 0x42
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
      break;
 8000e86:	e096      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d120      	bne.n	8000ed0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3351      	adds	r3, #81	; 0x51
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000eb8:	e07e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
      break;
 8000ece:	e073      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3350      	adds	r3, #80	; 0x50
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3342      	adds	r3, #66	; 0x42
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
      break;
 8000efa:	e05d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
      break;
 8000f10:	e052      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d120      	bne.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3351      	adds	r3, #81	; 0x51
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3342      	adds	r3, #66	; 0x42
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f42:	e039      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3342      	adds	r3, #66	; 0x42
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
      break;
 8000f58:	e02e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3342      	adds	r3, #66	; 0x42
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
      break;
 8000f84:	e018      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3342      	adds	r3, #66	; 0x42
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
      break;
 8000f9a:	e00d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3342      	adds	r3, #66	; 0x42
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
      break;
 8000fb0:	e002      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8000fb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	8b39      	ldrh	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4403      	add	r3, r0
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	335c      	adds	r3, #92	; 0x5c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	334c      	adds	r3, #76	; 0x4c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3339      	adds	r3, #57	; 0x39
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	335d      	adds	r3, #93	; 0x5d
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3338      	adds	r3, #56	; 0x38
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	18d1      	adds	r1, r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f003 fdf8 	bl	8004c40 <USB_HC_StartXfer>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop

0800105c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fb15 	bl	80046a2 <USB_GetMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 80ef 	bne.w	800125e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 faf9 	bl	800467c <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80e5 	beq.w	800125c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 faf0 	bl	800467c <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010a6:	d104      	bne.n	80010b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fae0 	bl	800467c <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010c6:	d104      	bne.n	80010d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fad0 	bl	800467c <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010e6:	d104      	bne.n	80010f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fac0 	bl	800467c <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b02      	cmp	r3, #2
 8001104:	d103      	bne.n	800110e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2202      	movs	r2, #2
 800110c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fab2 	bl	800467c <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001122:	d115      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800112c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f009 ff60 	bl	800b004 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fba8 	bl	80048a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fa91 	bl	800467c <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d102      	bne.n	800116c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f001 f966 	bl	8002438 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fa83 	bl	800467c <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b08      	cmp	r3, #8
 800117e:	d106      	bne.n	800118e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f009 ff23 	bl	800afcc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fa72 	bl	800467c <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a2:	d138      	bne.n	8001216 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fe8d 	bl	8004ec8 <USB_HC_ReadInterrupt>
 80011ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e025      	b.n	8001202 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d018      	beq.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e0:	d106      	bne.n	80011f0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8cf 	bl	800138c <HCD_HC_IN_IRQHandler>
 80011ee:	e005      	b.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fcfd 	bl	8001bf6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3d4      	bcc.n	80011b6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fa2e 	bl	800467c <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b10      	cmp	r3, #16
 8001228:	d101      	bne.n	800122e <HAL_HCD_IRQHandler+0x1d2>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_HCD_IRQHandler+0x1d4>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d014      	beq.n	800125e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0210 	bic.w	r2, r2, #16
 8001242:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 f84b 	bl	80022e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0210 	orr.w	r2, r2, #16
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e000      	b.n	800125e <HAL_HCD_IRQHandler+0x202>
      return;
 800125c:	bf00      	nop
    }
  }
}
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_HCD_Start+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e013      	b.n	80012a2 <HAL_HCD_Start+0x3e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 f905 	bl	8004496 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fb68 	bl	8004968 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_HCD_Stop+0x16>
 80012bc:	2302      	movs	r3, #2
 80012be:	e00d      	b.n	80012dc <HAL_HCD_Stop+0x32>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 ff47 	bl	8005160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fb0f 	bl	8004914 <USB_ResetPort>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	335c      	adds	r3, #92	; 0x5c
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	334c      	adds	r3, #76	; 0x4c
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fb51 	bl	8004a08 <USB_GetCurrentFrame>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fb2c 	bl	80049da <USB_GetHostSpeed>
 8001382:	4603      	mov	r3, r0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d119      	bne.n	80013f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c8:	461a      	mov	r2, r3
 80013ca:	2304      	movs	r3, #4
 80013cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	0151      	lsls	r1, r2, #5
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	440a      	add	r2, r1
 80013e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	60d3      	str	r3, [r2, #12]
 80013ee:	e0ce      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d12c      	bne.n	8001462 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	015a      	lsls	r2, r3, #5
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4413      	add	r3, r2
 8001410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001414:	461a      	mov	r2, r3
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	335d      	adds	r3, #93	; 0x5d
 800142c:	2207      	movs	r2, #7
 800142e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	0151      	lsls	r1, r2, #5
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	440a      	add	r2, r1
 8001446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fd45 	bl	8004eea <USB_HC_Halt>
 8001460:	e095      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4413      	add	r3, r2
 800146a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b20      	cmp	r3, #32
 8001476:	d109      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001484:	461a      	mov	r2, r3
 8001486:	2320      	movs	r3, #32
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	e080      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d134      	bne.n	800150c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	0151      	lsls	r1, r2, #5
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	440a      	add	r2, r1
 80014b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	335d      	adds	r3, #93	; 0x5d
 80014d2:	2205      	movs	r2, #5
 80014d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f4:	461a      	mov	r2, r3
 80014f6:	2308      	movs	r3, #8
 80014f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fcf0 	bl	8004eea <USB_HC_Halt>
 800150a:	e040      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d134      	bne.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	0151      	lsls	r1, r2, #5
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	440a      	add	r2, r1
 800153a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fccb 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	461a      	mov	r2, r3
 8001562:	2310      	movs	r3, #16
 8001564:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	335d      	adds	r3, #93	; 0x5d
 8001576:	2208      	movs	r2, #8
 8001578:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d122      	bne.n	80015ec <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	0151      	lsls	r1, r2, #5
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	440a      	add	r2, r1
 80015bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fc8a 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	461a      	mov	r2, r3
 80015e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015ea:	e300      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 80fd 	bne.w	80017fe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01b      	beq.n	8001644 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3348      	adds	r3, #72	; 0x48
 800161c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	0159      	lsls	r1, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	440b      	add	r3, r1
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001630:	1ad1      	subs	r1, r2, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4403      	add	r3, r0
 8001640:	334c      	adds	r3, #76	; 0x4c
 8001642:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	335d      	adds	r3, #93	; 0x5d
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3358      	adds	r3, #88	; 0x58
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4413      	add	r3, r2
 8001674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001678:	461a      	mov	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	333f      	adds	r3, #63	; 0x3f
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	333f      	adds	r3, #63	; 0x3f
 80016a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d121      	bne.n	80016ee <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	0151      	lsls	r1, r2, #5
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	440a      	add	r2, r1
 80016c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fc08 	bl	8004eea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	461a      	mov	r2, r3
 80016e8:	2310      	movs	r3, #16
 80016ea:	6093      	str	r3, [r2, #8]
 80016ec:	e070      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	333f      	adds	r3, #63	; 0x3f
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d12a      	bne.n	800175a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	0151      	lsls	r1, r2, #5
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	440a      	add	r2, r1
 800171a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800171e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001722:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	335c      	adds	r3, #92	; 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	335c      	adds	r3, #92	; 0x5c
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4601      	mov	r1, r0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f009 fc64 	bl	800b020 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001758:	e03a      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	333f      	adds	r3, #63	; 0x3f
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12f      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335c      	adds	r3, #92	; 0x5c
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3350      	adds	r3, #80	; 0x50
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3350      	adds	r3, #80	; 0x50
 80017ac:	4602      	mov	r2, r0
 80017ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	335c      	adds	r3, #92	; 0x5c
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4601      	mov	r1, r0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f009 fc28 	bl	800b020 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3350      	adds	r3, #80	; 0x50
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f083 0301 	eor.w	r3, r3, #1
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3350      	adds	r3, #80	; 0x50
 80017f8:	4602      	mov	r2, r0
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	e1f7      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b02      	cmp	r3, #2
 8001812:	f040 811a 	bne.w	8001a4a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	0151      	lsls	r1, r2, #5
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	440a      	add	r2, r1
 800182c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001830:	f023 0302 	bic.w	r3, r3, #2
 8001834:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	335d      	adds	r3, #93	; 0x5d
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10a      	bne.n	8001862 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	335c      	adds	r3, #92	; 0x5c
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e0d9      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335d      	adds	r3, #93	; 0x5d
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10a      	bne.n	800188e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	335c      	adds	r3, #92	; 0x5c
 8001888:	2205      	movs	r2, #5
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e0c3      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	335d      	adds	r3, #93	; 0x5d
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d00a      	beq.n	80018ba <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	335d      	adds	r3, #93	; 0x5d
 80018b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d156      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3358      	adds	r3, #88	; 0x58
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4403      	add	r3, r0
 80018dc:	3358      	adds	r3, #88	; 0x58
 80018de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3358      	adds	r3, #88	; 0x58
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d914      	bls.n	8001920 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3358      	adds	r3, #88	; 0x58
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	335c      	adds	r3, #92	; 0x5c
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e009      	b.n	8001934 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	335c      	adds	r3, #92	; 0x5c
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800194a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e056      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	335d      	adds	r3, #93	; 0x5d
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d123      	bne.n	80019c6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335c      	adds	r3, #92	; 0x5c
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e027      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	335d      	adds	r3, #93	; 0x5d
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d11c      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3358      	adds	r3, #88	; 0x58
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4403      	add	r3, r0
 80019fe:	3358      	adds	r3, #88	; 0x58
 8001a00:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	335c      	adds	r3, #92	; 0x5c
 8001a12:	2204      	movs	r2, #4
 8001a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	2302      	movs	r3, #2
 8001a26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	335c      	adds	r3, #92	; 0x5c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4601      	mov	r1, r0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f009 faec 	bl	800b020 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a48:	e0d1      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d13e      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3358      	adds	r3, #88	; 0x58
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3358      	adds	r3, #88	; 0x58
 8001aa4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	335d      	adds	r3, #93	; 0x5d
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fa10 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	6093      	str	r3, [r2, #8]
}
 8001adc:	e087      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d17c      	bne.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	333f      	adds	r3, #63	; 0x3f
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d122      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3358      	adds	r3, #88	; 0x58
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f9ce 	bl	8004eea <USB_HC_Halt>
 8001b4e:	e045      	b.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333f      	adds	r3, #63	; 0x3f
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d12f      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3358      	adds	r3, #88	; 0x58
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	335d      	adds	r3, #93	; 0x5d
 8001ba8:	2203      	movs	r2, #3
 8001baa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 f987 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	6093      	str	r3, [r2, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d119      	bne.n	8001c5a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2304      	movs	r3, #4
 8001c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	0151      	lsls	r1, r2, #5
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	440a      	add	r2, r1
 8001c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c58:	e33e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d141      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2320      	movs	r3, #32
 8001c80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	333d      	adds	r3, #61	; 0x3d
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 831f 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333d      	adds	r3, #61	; 0x3d
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	335c      	adds	r3, #92	; 0x5c
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f8fc 	bl	8004eea <USB_HC_Halt>
}
 8001cf2:	e2f1      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d13f      	bne.n	8001d8a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	335d      	adds	r3, #93	; 0x5d
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333d      	adds	r3, #61	; 0x3d
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	0151      	lsls	r1, r2, #5
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f8ba 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2340      	movs	r3, #64	; 0x40
 8001d86:	6093      	str	r3, [r2, #8]
}
 8001d88:	e2a6      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d122      	bne.n	8001de8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f88c 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	6093      	str	r3, [r2, #8]
}
 8001de6:	e277      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d135      	bne.n	8001e6a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3358      	adds	r3, #88	; 0x58
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	0151      	lsls	r1, r2, #5
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	440a      	add	r2, r1
 8001e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 f854 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	335d      	adds	r3, #93	; 0x5d
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
}
 8001e68:	e236      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d12b      	bne.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f814 	bl	8004eea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335d      	adds	r3, #93	; 0x5d
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	e1ff      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d155      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3358      	adds	r3, #88	; 0x58
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	335d      	adds	r3, #93	; 0x5d
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	; 0x3d
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d114      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333d      	adds	r3, #61	; 0x3d
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 ffb2 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	e19e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d12b      	bne.n	8002008 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 ff85 	bl	8004eea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335d      	adds	r3, #93	; 0x5d
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	6093      	str	r3, [r2, #8]
}
 8002006:	e167      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d135      	bne.n	800208c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f002 ff4d 	bl	8004eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	e125      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 811a 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d137      	bne.n	800214a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	333f      	adds	r3, #63	; 0x3f
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d00b      	beq.n	800211c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	333f      	adds	r3, #63	; 0x3f
 8002114:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	f040 80c5 	bne.w	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3351      	adds	r3, #81	; 0x51
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3351      	adds	r3, #81	; 0x51
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e0ad      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335d      	adds	r3, #93	; 0x5d
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d10a      	bne.n	8002176 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e097      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	335d      	adds	r3, #93	; 0x5d
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d10a      	bne.n	80021a2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e081      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335d      	adds	r3, #93	; 0x5d
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10a      	bne.n	80021ce <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2205      	movs	r2, #5
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e06b      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	335d      	adds	r3, #93	; 0x5d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d00a      	beq.n	80021fa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335d      	adds	r3, #93	; 0x5d
 80021f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d155      	bne.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3358      	adds	r3, #88	; 0x58
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4403      	add	r3, r0
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d914      	bls.n	8002260 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	3358      	adds	r3, #88	; 0x58
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e009      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002292:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4601      	mov	r1, r0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f008 fea4 	bl	800b020 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HCD_RXQLVL_IRQHandler+0x44>
 800231c:	2b05      	cmp	r3, #5
 800231e:	f000 8082 	beq.w	8002426 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002322:	e083      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07f      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	; 0x44
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d074      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3344      	adds	r3, #68	; 0x44
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	b292      	uxth	r2, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f002 f965 	bl	800462a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3344      	adds	r3, #68	; 0x44
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	18d1      	adds	r1, r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4403      	add	r3, r0
 8002384:	3344      	adds	r3, #68	; 0x44
 8002386:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	18d1      	adds	r1, r2, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4403      	add	r3, r0
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HCD_RXQLVL_IRQHandler+0x154>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d031      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	4602      	mov	r2, r0
 8002422:	701a      	strb	r2, [r3, #0]
      break;
 8002424:	e001      	b.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800242a:	bf00      	nop
  }
}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	1ff80000 	.word	0x1ff80000

08002438 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002464:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d10b      	bne.n	8002488 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f008 fdb4 	bl	800afe8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d132      	bne.n	80024f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d126      	bne.n	80024f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d113      	bne.n	80024d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b6:	d106      	bne.n	80024c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 f9ee 	bl	80048a0 <USB_InitFSLSPClkSel>
 80024c4:	e011      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 f9e7 	bl	80048a0 <USB_InitFSLSPClkSel>
 80024d2:	e00a      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	461a      	mov	r2, r3
 80024e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f008 fdaa 	bl	800b044 <HAL_HCD_PortEnabled_Callback>
 80024f0:	e002      	b.n	80024f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f008 fdb4 	bl	800b060 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d103      	bne.n	800250a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e11f      	b.n	8002772 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f008 fa44 	bl	800a9d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f000 fd3e 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_I2C_Init+0x25c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_I2C_Init+0x260>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_I2C_Init+0x264>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0db      	b.n	8002772 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_I2C_Init+0x268>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_I2C_Init+0x25c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_I2C_Init+0x26c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4956      	ldr	r1, [pc, #344]	; (800277c <HAL_I2C_Init+0x25c>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d80d      	bhi.n	8002644 <HAL_I2C_Init+0x124>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	bf38      	it	cc
 8002640:	2304      	movcc	r3, #4
 8002642:	e04f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_I2C_Init+0x150>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_I2C_Init+0x176>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x17e>
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_Init+0x1a4>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e58      	subs	r0, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6911      	ldr	r1, [r2, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	000186a0 	.word	0x000186a0
 8002780:	001e847f 	.word	0x001e847f
 8002784:	003d08ff 	.word	0x003d08ff
 8002788:	431bde83 	.word	0x431bde83
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e25b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d075      	beq.n	800289a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ae:	4ba3      	ldr	r3, [pc, #652]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d00c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05b      	beq.n	8002898 <HAL_RCC_OscConfig+0x108>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d157      	bne.n	8002898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e236      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x74>
 80027f6:	4b91      	ldr	r3, [pc, #580]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a90      	ldr	r2, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b8b      	ldr	r3, [pc, #556]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a8a      	ldr	r2, [pc, #552]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a87      	ldr	r2, [pc, #540]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a83      	ldr	r2, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fd fe78 	bl	800053c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7fd fe74 	bl	800053c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1fb      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xc0>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fd fe64 	bl	800053c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fd fe60 	bl	800053c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1e7      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0xe8>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d063      	beq.n	800296e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d11c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_RCC_OscConfig+0x152>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1bb      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e2:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4952      	ldr	r1, [pc, #328]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	e03a      	b.n	800296e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_OscConfig+0x2b0>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fd fe19 	bl	800053c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290e:	f7fd fe15 	bl	800053c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e19c      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4940      	ldr	r1, [pc, #256]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e015      	b.n	800296e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x2b0>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fd fdf8 	bl	800053c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002950:	f7fd fdf4 	bl	800053c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e17b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d030      	beq.n	80029dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_OscConfig+0x2b4>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fd fdd8 	bl	800053c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002990:	f7fd fdd4 	bl	800053c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e15b      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x200>
 80029ae:	e015      	b.n	80029dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x2b4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fd fdc1 	bl	800053c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029be:	f7fd fdbd 	bl	800053c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e144      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a0 	beq.w	8002b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_RCC_OscConfig+0x2b8>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fd fd83 	bl	800053c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e011      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	42470000 	.word	0x42470000
 8002a44:	42470e80 	.word	0x42470e80
 8002a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fd fd76 	bl	800053c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0fd      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a76      	ldr	r2, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a73      	ldr	r2, [pc, #460]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x32a>
 8002aa2:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a70      	ldr	r2, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a6d      	ldr	r2, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fd fd3b 	bl	800053c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fd fd37 	bl	800053c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0bc      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x33a>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fd fd25 	bl	800053c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fd fd21 	bl	800053c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0a6      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8092 	beq.w	8002c58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d05c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d141      	bne.n	8002bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fd fcf5 	bl	800053c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fd fcf1 	bl	800053c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e078      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b68:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	019b      	lsls	r3, r3, #6
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	4933      	ldr	r1, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fd fcca 	bl	800053c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fd fcc6 	bl	800053c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e04d      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x41c>
 8002bca:	e045      	b.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x4dc>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fd fcb3 	bl	800053c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fd fcaf 	bl	800053c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x44a>
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e029      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d115      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40007000 	.word	0x40007000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470060 	.word	0x42470060

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d90c      	bls.n	8002cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4934      	ldr	r1, [pc, #208]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fd fbec 	bl	800053c <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fd fbe8 	bl	800053c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20c      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f007 ff38 	bl	800ac8c <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	0800b84c 	.word	0x0800b84c
 8002e34:	2000002c 	.word	0x2000002c
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d007      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x32>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d008      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x38>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 80b4 	bne.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e6a:	60bb      	str	r3, [r7, #8]
       break;
 8002e6c:	e0b3      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e70:	60bb      	str	r3, [r7, #8]
      break;
 8002e72:	e0b0      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04a      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	ea03 0501 	and.w	r5, r3, r1
 8002ea0:	ea04 0602 	and.w	r6, r4, r2
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0154      	lsls	r4, r2, #5
 8002eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eb6:	014b      	lsls	r3, r1, #5
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4622      	mov	r2, r4
 8002ebc:	1b49      	subs	r1, r1, r5
 8002ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	0194      	lsls	r4, r2, #6
 8002ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ed0:	018b      	lsls	r3, r1, #6
 8002ed2:	1a5b      	subs	r3, r3, r1
 8002ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	00e2      	lsls	r2, r4, #3
 8002ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ee6:	00d9      	lsls	r1, r3, #3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	195b      	adds	r3, r3, r5
 8002eee:	eb44 0406 	adc.w	r4, r4, r6
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	0262      	lsls	r2, r4, #9
 8002efc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f00:	0259      	lsls	r1, r3, #9
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	4621      	mov	r1, r4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fd f95c 	bl	80001d0 <__aeabi_uldivmod>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e049      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	ea03 0501 	and.w	r5, r3, r1
 8002f36:	ea04 0602 	and.w	r6, r4, r2
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0154      	lsls	r4, r2, #5
 8002f48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f4c:	014b      	lsls	r3, r1, #5
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4622      	mov	r2, r4
 8002f52:	1b49      	subs	r1, r1, r5
 8002f54:	eb62 0206 	sbc.w	r2, r2, r6
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0194      	lsls	r4, r2, #6
 8002f62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	1a5b      	subs	r3, r3, r1
 8002f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	195b      	adds	r3, r3, r5
 8002f84:	eb44 0406 	adc.w	r4, r4, r6
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	02a2      	lsls	r2, r4, #10
 8002f92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f96:	0299      	lsls	r1, r3, #10
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	f7fd f911 	bl	80001d0 <__aeabi_uldivmod>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fd2:	60bb      	str	r3, [r7, #8]
      break;
 8002fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	2000002c 	.word	0x2000002c

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4601      	mov	r1, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	0800b85c 	.word	0x0800b85c

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003030:	f7ff ffdc 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003034:	4601      	mov	r1, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0b5b      	lsrs	r3, r3, #13
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	0800b85c 	.word	0x0800b85c

08003054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	220f      	movs	r2, #15
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_GetClockConfig+0x60>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e056      	b.n	8003178 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f007 fcbd 	bl	800aa64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0104 	and.w	r1, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01d      	b.n	80031ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f815 	bl	80031d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 f968 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d007      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	d122      	bne.n	800328e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d11b      	bne.n	800328e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0202 	mvn.w	r2, #2
 800325e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8ee 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 800327a:	e005      	b.n	8003288 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8e0 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8f1 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d122      	bne.n	80032e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d11b      	bne.n	80032e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0204 	mvn.w	r2, #4
 80032b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8c4 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 80032ce:	e005      	b.n	80032dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8b6 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8c7 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d122      	bne.n	8003336 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11b      	bne.n	8003336 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0208 	mvn.w	r2, #8
 8003306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2204      	movs	r2, #4
 800330c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f89a 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003322:	e005      	b.n	8003330 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f88c 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f89d 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d122      	bne.n	800338a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d11b      	bne.n	800338a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0210 	mvn.w	r2, #16
 800335a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2208      	movs	r2, #8
 8003360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f870 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003376:	e005      	b.n	8003384 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f862 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f873 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d10e      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0201 	mvn.w	r2, #1
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f007 facd 	bl	800a950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d10e      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f903 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d10e      	bne.n	800340e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d107      	bne.n	800340e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f838 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0220 	mvn.w	r2, #32
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8cd 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d027      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d023      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x12c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <TIM_Base_SetConfig+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	40001800 	.word	0x40001800
 80035cc:	40001c00 	.word	0x40001c00
 80035d0:	40002000 	.word	0x40002000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e03f      	b.n	800368e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f007 fa66 	bl	800aaf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb4b 	bl	8003cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b088      	sub	sp, #32
 800369a:	af02      	add	r7, sp, #8
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 8083 	bne.w	80037be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_UART_Transmit+0x2e>
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e07b      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Transmit+0x40>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e074      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2221      	movs	r2, #33	; 0x21
 80036e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036ec:	f7fc ff26 	bl	800053c <HAL_GetTick>
 80036f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003706:	e042      	b.n	800378e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	d122      	bne.n	8003766 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f96a 	bl	8003a04 <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e042      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3302      	adds	r3, #2
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	e017      	b.n	800378e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	e013      	b.n	800378e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f947 	bl	8003a04 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e01f      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1b7      	bne.n	8003708 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f92e 	bl	8003a04 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e006      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_IRQHandler+0x52>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9e0 	bl	8003bd8 <UART_Receive_IT>
      return;
 8003818:	e0d1      	b.n	80039be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80b0 	beq.w	8003982 <HAL_UART_IRQHandler+0x1ba>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_UART_IRQHandler+0x70>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80a5 	beq.w	8003982 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_UART_IRQHandler+0x90>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_UART_IRQHandler+0xb0>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	f043 0202 	orr.w	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_UART_IRQHandler+0xd0>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00f      	beq.n	80038c2 <HAL_UART_IRQHandler+0xfa>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_UART_IRQHandler+0xee>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d078      	beq.n	80039bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_UART_IRQHandler+0x11c>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f97a 	bl	8003bd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_UART_IRQHandler+0x144>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d031      	beq.n	8003970 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8c3 	bl	8003a98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d123      	bne.n	8003968 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <HAL_UART_IRQHandler+0x1fc>)
 800393e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc ff09 	bl	800075c <HAL_DMA_Abort_IT>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800395a:	4610      	mov	r0, r2
 800395c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395e:	e00e      	b.n	800397e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f845 	bl	80039f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003966:	e00a      	b.n	800397e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f841 	bl	80039f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396e:	e006      	b.n	800397e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f83d 	bl	80039f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800397c:	e01e      	b.n	80039bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	bf00      	nop
    return;
 8003980:	e01c      	b.n	80039bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_UART_IRQHandler+0x1d6>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8b0 	bl	8003afc <UART_Transmit_IT>
    return;
 800399c:	e00f      	b.n	80039be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_UART_IRQHandler+0x1f6>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8f8 	bl	8003ba8 <UART_EndTransmit_IT>
    return;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_UART_IRQHandler+0x1f6>
    return;
 80039bc:	bf00      	nop
  }
}
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	08003ad5 	.word	0x08003ad5

080039c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a14:	e02c      	b.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d028      	beq.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a24:	f7fc fd8a 	bl	800053c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d21d      	bcs.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e00f      	b.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d0c3      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003aae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff ff7e 	bl	80039f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b21      	cmp	r3, #33	; 0x21
 8003b0e:	d144      	bne.n	8003b9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d11a      	bne.n	8003b50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]
 8003b42:	e00e      	b.n	8003b62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]
 8003b4e:	e008      	b.n	8003b62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	1c59      	adds	r1, r3, #1
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6211      	str	r1, [r2, #32]
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fefd 	bl	80039c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b22      	cmp	r3, #34	; 0x22
 8003bea:	d171      	bne.n	8003cd0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d123      	bne.n	8003c3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c20:	e029      	b.n	8003c76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c3c:	e01b      	b.n	8003c76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6858      	ldr	r0, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	1c59      	adds	r1, r3, #1
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6291      	str	r1, [r2, #40]	; 0x28
 8003c56:	b2c2      	uxtb	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e00c      	b.n	8003c76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	1c58      	adds	r0, r3, #1
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	6288      	str	r0, [r1, #40]	; 0x28
 8003c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4619      	mov	r1, r3
 8003c84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d120      	bne.n	8003ccc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0220 	bic.w	r2, r2, #32
 8003c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fe8a 	bl	80039dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e002      	b.n	8003cd2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d1e:	f023 030c 	bic.w	r3, r3, #12
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4a:	f040 818b 	bne.w	8004064 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4ac1      	ldr	r2, [pc, #772]	; (8004058 <UART_SetConfig+0x37c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d005      	beq.n	8003d64 <UART_SetConfig+0x88>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4abf      	ldr	r2, [pc, #764]	; (800405c <UART_SetConfig+0x380>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f040 80bd 	bne.w	8003ede <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d64:	f7ff f962 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003d68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	461d      	mov	r5, r3
 8003d6e:	f04f 0600 	mov.w	r6, #0
 8003d72:	46a8      	mov	r8, r5
 8003d74:	46b1      	mov	r9, r6
 8003d76:	eb18 0308 	adds.w	r3, r8, r8
 8003d7a:	eb49 0409 	adc.w	r4, r9, r9
 8003d7e:	4698      	mov	r8, r3
 8003d80:	46a1      	mov	r9, r4
 8003d82:	eb18 0805 	adds.w	r8, r8, r5
 8003d86:	eb49 0906 	adc.w	r9, r9, r6
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d9e:	4688      	mov	r8, r1
 8003da0:	4691      	mov	r9, r2
 8003da2:	eb18 0005 	adds.w	r0, r8, r5
 8003da6:	eb49 0106 	adc.w	r1, r9, r6
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	461d      	mov	r5, r3
 8003db0:	f04f 0600 	mov.w	r6, #0
 8003db4:	196b      	adds	r3, r5, r5
 8003db6:	eb46 0406 	adc.w	r4, r6, r6
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	f7fc fa07 	bl	80001d0 <__aeabi_uldivmod>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4ba5      	ldr	r3, [pc, #660]	; (8004060 <UART_SetConfig+0x384>)
 8003dca:	fba3 2302 	umull	r2, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	f04f 0600 	mov.w	r6, #0
 8003ddc:	46a9      	mov	r9, r5
 8003dde:	46b2      	mov	sl, r6
 8003de0:	eb19 0309 	adds.w	r3, r9, r9
 8003de4:	eb4a 040a 	adc.w	r4, sl, sl
 8003de8:	4699      	mov	r9, r3
 8003dea:	46a2      	mov	sl, r4
 8003dec:	eb19 0905 	adds.w	r9, r9, r5
 8003df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e08:	4689      	mov	r9, r1
 8003e0a:	4692      	mov	sl, r2
 8003e0c:	eb19 0005 	adds.w	r0, r9, r5
 8003e10:	eb4a 0106 	adc.w	r1, sl, r6
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	461d      	mov	r5, r3
 8003e1a:	f04f 0600 	mov.w	r6, #0
 8003e1e:	196b      	adds	r3, r5, r5
 8003e20:	eb46 0406 	adc.w	r4, r6, r6
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	f7fc f9d2 	bl	80001d0 <__aeabi_uldivmod>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b8b      	ldr	r3, [pc, #556]	; (8004060 <UART_SetConfig+0x384>)
 8003e34:	fba3 1302 	umull	r1, r3, r3, r2
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	2164      	movs	r1, #100	; 0x64
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	3332      	adds	r3, #50	; 0x32
 8003e46:	4a86      	ldr	r2, [pc, #536]	; (8004060 <UART_SetConfig+0x384>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e54:	4498      	add	r8, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	461d      	mov	r5, r3
 8003e5a:	f04f 0600 	mov.w	r6, #0
 8003e5e:	46a9      	mov	r9, r5
 8003e60:	46b2      	mov	sl, r6
 8003e62:	eb19 0309 	adds.w	r3, r9, r9
 8003e66:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	46a2      	mov	sl, r4
 8003e6e:	eb19 0905 	adds.w	r9, r9, r5
 8003e72:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8a:	4689      	mov	r9, r1
 8003e8c:	4692      	mov	sl, r2
 8003e8e:	eb19 0005 	adds.w	r0, r9, r5
 8003e92:	eb4a 0106 	adc.w	r1, sl, r6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	f04f 0600 	mov.w	r6, #0
 8003ea0:	196b      	adds	r3, r5, r5
 8003ea2:	eb46 0406 	adc.w	r4, r6, r6
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	f7fc f991 	bl	80001d0 <__aeabi_uldivmod>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <UART_SetConfig+0x384>)
 8003eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2164      	movs	r1, #100	; 0x64
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a65      	ldr	r2, [pc, #404]	; (8004060 <UART_SetConfig+0x384>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 0207 	and.w	r2, r3, #7
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4442      	add	r2, r8
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	e26f      	b.n	80043be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ede:	f7ff f891 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003ee2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	f04f 0600 	mov.w	r6, #0
 8003eec:	46a8      	mov	r8, r5
 8003eee:	46b1      	mov	r9, r6
 8003ef0:	eb18 0308 	adds.w	r3, r8, r8
 8003ef4:	eb49 0409 	adc.w	r4, r9, r9
 8003ef8:	4698      	mov	r8, r3
 8003efa:	46a1      	mov	r9, r4
 8003efc:	eb18 0805 	adds.w	r8, r8, r5
 8003f00:	eb49 0906 	adc.w	r9, r9, r6
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f18:	4688      	mov	r8, r1
 8003f1a:	4691      	mov	r9, r2
 8003f1c:	eb18 0005 	adds.w	r0, r8, r5
 8003f20:	eb49 0106 	adc.w	r1, r9, r6
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	461d      	mov	r5, r3
 8003f2a:	f04f 0600 	mov.w	r6, #0
 8003f2e:	196b      	adds	r3, r5, r5
 8003f30:	eb46 0406 	adc.w	r4, r6, r6
 8003f34:	461a      	mov	r2, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	f7fc f94a 	bl	80001d0 <__aeabi_uldivmod>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <UART_SetConfig+0x384>)
 8003f44:	fba3 2302 	umull	r2, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	461d      	mov	r5, r3
 8003f52:	f04f 0600 	mov.w	r6, #0
 8003f56:	46a9      	mov	r9, r5
 8003f58:	46b2      	mov	sl, r6
 8003f5a:	eb19 0309 	adds.w	r3, r9, r9
 8003f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f62:	4699      	mov	r9, r3
 8003f64:	46a2      	mov	sl, r4
 8003f66:	eb19 0905 	adds.w	r9, r9, r5
 8003f6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f82:	4689      	mov	r9, r1
 8003f84:	4692      	mov	sl, r2
 8003f86:	eb19 0005 	adds.w	r0, r9, r5
 8003f8a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	461d      	mov	r5, r3
 8003f94:	f04f 0600 	mov.w	r6, #0
 8003f98:	196b      	adds	r3, r5, r5
 8003f9a:	eb46 0406 	adc.w	r4, r6, r6
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	f7fc f915 	bl	80001d0 <__aeabi_uldivmod>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <UART_SetConfig+0x384>)
 8003fae:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2164      	movs	r1, #100	; 0x64
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <UART_SetConfig+0x384>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fce:	4498      	add	r8, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	f04f 0600 	mov.w	r6, #0
 8003fd8:	46a9      	mov	r9, r5
 8003fda:	46b2      	mov	sl, r6
 8003fdc:	eb19 0309 	adds.w	r3, r9, r9
 8003fe0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fe4:	4699      	mov	r9, r3
 8003fe6:	46a2      	mov	sl, r4
 8003fe8:	eb19 0905 	adds.w	r9, r9, r5
 8003fec:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ff0:	f04f 0100 	mov.w	r1, #0
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004004:	4689      	mov	r9, r1
 8004006:	4692      	mov	sl, r2
 8004008:	eb19 0005 	adds.w	r0, r9, r5
 800400c:	eb4a 0106 	adc.w	r1, sl, r6
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	461d      	mov	r5, r3
 8004016:	f04f 0600 	mov.w	r6, #0
 800401a:	196b      	adds	r3, r5, r5
 800401c:	eb46 0406 	adc.w	r4, r6, r6
 8004020:	461a      	mov	r2, r3
 8004022:	4623      	mov	r3, r4
 8004024:	f7fc f8d4 	bl	80001d0 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	461a      	mov	r2, r3
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <UART_SetConfig+0x384>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <UART_SetConfig+0x384>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 0207 	and.w	r2, r3, #7
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4442      	add	r2, r8
 8004054:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004056:	e1b2      	b.n	80043be <UART_SetConfig+0x6e2>
 8004058:	40011000 	.word	0x40011000
 800405c:	40011400 	.word	0x40011400
 8004060:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4ad7      	ldr	r2, [pc, #860]	; (80043c8 <UART_SetConfig+0x6ec>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d005      	beq.n	800407a <UART_SetConfig+0x39e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4ad6      	ldr	r2, [pc, #856]	; (80043cc <UART_SetConfig+0x6f0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	f040 80d1 	bne.w	800421c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800407a:	f7fe ffd7 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 800407e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	469a      	mov	sl, r3
 8004084:	f04f 0b00 	mov.w	fp, #0
 8004088:	46d0      	mov	r8, sl
 800408a:	46d9      	mov	r9, fp
 800408c:	eb18 0308 	adds.w	r3, r8, r8
 8004090:	eb49 0409 	adc.w	r4, r9, r9
 8004094:	4698      	mov	r8, r3
 8004096:	46a1      	mov	r9, r4
 8004098:	eb18 080a 	adds.w	r8, r8, sl
 800409c:	eb49 090b 	adc.w	r9, r9, fp
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040b4:	4688      	mov	r8, r1
 80040b6:	4691      	mov	r9, r2
 80040b8:	eb1a 0508 	adds.w	r5, sl, r8
 80040bc:	eb4b 0609 	adc.w	r6, fp, r9
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	0094      	lsls	r4, r2, #2
 80040d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	4631      	mov	r1, r6
 80040e2:	f7fc f875 	bl	80001d0 <__aeabi_uldivmod>
 80040e6:	4603      	mov	r3, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	461a      	mov	r2, r3
 80040ec:	4bb8      	ldr	r3, [pc, #736]	; (80043d0 <UART_SetConfig+0x6f4>)
 80040ee:	fba3 2302 	umull	r2, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	469b      	mov	fp, r3
 80040fc:	f04f 0c00 	mov.w	ip, #0
 8004100:	46d9      	mov	r9, fp
 8004102:	46e2      	mov	sl, ip
 8004104:	eb19 0309 	adds.w	r3, r9, r9
 8004108:	eb4a 040a 	adc.w	r4, sl, sl
 800410c:	4699      	mov	r9, r3
 800410e:	46a2      	mov	sl, r4
 8004110:	eb19 090b 	adds.w	r9, r9, fp
 8004114:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004124:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004128:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800412c:	4689      	mov	r9, r1
 800412e:	4692      	mov	sl, r2
 8004130:	eb1b 0509 	adds.w	r5, fp, r9
 8004134:	eb4c 060a 	adc.w	r6, ip, sl
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4619      	mov	r1, r3
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	f04f 0400 	mov.w	r4, #0
 800414a:	0094      	lsls	r4, r2, #2
 800414c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004150:	008b      	lsls	r3, r1, #2
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	4628      	mov	r0, r5
 8004158:	4631      	mov	r1, r6
 800415a:	f7fc f839 	bl	80001d0 <__aeabi_uldivmod>
 800415e:	4603      	mov	r3, r0
 8004160:	460c      	mov	r4, r1
 8004162:	461a      	mov	r2, r3
 8004164:	4b9a      	ldr	r3, [pc, #616]	; (80043d0 <UART_SetConfig+0x6f4>)
 8004166:	fba3 1302 	umull	r1, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2164      	movs	r1, #100	; 0x64
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	3332      	adds	r3, #50	; 0x32
 8004178:	4a95      	ldr	r2, [pc, #596]	; (80043d0 <UART_SetConfig+0x6f4>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004184:	4498      	add	r8, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	469b      	mov	fp, r3
 800418a:	f04f 0c00 	mov.w	ip, #0
 800418e:	46d9      	mov	r9, fp
 8004190:	46e2      	mov	sl, ip
 8004192:	eb19 0309 	adds.w	r3, r9, r9
 8004196:	eb4a 040a 	adc.w	r4, sl, sl
 800419a:	4699      	mov	r9, r3
 800419c:	46a2      	mov	sl, r4
 800419e:	eb19 090b 	adds.w	r9, r9, fp
 80041a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ba:	4689      	mov	r9, r1
 80041bc:	4692      	mov	sl, r2
 80041be:	eb1b 0509 	adds.w	r5, fp, r9
 80041c2:	eb4c 060a 	adc.w	r6, ip, sl
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	0094      	lsls	r4, r2, #2
 80041da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041de:	008b      	lsls	r3, r1, #2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	4628      	mov	r0, r5
 80041e6:	4631      	mov	r1, r6
 80041e8:	f7fb fff2 	bl	80001d0 <__aeabi_uldivmod>
 80041ec:	4603      	mov	r3, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b77      	ldr	r3, [pc, #476]	; (80043d0 <UART_SetConfig+0x6f4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <UART_SetConfig+0x6f4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4442      	add	r2, r8
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	e0d0      	b.n	80043be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800421c:	f7fe fef2 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8004220:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	469a      	mov	sl, r3
 8004226:	f04f 0b00 	mov.w	fp, #0
 800422a:	46d0      	mov	r8, sl
 800422c:	46d9      	mov	r9, fp
 800422e:	eb18 0308 	adds.w	r3, r8, r8
 8004232:	eb49 0409 	adc.w	r4, r9, r9
 8004236:	4698      	mov	r8, r3
 8004238:	46a1      	mov	r9, r4
 800423a:	eb18 080a 	adds.w	r8, r8, sl
 800423e:	eb49 090b 	adc.w	r9, r9, fp
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800424e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004252:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004256:	4688      	mov	r8, r1
 8004258:	4691      	mov	r9, r2
 800425a:	eb1a 0508 	adds.w	r5, sl, r8
 800425e:	eb4b 0609 	adc.w	r6, fp, r9
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0094      	lsls	r4, r2, #2
 8004276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	461a      	mov	r2, r3
 800427e:	4623      	mov	r3, r4
 8004280:	4628      	mov	r0, r5
 8004282:	4631      	mov	r1, r6
 8004284:	f7fb ffa4 	bl	80001d0 <__aeabi_uldivmod>
 8004288:	4603      	mov	r3, r0
 800428a:	460c      	mov	r4, r1
 800428c:	461a      	mov	r2, r3
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <UART_SetConfig+0x6f4>)
 8004290:	fba3 2302 	umull	r2, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	469b      	mov	fp, r3
 800429e:	f04f 0c00 	mov.w	ip, #0
 80042a2:	46d9      	mov	r9, fp
 80042a4:	46e2      	mov	sl, ip
 80042a6:	eb19 0309 	adds.w	r3, r9, r9
 80042aa:	eb4a 040a 	adc.w	r4, sl, sl
 80042ae:	4699      	mov	r9, r3
 80042b0:	46a2      	mov	sl, r4
 80042b2:	eb19 090b 	adds.w	r9, r9, fp
 80042b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ce:	4689      	mov	r9, r1
 80042d0:	4692      	mov	sl, r2
 80042d2:	eb1b 0509 	adds.w	r5, fp, r9
 80042d6:	eb4c 060a 	adc.w	r6, ip, sl
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0094      	lsls	r4, r2, #2
 80042ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042f2:	008b      	lsls	r3, r1, #2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	4628      	mov	r0, r5
 80042fa:	4631      	mov	r1, r6
 80042fc:	f7fb ff68 	bl	80001d0 <__aeabi_uldivmod>
 8004300:	4603      	mov	r3, r0
 8004302:	460c      	mov	r4, r1
 8004304:	461a      	mov	r2, r3
 8004306:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <UART_SetConfig+0x6f4>)
 8004308:	fba3 1302 	umull	r1, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2164      	movs	r1, #100	; 0x64
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <UART_SetConfig+0x6f4>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004326:	4498      	add	r8, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	469b      	mov	fp, r3
 800432c:	f04f 0c00 	mov.w	ip, #0
 8004330:	46d9      	mov	r9, fp
 8004332:	46e2      	mov	sl, ip
 8004334:	eb19 0309 	adds.w	r3, r9, r9
 8004338:	eb4a 040a 	adc.w	r4, sl, sl
 800433c:	4699      	mov	r9, r3
 800433e:	46a2      	mov	sl, r4
 8004340:	eb19 090b 	adds.w	r9, r9, fp
 8004344:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004354:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004358:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800435c:	4689      	mov	r9, r1
 800435e:	4692      	mov	sl, r2
 8004360:	eb1b 0509 	adds.w	r5, fp, r9
 8004364:	eb4c 060a 	adc.w	r6, ip, sl
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4619      	mov	r1, r3
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	f04f 0400 	mov.w	r4, #0
 800437a:	0094      	lsls	r4, r2, #2
 800437c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	461a      	mov	r2, r3
 8004384:	4623      	mov	r3, r4
 8004386:	4628      	mov	r0, r5
 8004388:	4631      	mov	r1, r6
 800438a:	f7fb ff21 	bl	80001d0 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	461a      	mov	r2, r3
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <UART_SetConfig+0x6f4>)
 8004396:	fba3 1302 	umull	r1, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2164      	movs	r1, #100	; 0x64
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <UART_SetConfig+0x6f4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4442      	add	r2, r8
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	e7ff      	b.n	80043be <UART_SetConfig+0x6e2>
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c8:	40011000 	.word	0x40011000
 80043cc:	40011400 	.word	0x40011400
 80043d0:	51eb851f 	.word	0x51eb851f

080043d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d4:	b084      	sub	sp, #16
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	f107 001c 	add.w	r0, r7, #28
 80043e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d122      	bne.n	8004432 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f94a 	bl	80046c0 <USB_CoreReset>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e01a      	b.n	8004468 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f93e 	bl	80046c0 <USB_CoreReset>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
 800445a:	e005      	b.n	8004468 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10b      	bne.n	8004486 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f043 0206 	orr.w	r2, r3, #6
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004492:	b004      	add	sp, #16
 8004494:	4770      	bx	lr

08004496 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 0201 	bic.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
 8004504:	e00b      	b.n	800451e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e001      	b.n	800451e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e003      	b.n	8004526 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800451e:	2032      	movs	r0, #50	; 0x32
 8004520:	f7fc f818 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <USB_FlushTxFifo+0x48>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d0f0      	beq.n	800454a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	00030d40 	.word	0x00030d40

0800457c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2210      	movs	r2, #16
 800458c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <USB_FlushRxFifo+0x40>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d0f0      	beq.n	800458e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	00030d40 	.word	0x00030d40

080045c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	71fb      	strb	r3, [r7, #7]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80045de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d11a      	bne.n	800461c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045e6:	88bb      	ldrh	r3, [r7, #4]
 80045e8:	3303      	adds	r3, #3
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e00f      	b.n	8004614 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	031a      	lsls	r2, r3, #12
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	461a      	mov	r2, r3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3304      	adds	r3, #4
 800460c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3301      	adds	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d3eb      	bcc.n	80045f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3724      	adds	r7, #36	; 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800462a:	b480      	push	{r7}
 800462c:	b089      	sub	sp, #36	; 0x24
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	4613      	mov	r3, r2
 8004636:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	3303      	adds	r3, #3
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e00b      	b.n	8004666 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	601a      	str	r2, [r3, #0]
    pDest++;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	3301      	adds	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3ef      	bcc.n	800464e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800466e:	69fb      	ldr	r3, [r7, #28]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3724      	adds	r7, #36	; 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004694:	68fb      	ldr	r3, [r7, #12]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0301 	and.w	r3, r3, #1
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <USB_CoreReset+0x64>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e01b      	b.n	8004716 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	daf2      	bge.n	80046cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <USB_CoreReset+0x64>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e006      	b.n	8004716 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d0f0      	beq.n	80046f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	00030d40 	.word	0x00030d40

08004728 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	2b01      	cmp	r3, #1
 800477e:	d10a      	bne.n	8004796 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e014      	b.n	80047c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e009      	b.n	80047c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80047c0:	2110      	movs	r1, #16
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff feb4 	bl	8004530 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fed7 	bl	800457c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e015      	b.n	8004800 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	2300      	movs	r3, #0
 80047f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	429a      	cmp	r2, r3
 8004806:	d3e5      	bcc.n	80047d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004808:	2101      	movs	r1, #1
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8ac 	bl	8004968 <USB_DriveVbus>

  HAL_Delay(200U);
 8004810:	20c8      	movs	r0, #200	; 0xc8
 8004812:	f7fb fe9f 	bl	8000554 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a14      	ldr	r2, [pc, #80]	; (800488c <USB_HostInit+0x164>)
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a13      	ldr	r2, [pc, #76]	; (8004890 <USB_HostInit+0x168>)
 8004842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004846:	e009      	b.n	800485c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a10      	ldr	r2, [pc, #64]	; (8004894 <USB_HostInit+0x16c>)
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a10      	ldr	r2, [pc, #64]	; (8004898 <USB_HostInit+0x170>)
 8004858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <USB_HostInit+0x174>)
 8004874:	4313      	orrs	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004886:	b004      	add	sp, #16
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	01000200 	.word	0x01000200
 8004890:	00e00300 	.word	0x00e00300
 8004894:	00600080 	.word	0x00600080
 8004898:	004000e0 	.word	0x004000e0
 800489c:	a3200008 	.word	0xa3200008

080048a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e8:	461a      	mov	r2, r3
 80048ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	e009      	b.n	8004906 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d106      	bne.n	8004906 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fe:	461a      	mov	r2, r3
 8004900:	f241 7370 	movw	r3, #6000	; 0x1770
 8004904:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800493e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004942:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004944:	2064      	movs	r0, #100	; 0x64
 8004946:	f7fb fe05 	bl	8000554 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004958:	200a      	movs	r0, #10
 800495a:	f7fb fdfb 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800498c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <USB_DriveVbus+0x44>
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d106      	bne.n	80049ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d109      	bne.n	80049cc <USB_DriveVbus+0x64>
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0c5b      	lsrs	r3, r3, #17
 80049f8:	f003 0303 	and.w	r3, r3, #3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	b29b      	uxth	r3, r3
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	70fb      	strb	r3, [r7, #3]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70bb      	strb	r3, [r7, #2]
 8004a42:	4613      	mov	r3, r2
 8004a44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d87e      	bhi.n	8004b68 <USB_HC_Init+0x13c>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <USB_HC_Init+0x44>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004b2b 	.word	0x08004b2b
 8004a78:	08004a81 	.word	0x08004a81
 8004a7c:	08004aed 	.word	0x08004aed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da10      	bge.n	8004abe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004abc:	e057      	b.n	8004b6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d051      	beq.n	8004b6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ae8:	60d3      	str	r3, [r2, #12]
      break;
 8004aea:	e040      	b.n	8004b6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	f240 639d 	movw	r3, #1693	; 0x69d
 8004afe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da34      	bge.n	8004b72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b28:	e023      	b.n	8004b72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	461a      	mov	r2, r3
 8004b38:	f240 2325 	movw	r3, #549	; 0x225
 8004b3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da17      	bge.n	8004b76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b66:	e006      	b.n	8004b76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6c:	e004      	b.n	8004b78 <USB_HC_Init+0x14c>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <USB_HC_Init+0x14c>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <USB_HC_Init+0x14c>
      break;
 8004b76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b92:	4313      	orrs	r3, r2
 8004b94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da03      	bge.n	8004bb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e001      	b.n	8004bb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d103      	bne.n	8004bc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e001      	b.n	8004bca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bca:	787b      	ldrb	r3, [r7, #1]
 8004bcc:	059b      	lsls	r3, r3, #22
 8004bce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bd2:	78bb      	ldrb	r3, [r7, #2]
 8004bd4:	02db      	lsls	r3, r3, #11
 8004bd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004be0:	049b      	lsls	r3, r3, #18
 8004be2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004be6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	0159      	lsls	r1, r3, #5
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d10f      	bne.n	8004c30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop

08004c40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	; 0x30
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d028      	beq.n	8004cbc <USB_HC_StartXfer+0x7c>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d124      	bne.n	8004cbc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <USB_HC_StartXfer+0x50>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	795b      	ldrb	r3, [r3, #5]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	4619      	mov	r1, r3
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa2e 	bl	80050e8 <USB_DoPing>
      return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e112      	b.n	8004eb6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d112      	bne.n	8004cbc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004cb4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d018      	beq.n	8004cf6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	8912      	ldrh	r2, [r2, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	8912      	ldrh	r2, [r2, #8]
 8004cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cdc:	8b7b      	ldrh	r3, [r7, #26]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d90b      	bls.n	8004cfa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	8912      	ldrh	r2, [r2, #8]
 8004cec:	fb02 f203 	mul.w	r2, r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	611a      	str	r2, [r3, #16]
 8004cf4:	e001      	b.n	8004cfa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	8912      	ldrh	r2, [r2, #8]
 8004d08:	fb02 f203 	mul.w	r2, r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d1a:	04d9      	lsls	r1, r3, #19
 8004d1c:	4b68      	ldr	r3, [pc, #416]	; (8004ec0 <USB_HC_StartXfer+0x280>)
 8004d1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	7a9b      	ldrb	r3, [r3, #10]
 8004d26:	075b      	lsls	r3, r3, #29
 8004d28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d2c:	69f9      	ldr	r1, [r7, #28]
 8004d2e:	0148      	lsls	r0, r1, #5
 8004d30:	6a39      	ldr	r1, [r7, #32]
 8004d32:	4401      	add	r1, r0
 8004d34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	460a      	mov	r2, r1
 8004d54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	7e7b      	ldrb	r3, [r7, #25]
 8004d9e:	075b      	lsls	r3, r3, #29
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	0148      	lsls	r0, r1, #5
 8004da4:	6a39      	ldr	r1, [r7, #32]
 8004da6:	4401      	add	r1, r0
 8004da8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a41      	ldr	r2, [pc, #260]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dc0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dc2:	4b40      	ldr	r3, [pc, #256]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dca:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	4a39      	ldr	r2, [pc, #228]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e005      	b.n	8004df0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004de4:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004df0:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	4a32      	ldr	r2, [pc, #200]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004dfa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <USB_HC_StartXfer+0x284>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d14e      	bne.n	8004eb4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d14a      	bne.n	8004eb4 <USB_HC_StartXfer+0x274>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d046      	beq.n	8004eb4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	79db      	ldrb	r3, [r3, #7]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d830      	bhi.n	8004e90 <USB_HC_StartXfer+0x250>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <USB_HC_StartXfer+0x1f4>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e69 	.word	0x08004e69
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004e69 	.word	0x08004e69
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	3303      	adds	r3, #3
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e4e:	8afa      	ldrh	r2, [r7, #22]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d91c      	bls.n	8004e94 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e66:	e015      	b.n	8004e94 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	3303      	adds	r3, #3
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e72:	8afa      	ldrh	r2, [r7, #22]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90a      	bls.n	8004e98 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e8e:	e003      	b.n	8004e98 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <USB_HC_StartXfer+0x25a>
          break;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <USB_HC_StartXfer+0x25a>
          break;
 8004e98:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	68d9      	ldr	r1, [r3, #12]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	785a      	ldrb	r2, [r3, #1]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	b298      	uxth	r0, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4603      	mov	r3, r0
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff fb86 	bl	80045c0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	1ff80000 	.word	0x1ff80000
 8004ec4:	200000b0 	.word	0x200000b0

08004ec8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	b29b      	uxth	r3, r3
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	0c9b      	lsrs	r3, r3, #18
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <USB_HC_Halt+0x3a>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d16c      	bne.n	8004ffe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d143      	bne.n	8004fd8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004faa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fbc:	d81d      	bhi.n	8004ffa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd4:	d0ec      	beq.n	8004fb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fd6:	e080      	b.n	80050da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ff8:	e06f      	b.n	80050da <USB_HC_Halt+0x1f0>
          break;
 8004ffa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ffc:	e06d      	b.n	80050da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	440a      	add	r2, r1
 8005014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d143      	bne.n	80050b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	440a      	add	r2, r1
 8005044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800504c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	440a      	add	r2, r1
 8005064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800506c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	440a      	add	r2, r1
 8005084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800508c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3301      	adds	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509a:	d81d      	bhi.n	80050d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b2:	d0ec      	beq.n	800508e <USB_HC_Halt+0x1a4>
 80050b4:	e011      	b.n	80050da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e000      	b.n	80050da <USB_HC_Halt+0x1f0>
          break;
 80050d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	04da      	lsls	r2, r3, #19
 8005104:	4b15      	ldr	r3, [pc, #84]	; (800515c <USB_DoPing+0x74>)
 8005106:	4013      	ands	r3, r2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	440a      	add	r2, r1
 8005110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	461a      	mov	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	1ff80000 	.word	0x1ff80000

08005160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff f9a1 	bl	80044b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005176:	2110      	movs	r1, #16
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff f9d9 	bl	8004530 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff f9fc 	bl	800457c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e01f      	b.n	80051ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	3301      	adds	r3, #1
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d9dc      	bls.n	800518a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e034      	b.n	8005240 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521c:	d80c      	bhi.n	8005238 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005234:	d0ec      	beq.n	8005210 <USB_StopHost+0xb0>
 8005236:	e000      	b.n	800523a <USB_StopHost+0xda>
        break;
 8005238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d9c7      	bls.n	80051d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524c:	461a      	mov	r2, r3
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 32ff 	mov.w	r2, #4294967295
 800525a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff f91a 	bl	8004496 <USB_EnableGlobalInt>

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b089      	sub	sp, #36	; 0x24
 8005270:	af04      	add	r7, sp, #16
 8005272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005274:	2301      	movs	r3, #1
 8005276:	2202      	movs	r2, #2
 8005278:	2102      	movs	r1, #2
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fcba 	bl	8005bf4 <USBH_FindInterface>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2bff      	cmp	r3, #255	; 0xff
 8005288:	d002      	beq.n	8005290 <USBH_CDC_InterfaceInit+0x24>
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d901      	bls.n	8005294 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005290:	2302      	movs	r3, #2
 8005292:	e13d      	b.n	8005510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fc8f 	bl	8005bbc <USBH_SelectInterface>
 800529e:	4603      	mov	r3, r0
 80052a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e131      	b.n	8005510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80052b2:	2050      	movs	r0, #80	; 0x50
 80052b4:	f006 f92a 	bl	800b50c <malloc>
 80052b8:	4603      	mov	r3, r0
 80052ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e11f      	b.n	8005510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80052d0:	2250      	movs	r2, #80	; 0x50
 80052d2:	2100      	movs	r1, #0
 80052d4:	68b8      	ldr	r0, [r7, #8]
 80052d6:	f006 f934 	bl	800b542 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	211a      	movs	r1, #26
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da15      	bge.n	800531e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	211a      	movs	r1, #26
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	211a      	movs	r1, #26
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f002 f894 	bl	8007452 <USBH_AllocPipe>
 800532a:	4603      	mov	r3, r0
 800532c:	461a      	mov	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	7819      	ldrb	r1, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	7858      	ldrb	r0, [r3, #1]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	8952      	ldrh	r2, [r2, #10]
 800534a:	9202      	str	r2, [sp, #8]
 800534c:	2203      	movs	r2, #3
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4623      	mov	r3, r4
 8005354:	4602      	mov	r2, r0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f002 f84c 	bl	80073f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f005 fff7 	bl	800b358 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800536a:	2300      	movs	r3, #0
 800536c:	2200      	movs	r2, #0
 800536e:	210a      	movs	r1, #10
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fc3f 	bl	8005bf4 <USBH_FindInterface>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2bff      	cmp	r3, #255	; 0xff
 800537e:	d002      	beq.n	8005386 <USBH_CDC_InterfaceInit+0x11a>
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d901      	bls.n	800538a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005386:	2302      	movs	r3, #2
 8005388:	e0c2      	b.n	8005510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	211a      	movs	r1, #26
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b25b      	sxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da16      	bge.n	80053d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	211a      	movs	r1, #26
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	211a      	movs	r1, #26
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	835a      	strh	r2, [r3, #26]
 80053ce:	e015      	b.n	80053fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	211a      	movs	r1, #26
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	211a      	movs	r1, #26
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	211a      	movs	r1, #26
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	f203 3356 	addw	r3, r3, #854	; 0x356
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	b25b      	sxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	da16      	bge.n	8005442 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	211a      	movs	r1, #26
 800541a:	fb01 f303 	mul.w	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	211a      	movs	r1, #26
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	835a      	strh	r2, [r3, #26]
 8005440:	e015      	b.n	800546e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	211a      	movs	r1, #26
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	211a      	movs	r1, #26
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	7b9b      	ldrb	r3, [r3, #14]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 ffec 	bl	8007452 <USBH_AllocPipe>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	7bdb      	ldrb	r3, [r3, #15]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 ffe2 	bl	8007452 <USBH_AllocPipe>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	7b59      	ldrb	r1, [r3, #13]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	7b98      	ldrb	r0, [r3, #14]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	8b12      	ldrh	r2, [r2, #24]
 80054ae:	9202      	str	r2, [sp, #8]
 80054b0:	2202      	movs	r2, #2
 80054b2:	9201      	str	r2, [sp, #4]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4623      	mov	r3, r4
 80054b8:	4602      	mov	r2, r0
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 ff9a 	bl	80073f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	7b19      	ldrb	r1, [r3, #12]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	7bd8      	ldrb	r0, [r3, #15]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	8b52      	ldrh	r2, [r2, #26]
 80054d8:	9202      	str	r2, [sp, #8]
 80054da:	2202      	movs	r2, #2
 80054dc:	9201      	str	r2, [sp, #4]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4623      	mov	r3, r4
 80054e2:	4602      	mov	r2, r0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 ff85 	bl	80073f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	7b5b      	ldrb	r3, [r3, #13]
 80054f6:	2200      	movs	r2, #0
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f005 ff2c 	bl	800b358 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	7b1b      	ldrb	r3, [r3, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f005 ff25 	bl	800b358 <USBH_LL_SetToggle>

  return USBH_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 ff7a 	bl	8007432 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 ffa5 	bl	8007494 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	7b1b      	ldrb	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	7b1b      	ldrb	r3, [r3, #12]
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 ff67 	bl	8007432 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	7b1b      	ldrb	r3, [r3, #12]
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 ff92 	bl	8007494 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	7b5b      	ldrb	r3, [r3, #13]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	7b5b      	ldrb	r3, [r3, #13]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 ff54 	bl	8007432 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	7b5b      	ldrb	r3, [r3, #13]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 ff7f 	bl	8007494 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f005 ffb3 	bl	800b51c <free>
    phost->pActiveClass->pData = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3340      	adds	r3, #64	; 0x40
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8b1 	bl	800574a <GetLineCoding>
 80055e8:	4603      	mov	r3, r0
 80055ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80055f8:	2102      	movs	r1, #2
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005628:	2b04      	cmp	r3, #4
 800562a:	d877      	bhi.n	800571c <USBH_CDC_Process+0x114>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <USBH_CDC_Process+0x2c>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005649 	.word	0x08005649
 8005638:	0800564f 	.word	0x0800564f
 800563c:	0800567f 	.word	0x0800567f
 8005640:	080056f3 	.word	0x080056f3
 8005644:	08005701 	.word	0x08005701
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e06d      	b.n	800572a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f897 	bl	8005788 <SetLineCoding>
 800565a:	4603      	mov	r3, r0
 800565c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800566c:	e058      	b.n	8005720 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d055      	beq.n	8005720 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2204      	movs	r2, #4
 8005678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800567c:	e050      	b.n	8005720 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3340      	adds	r3, #64	; 0x40
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f860 	bl	800574a <GetLineCoding>
 800568a:	4603      	mov	r3, r0
 800568c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d126      	bne.n	80056e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a6:	791b      	ldrb	r3, [r3, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d13b      	bne.n	8005724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d133      	bne.n	8005724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d12b      	bne.n	8005724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d124      	bne.n	8005724 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f984 	bl	80059e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80056e0:	e020      	b.n	8005724 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d01d      	beq.n	8005724 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2204      	movs	r2, #4
 80056ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80056f0:	e018      	b.n	8005724 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f867 	bl	80057c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8f8 	bl	80058ee <CDC_ProcessReception>
      break;
 80056fe:	e014      	b.n	800572a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005700:	2100      	movs	r1, #0
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f001 f953 	bl	80069ae <USBH_ClrFeature>
 8005708:	4603      	mov	r3, r0
 800570a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800571a:	e005      	b.n	8005728 <USBH_CDC_Process+0x120>

    default:
      break;
 800571c:	bf00      	nop
 800571e:	e004      	b.n	800572a <USBH_CDC_Process+0x122>
      break;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <USBH_CDC_Process+0x122>
      break;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <USBH_CDC_Process+0x122>
      break;
 8005728:	bf00      	nop

  }

  return status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	22a1      	movs	r2, #161	; 0xa1
 8005758:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2221      	movs	r2, #33	; 0x21
 800575e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2207      	movs	r2, #7
 8005770:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2207      	movs	r2, #7
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 faf8 	bl	8006d6e <USBH_CtlReq>
 800577e:	4603      	mov	r3, r0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2221      	movs	r2, #33	; 0x21
 8005796:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2207      	movs	r2, #7
 80057ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2207      	movs	r2, #7
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fad9 	bl	8006d6e <USBH_CtlReq>
 80057bc:	4603      	mov	r3, r0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af02      	add	r7, sp, #8
 80057cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d002      	beq.n	80057ec <CDC_ProcessTransmission+0x26>
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d025      	beq.n	8005836 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80057ea:	e07c      	b.n	80058e6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	8b12      	ldrh	r2, [r2, #24]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d90c      	bls.n	8005812 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8b1a      	ldrh	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	7b58      	ldrb	r0, [r3, #13]
 8005804:	2301      	movs	r3, #1
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4603      	mov	r3, r0
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 fdaf 	bl	800736e <USBH_BulkSendData>
 8005810:	e00c      	b.n	800582c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7b58      	ldrb	r0, [r3, #13]
 8005820:	2301      	movs	r3, #1
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4603      	mov	r3, r0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fda1 	bl	800736e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005834:	e057      	b.n	80058e6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	7b5b      	ldrb	r3, [r3, #13]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f005 fd61 	bl	800b304 <USBH_LL_GetURBState>
 8005842:	4603      	mov	r3, r0
 8005844:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d136      	bne.n	80058ba <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	8b12      	ldrh	r2, [r2, #24]
 8005854:	4293      	cmp	r3, r2
 8005856:	d90e      	bls.n	8005876 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	8b12      	ldrh	r2, [r2, #24]
 8005860:	1a9a      	subs	r2, r3, r2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	8b12      	ldrh	r2, [r2, #24]
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]
 8005874:	e002      	b.n	800587c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800588c:	e006      	b.n	800589c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f892 	bl	80059c0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2204      	movs	r2, #4
 80058a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80058b0:	2200      	movs	r2, #0
 80058b2:	4619      	mov	r1, r3
 80058b4:	f001 ff1e 	bl	80076f4 <osMessagePut>
      break;
 80058b8:	e014      	b.n	80058e4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d111      	bne.n	80058e4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80058dc:	2200      	movs	r2, #0
 80058de:	4619      	mov	r1, r3
 80058e0:	f001 ff08 	bl	80076f4 <osMessagePut>
      break;
 80058e4:	bf00      	nop
  }
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005900:	2300      	movs	r3, #0
 8005902:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800590a:	2b03      	cmp	r3, #3
 800590c:	d002      	beq.n	8005914 <CDC_ProcessReception+0x26>
 800590e:	2b04      	cmp	r3, #4
 8005910:	d00e      	beq.n	8005930 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005912:	e051      	b.n	80059b8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6a19      	ldr	r1, [r3, #32]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	8b5a      	ldrh	r2, [r3, #26]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	7b1b      	ldrb	r3, [r3, #12]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fd49 	bl	80073b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2204      	movs	r2, #4
 800592a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800592e:	e043      	b.n	80059b8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	7b1b      	ldrb	r3, [r3, #12]
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f005 fce4 	bl	800b304 <USBH_LL_GetURBState>
 800593c:	4603      	mov	r3, r0
 800593e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d137      	bne.n	80059b6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	7b1b      	ldrb	r3, [r3, #12]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f005 fc47 	bl	800b1e0 <USBH_LL_GetLastXferSize>
 8005952:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	429a      	cmp	r2, r3
 800595c:	d016      	beq.n	800598c <CDC_ProcessReception+0x9e>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	8b5b      	ldrh	r3, [r3, #26]
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4293      	cmp	r3, r2
 8005968:	d910      	bls.n	800598c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6a1a      	ldr	r2, [r3, #32]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	441a      	add	r2, r3
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800598a:	e006      	b.n	800599a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f81d 	bl	80059d4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80059ae:	2200      	movs	r2, #0
 80059b0:	4619      	mov	r1, r3
 80059b2:	f001 fe9f 	bl	80076f4 <osMessagePut>
      break;
 80059b6:	bf00      	nop
  }
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80059fc:	b5b0      	push	{r4, r5, r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a10:	2302      	movs	r3, #2
 8005a12:	e04d      	b.n	8005ab0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	79fa      	ldrb	r2, [r7, #7]
 8005a18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f847 	bl	8005ac0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <USBH_Init+0xbc>)
 8005a62:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8005a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fe14 	bl	80076a0 <osMessageCreate>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <USBH_Init+0xc0>)
 8005a82:	f107 0414 	add.w	r4, r7, #20
 8005a86:	461d      	mov	r5, r3
 8005a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fd6d 	bl	800757a <osThreadCreate>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f005 fae7 	bl	800b07c <USBH_LL_Init>

  return USBH_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3740      	adds	r7, #64	; 0x40
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab8:	0800b6e4 	.word	0x0800b6e4
 8005abc:	0800b700 	.word	0x0800b700

08005ac0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e009      	b.n	8005ae6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	33e0      	adds	r3, #224	; 0xe0
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	2200      	movs	r2, #0
 8005ade:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b0e      	cmp	r3, #14
 8005aea:	d9f2      	bls.n	8005ad2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e009      	b.n	8005b06 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d3f1      	bcc.n	8005af2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2240      	movs	r2, #64	; 0x40
 8005b32:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d016      	beq.n	8005baa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10e      	bne.n	8005ba4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	33de      	adds	r3, #222	; 0xde
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	e004      	b.n	8005bae <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e001      	b.n	8005bae <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005baa:	2302      	movs	r3, #2
 8005bac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d204      	bcs.n	8005be2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005be0:	e001      	b.n	8005be6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005be2:	2302      	movs	r3, #2
 8005be4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	461a      	mov	r2, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	70fb      	strb	r3, [r7, #3]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70bb      	strb	r3, [r7, #2]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005c1c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c1e:	e025      	b.n	8005c6c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	221a      	movs	r2, #26
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	3308      	adds	r3, #8
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3302      	adds	r3, #2
 8005c30:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	795b      	ldrb	r3, [r3, #5]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d002      	beq.n	8005c42 <USBH_FindInterface+0x4e>
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2bff      	cmp	r3, #255	; 0xff
 8005c40:	d111      	bne.n	8005c66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c46:	78ba      	ldrb	r2, [r7, #2]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d002      	beq.n	8005c52 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c4c:	78bb      	ldrb	r3, [r7, #2]
 8005c4e:	2bff      	cmp	r3, #255	; 0xff
 8005c50:	d109      	bne.n	8005c66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c56:	787a      	ldrb	r2, [r7, #1]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d002      	beq.n	8005c62 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c5c:	787b      	ldrb	r3, [r7, #1]
 8005c5e:	2bff      	cmp	r3, #255	; 0xff
 8005c60:	d101      	bne.n	8005c66 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	e006      	b.n	8005c74 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d9d6      	bls.n	8005c20 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005c72:	23ff      	movs	r3, #255	; 0xff
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f005 fa33 	bl	800b0f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005c8e:	2101      	movs	r1, #1
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f005 fb4a 	bl	800b32a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af04      	add	r7, sp, #16
 8005ca6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d102      	bne.n	8005cc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b0b      	cmp	r3, #11
 8005cca:	f200 823c 	bhi.w	8006146 <USBH_Process+0x4a6>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <USBH_Process+0x34>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005d53 	.word	0x08005d53
 8005cdc:	08005dd7 	.word	0x08005dd7
 8005ce0:	080060c5 	.word	0x080060c5
 8005ce4:	08006147 	.word	0x08006147
 8005ce8:	08005e97 	.word	0x08005e97
 8005cec:	0800604f 	.word	0x0800604f
 8005cf0:	08005ee9 	.word	0x08005ee9
 8005cf4:	08005f25 	.word	0x08005f25
 8005cf8:	08005f5f 	.word	0x08005f5f
 8005cfc:	08005fa7 	.word	0x08005fa7
 8005d00:	080060ad 	.word	0x080060ad
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 821c 	beq.w	800614a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005d18:	20c8      	movs	r0, #200	; 0xc8
 8005d1a:	f005 fb50 	bl	800b3be <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f005 fa43 	bl	800b1aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f001 fcd2 	bl	80076f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d50:	e1fb      	b.n	800614a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e025      	b.n	8005db8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d76:	d914      	bls.n	8005da2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d903      	bls.n	8005d9a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	220d      	movs	r2, #13
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e00e      	b.n	8005db8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e00a      	b.n	8005db8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005da8:	f103 020a 	add.w	r2, r3, #10
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005db2:	200a      	movs	r0, #10
 8005db4:	f005 fb03 	bl	800b3be <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4619      	mov	r1, r3
 8005dd0:	f001 fc90 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005dd4:	e1c0      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005de6:	2104      	movs	r1, #4
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005dec:	2064      	movs	r0, #100	; 0x64
 8005dee:	f005 fae6 	bl	800b3be <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f005 f9b4 	bl	800b160 <USBH_LL_GetSpeed>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2205      	movs	r2, #5
 8005e06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fb21 	bl	8007452 <USBH_AllocPipe>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fb19 	bl	8007452 <USBH_AllocPipe>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7919      	ldrb	r1, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005e3c:	b292      	uxth	r2, r2
 8005e3e:	9202      	str	r2, [sp, #8]
 8005e40:	2200      	movs	r2, #0
 8005e42:	9201      	str	r2, [sp, #4]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	4603      	mov	r3, r0
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fad2 	bl	80073f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7959      	ldrb	r1, [r3, #5]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e64:	b292      	uxth	r2, r2
 8005e66:	9202      	str	r2, [sp, #8]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	9201      	str	r2, [sp, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2200      	movs	r2, #0
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fabe 	bl	80073f4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f001 fc30 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e94:	e160      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f964 	bl	8006164 <USBH_HandleEnum>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8152 	bne.w	800614e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d103      	bne.n	8005ec4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2205      	movs	r2, #5
 8005ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f001 fc07 	bl	80076f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005ee6:	e132      	b.n	800614e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 812f 	beq.w	8006152 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005efa:	2101      	movs	r1, #1
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2208      	movs	r2, #8
 8005f04:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2205      	movs	r2, #5
 8005f0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f001 fbe9 	bl	80076f4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f22:	e116      	b.n	8006152 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fcf6 	bl	8006920 <USBH_SetCfg>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2209      	movs	r2, #9
 8005f3e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005f54:	2200      	movs	r2, #0
 8005f56:	4619      	mov	r1, r3
 8005f58:	f001 fbcc 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f5c:	e0fc      	b.n	8006158 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fcf9 	bl	8006966 <USBH_SetFeature>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	220a      	movs	r2, #10
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e002      	b.n	8005f88 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	220a      	movs	r2, #10
 8005f86:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f001 fba8 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fa4:	e0d8      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d03f      	beq.n	8006030 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e016      	b.n	8005fec <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005fbe:	7bfa      	ldrb	r2, [r7, #15]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	32de      	adds	r2, #222	; 0xde
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	791a      	ldrb	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d108      	bne.n	8005fe6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32de      	adds	r2, #222	; 0xde
 8005fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005fe4:	e005      	b.n	8005ff2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0e5      	beq.n	8005fbe <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2206      	movs	r2, #6
 8006012:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800601a:	2103      	movs	r1, #3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	e006      	b.n	8006030 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	220d      	movs	r2, #13
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e002      	b.n	8006030 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	220d      	movs	r2, #13
 800602e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2205      	movs	r2, #5
 8006034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	f001 fb54 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800604c:	e084      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	220b      	movs	r2, #11
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	e00a      	b.n	800608e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d106      	bne.n	800608e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	220d      	movs	r2, #13
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	220d      	movs	r2, #13
 800608c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2205      	movs	r2, #5
 8006092:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060a2:	2200      	movs	r2, #0
 80060a4:	4619      	mov	r1, r3
 80060a6:	f001 fb25 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060aa:	e055      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04f      	beq.n	8006156 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
      }
      break;
 80060c2:	e048      	b.n	8006156 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fcf7 	bl	8005ac0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006100:	2105      	movs	r1, #5
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d107      	bne.n	8006122 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fdb0 	bl	8005c80 <USBH_Start>
 8006120:	e002      	b.n	8006128 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f004 ffe6 	bl	800b0f4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800613c:	2200      	movs	r2, #0
 800613e:	4619      	mov	r1, r3
 8006140:	f001 fad8 	bl	80076f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006144:	e008      	b.n	8006158 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006146:	bf00      	nop
 8006148:	e006      	b.n	8006158 <USBH_Process+0x4b8>
      break;
 800614a:	bf00      	nop
 800614c:	e004      	b.n	8006158 <USBH_Process+0x4b8>
      break;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <USBH_Process+0x4b8>
    break;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <USBH_Process+0x4b8>
      break;
 8006156:	bf00      	nop
  }
  return USBH_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop

08006164 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af04      	add	r7, sp, #16
 800616a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006170:	2301      	movs	r3, #1
 8006172:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b07      	cmp	r3, #7
 800617a:	f200 8208 	bhi.w	800658e <USBH_HandleEnum+0x42a>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <USBH_HandleEnum+0x20>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061a5 	.word	0x080061a5
 8006188:	08006263 	.word	0x08006263
 800618c:	080062cd 	.word	0x080062cd
 8006190:	0800635b 	.word	0x0800635b
 8006194:	080063c5 	.word	0x080063c5
 8006198:	08006435 	.word	0x08006435
 800619c:	080064d1 	.word	0x080064d1
 80061a0:	0800654f 	.word	0x0800654f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80061a4:	2108      	movs	r1, #8
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 faea 	bl	8006780 <USBH_Get_DevDesc>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d130      	bne.n	8006218 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7919      	ldrb	r1, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061da:	b292      	uxth	r2, r2
 80061dc:	9202      	str	r2, [sp, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	9201      	str	r2, [sp, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	4603      	mov	r3, r0
 80061e6:	2280      	movs	r2, #128	; 0x80
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f903 	bl	80073f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7959      	ldrb	r1, [r3, #5]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006202:	b292      	uxth	r2, r2
 8006204:	9202      	str	r2, [sp, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	9201      	str	r2, [sp, #4]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4603      	mov	r3, r0
 800620e:	2200      	movs	r2, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f8ef 	bl	80073f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006216:	e1bc      	b.n	8006592 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	2b03      	cmp	r3, #3
 800621c:	f040 81b9 	bne.w	8006592 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006226:	3301      	adds	r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006236:	2b03      	cmp	r3, #3
 8006238:	d903      	bls.n	8006242 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	220d      	movs	r2, #13
 800623e:	701a      	strb	r2, [r3, #0]
      break;
 8006240:	e1a7      	b.n	8006592 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	795b      	ldrb	r3, [r3, #5]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f923 	bl	8007494 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	791b      	ldrb	r3, [r3, #4]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f91d 	bl	8007494 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
      break;
 8006260:	e197      	b.n	8006592 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006262:	2112      	movs	r1, #18
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa8b 	bl	8006780 <USBH_Get_DevDesc>
 800626a:	4603      	mov	r3, r0
 800626c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800627a:	e18c      	b.n	8006596 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b03      	cmp	r3, #3
 8006280:	f040 8189 	bne.w	8006596 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800629a:	2b03      	cmp	r3, #3
 800629c:	d903      	bls.n	80062a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	220d      	movs	r2, #13
 80062a2:	701a      	strb	r2, [r3, #0]
      break;
 80062a4:	e177      	b.n	8006596 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	795b      	ldrb	r3, [r3, #5]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f8f1 	bl	8007494 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 f8eb 	bl	8007494 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	e164      	b.n	8006596 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80062cc:	2101      	movs	r1, #1
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fb02 	bl	80068d8 <USBH_SetAddress>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d132      	bne.n	8006344 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80062de:	2002      	movs	r0, #2
 80062e0:	f005 f86d 	bl	800b3be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2203      	movs	r2, #3
 80062f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	7919      	ldrb	r1, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006306:	b292      	uxth	r2, r2
 8006308:	9202      	str	r2, [sp, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	9201      	str	r2, [sp, #4]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4603      	mov	r3, r0
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f86d 	bl	80073f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7959      	ldrb	r1, [r3, #5]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800632e:	b292      	uxth	r2, r2
 8006330:	9202      	str	r2, [sp, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	9201      	str	r2, [sp, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4603      	mov	r3, r0
 800633a:	2200      	movs	r2, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f859 	bl	80073f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006342:	e12a      	b.n	800659a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b03      	cmp	r3, #3
 8006348:	f040 8127 	bne.w	800659a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	220d      	movs	r2, #13
 8006350:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	705a      	strb	r2, [r3, #1]
      break;
 8006358:	e11f      	b.n	800659a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800635a:	2109      	movs	r1, #9
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa37 	bl	80067d0 <USBH_Get_CfgDesc>
 8006362:	4603      	mov	r3, r0
 8006364:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2204      	movs	r2, #4
 8006370:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006372:	e114      	b.n	800659e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b03      	cmp	r3, #3
 8006378:	f040 8111 	bne.w	800659e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006382:	3301      	adds	r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006392:	2b03      	cmp	r3, #3
 8006394:	d903      	bls.n	800639e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	220d      	movs	r2, #13
 800639a:	701a      	strb	r2, [r3, #0]
      break;
 800639c:	e0ff      	b.n	800659e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	795b      	ldrb	r3, [r3, #5]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f875 	bl	8007494 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f86f 	bl	8007494 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
      break;
 80063c2:	e0ec      	b.n	800659e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9ff 	bl	80067d0 <USBH_Get_CfgDesc>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2205      	movs	r2, #5
 80063e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063e2:	e0de      	b.n	80065a2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	f040 80db 	bne.w	80065a2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063f2:	3301      	adds	r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006402:	2b03      	cmp	r3, #3
 8006404:	d903      	bls.n	800640e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	220d      	movs	r2, #13
 800640a:	701a      	strb	r2, [r3, #0]
      break;
 800640c:	e0c9      	b.n	80065a2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	795b      	ldrb	r3, [r3, #5]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 f83d 	bl	8007494 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f837 	bl	8007494 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
      break;
 8006432:	e0b6      	b.n	80065a2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800644a:	23ff      	movs	r3, #255	; 0xff
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9e3 	bl	8006818 <USBH_Get_StringDesc>
 8006452:	4603      	mov	r3, r0
 8006454:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d111      	bne.n	8006480 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2206      	movs	r2, #6
 8006460:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2205      	movs	r2, #5
 8006466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006476:	2200      	movs	r2, #0
 8006478:	4619      	mov	r1, r3
 800647a:	f001 f93b 	bl	80076f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800647e:	e092      	b.n	80065a6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	2b03      	cmp	r3, #3
 8006484:	f040 808f 	bne.w	80065a6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2206      	movs	r2, #6
 800648c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2205      	movs	r2, #5
 8006492:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064a2:	2200      	movs	r2, #0
 80064a4:	4619      	mov	r1, r3
 80064a6:	f001 f925 	bl	80076f4 <osMessagePut>
      break;
 80064aa:	e07c      	b.n	80065a6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2206      	movs	r2, #6
 80064b0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2205      	movs	r2, #5
 80064b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064c6:	2200      	movs	r2, #0
 80064c8:	4619      	mov	r1, r3
 80064ca:	f001 f913 	bl	80076f4 <osMessagePut>
      break;
 80064ce:	e06a      	b.n	80065a6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d027      	beq.n	800652a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064e6:	23ff      	movs	r3, #255	; 0xff
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f995 	bl	8006818 <USBH_Get_StringDesc>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2207      	movs	r2, #7
 80064fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064fe:	e054      	b.n	80065aa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d151      	bne.n	80065aa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2207      	movs	r2, #7
 800650a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2205      	movs	r2, #5
 8006510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006520:	2200      	movs	r2, #0
 8006522:	4619      	mov	r1, r3
 8006524:	f001 f8e6 	bl	80076f4 <osMessagePut>
      break;
 8006528:	e03f      	b.n	80065aa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2207      	movs	r2, #7
 800652e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2205      	movs	r2, #5
 8006534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006544:	2200      	movs	r2, #0
 8006546:	4619      	mov	r1, r3
 8006548:	f001 f8d4 	bl	80076f4 <osMessagePut>
      break;
 800654c:	e02d      	b.n	80065aa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006564:	23ff      	movs	r3, #255	; 0xff
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f956 	bl	8006818 <USBH_Get_StringDesc>
 800656c:	4603      	mov	r3, r0
 800656e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800657a:	e018      	b.n	80065ae <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d115      	bne.n	80065ae <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
      break;
 8006586:	e012      	b.n	80065ae <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e00f      	b.n	80065ae <USBH_HandleEnum+0x44a>

    default:
      break;
 800658e:	bf00      	nop
 8006590:	e00e      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 8006592:	bf00      	nop
 8006594:	e00c      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 8006596:	bf00      	nop
 8006598:	e00a      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 800659a:	bf00      	nop
 800659c:	e008      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 800659e:	bf00      	nop
 80065a0:	e006      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <USBH_HandleEnum+0x44c>
      break;
 80065ae:	bf00      	nop
  }
  return Status;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f804 	bl	80065fe <USBH_HandleSof>
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b0b      	cmp	r3, #11
 800660e:	d10a      	bne.n	8006626 <USBH_HandleSof+0x28>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
  }
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006652:	2200      	movs	r2, #0
 8006654:	4619      	mov	r1, r3
 8006656:	f001 f84d 	bl	80076f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800665a:	bf00      	nop
}
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006672:	bf00      	nop
}
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80066b2:	2200      	movs	r2, #0
 80066b4:	4619      	mov	r1, r3
 80066b6:	f001 f81d 	bl	80076f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f004 fd20 	bl	800b12a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fecf 	bl	8007494 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	795b      	ldrb	r3, [r3, #5]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fec9 	bl	8007494 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	f000 ffeb 	bl	80076f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	4618      	mov	r0, r3
 8006740:	f001 f818 	bl	8007774 <osMessageGet>
    if (event.status == osEventMessage)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b10      	cmp	r3, #16
 8006748:	d1f2      	bne.n	8006730 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff faa8 	bl	8005ca0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006750:	e7ee      	b.n	8006730 <USBH_Process_OS+0x8>

08006752 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800676e:	2200      	movs	r2, #0
 8006770:	4619      	mov	r1, r3
 8006772:	f000 ffbf 	bl	80076f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	b29b      	uxth	r3, r3
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f864 	bl	800686e <USBH_GetDescriptor>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067bc:	78fa      	ldrb	r2, [r7, #3]
 80067be:	b292      	uxth	r2, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	f000 f918 	bl	80069f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	331c      	adds	r3, #28
 80067e0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80067e2:	887b      	ldrh	r3, [r7, #2]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ec:	2100      	movs	r1, #0
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f83d 	bl	800686e <USBH_GetDescriptor>
 80067f4:	4603      	mov	r3, r0
 80067f6:	72fb      	strb	r3, [r7, #11]
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	4618      	mov	r0, r3
 800680a:	f000 f964 	bl	8006ad6 <USBH_ParseCfgDesc>
  }

  return status;
 800680e:	7afb      	ldrb	r3, [r7, #11]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	72fb      	strb	r3, [r7, #11]
 8006828:	4613      	mov	r3, r2
 800682a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800682c:	7afb      	ldrb	r3, [r7, #11]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006834:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800683c:	893b      	ldrh	r3, [r7, #8]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	460b      	mov	r3, r1
 8006842:	2100      	movs	r1, #0
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f812 	bl	800686e <USBH_GetDescriptor>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800685a:	893a      	ldrh	r2, [r7, #8]
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fa37 	bl	8006cd2 <USBH_ParseStringDesc>
  }

  return status;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	607b      	str	r3, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	72fb      	strb	r3, [r7, #11]
 800687c:	4613      	mov	r3, r2
 800687e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	789b      	ldrb	r3, [r3, #2]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d11c      	bne.n	80068c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2206      	movs	r2, #6
 8006898:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	893a      	ldrh	r2, [r7, #8]
 800689e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068a0:	893b      	ldrh	r3, [r7, #8]
 80068a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d104      	bne.n	80068b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f240 4209 	movw	r2, #1033	; 0x409
 80068b2:	829a      	strh	r2, [r3, #20]
 80068b4:	e002      	b.n	80068bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8b3a      	ldrh	r2, [r7, #24]
 80068c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80068c2:	8b3b      	ldrh	r3, [r7, #24]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fa50 	bl	8006d6e <USBH_CtlReq>
 80068ce:	4603      	mov	r3, r0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10f      	bne.n	800690c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2205      	movs	r2, #5
 80068f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800690c:	2200      	movs	r2, #0
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa2c 	bl	8006d6e <USBH_CtlReq>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	789b      	ldrb	r3, [r3, #2]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10e      	bne.n	8006952 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2209      	movs	r2, #9
 800693e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa09 	bl	8006d6e <USBH_CtlReq>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10f      	bne.n	800699a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2203      	movs	r2, #3
 8006984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f9e5 	bl	8006d6e <USBH_CtlReq>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	789b      	ldrb	r3, [r3, #2]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d10f      	bne.n	80069e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9c1 	bl	8006d6e <USBH_CtlReq>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	785a      	ldrb	r2, [r3, #1]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3302      	adds	r3, #2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	791a      	ldrb	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	795a      	ldrb	r2, [r3, #5]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	799a      	ldrb	r2, [r3, #6]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	79da      	ldrb	r2, [r3, #7]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d939      	bls.n	8006aca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	3309      	adds	r3, #9
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	330a      	adds	r3, #10
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	330b      	adds	r3, #11
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	330c      	adds	r3, #12
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	330d      	adds	r3, #13
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b9a      	ldrb	r2, [r3, #14]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	7bda      	ldrb	r2, [r3, #15]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	7c1a      	ldrb	r2, [r3, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	7c5a      	ldrb	r2, [r3, #17]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	745a      	strb	r2, [r3, #17]
  }
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08a      	sub	sp, #40	; 0x28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	785a      	ldrb	r2, [r3, #1]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3303      	adds	r3, #3
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	791a      	ldrb	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	795a      	ldrb	r2, [r3, #5]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	799a      	ldrb	r2, [r3, #6]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	79da      	ldrb	r2, [r3, #7]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	7a1a      	ldrb	r2, [r3, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b09      	cmp	r3, #9
 8006b50:	d95f      	bls.n	8006c12 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b52:	2309      	movs	r3, #9
 8006b54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b5a:	e051      	b.n	8006c00 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b5c:	f107 0316 	add.w	r3, r7, #22
 8006b60:	4619      	mov	r1, r3
 8006b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b64:	f000 f8e8 	bl	8006d38 <USBH_GetNextDesc>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d146      	bne.n	8006c00 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b76:	221a      	movs	r2, #26
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	3302      	adds	r3, #2
 8006b84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b88:	69f8      	ldr	r0, [r7, #28]
 8006b8a:	f000 f846 	bl	8006c1a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b98:	e022      	b.n	8006be0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b9a:	f107 0316 	add.w	r3, r7, #22
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba2:	f000 f8c9 	bl	8006d38 <USBH_GetNextDesc>
 8006ba6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d117      	bne.n	8006be0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bb8:	3201      	adds	r2, #1
 8006bba:	00d2      	lsls	r2, r2, #3
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	3304      	adds	r3, #4
 8006bcc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd0:	69b8      	ldr	r0, [r7, #24]
 8006bd2:	f000 f851 	bl	8006c78 <USBH_ParseEPDesc>
            ep_ix++;
 8006bd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	791b      	ldrb	r3, [r3, #4]
 8006be4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d204      	bcs.n	8006bf6 <USBH_ParseCfgDesc+0x120>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	885a      	ldrh	r2, [r3, #2]
 8006bf0:	8afb      	ldrh	r3, [r7, #22]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d8d1      	bhi.n	8006b9a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d804      	bhi.n	8006c12 <USBH_ParseCfgDesc+0x13c>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	885a      	ldrh	r2, [r3, #2]
 8006c0c:	8afb      	ldrh	r3, [r7, #22]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d8a4      	bhi.n	8006b5c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c12:	bf00      	nop
 8006c14:	3728      	adds	r7, #40	; 0x28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785a      	ldrb	r2, [r3, #1]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	789a      	ldrb	r2, [r3, #2]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	78da      	ldrb	r2, [r3, #3]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	791a      	ldrb	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	795a      	ldrb	r2, [r3, #5]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	799a      	ldrb	r2, [r3, #6]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	79da      	ldrb	r2, [r3, #7]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	7a1a      	ldrb	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	721a      	strb	r2, [r3, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	785a      	ldrb	r2, [r3, #1]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	789a      	ldrb	r2, [r3, #2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	78da      	ldrb	r2, [r3, #3]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	3305      	adds	r3, #5
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	799a      	ldrb	r2, [r3, #6]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	719a      	strb	r2, [r3, #6]
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b087      	sub	sp, #28
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d120      	bne.n	8006d2c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	1e9a      	subs	r2, r3, #2
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	bf28      	it	cs
 8006cf6:	4613      	movcs	r3, r2
 8006cf8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d00:	2300      	movs	r3, #0
 8006d02:	82fb      	strh	r3, [r7, #22]
 8006d04:	e00b      	b.n	8006d1e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d06:	8afb      	ldrh	r3, [r7, #22]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	82fb      	strh	r3, [r7, #22]
 8006d1e:	8afa      	ldrh	r2, [r7, #22]
 8006d20:	8abb      	ldrh	r3, [r7, #20]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3ef      	bcc.n	8006d06 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d60:	68fb      	ldr	r3, [r7, #12]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	789b      	ldrb	r3, [r3, #2]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d002      	beq.n	8006d8e <USBH_CtlReq+0x20>
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d01d      	beq.n	8006dc8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8006d8c:	e043      	b.n	8006e16 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2202      	movs	r2, #2
 8006da4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f000 fc97 	bl	80076f4 <osMessagePut>
      break;
 8006dc6:	e026      	b.n	8006e16 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f829 	bl	8006e20 <USBH_HandleControl>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <USBH_CtlReq+0x70>
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d106      	bne.n	8006dec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	761a      	strb	r2, [r3, #24]
 8006dea:	e005      	b.n	8006df8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d102      	bne.n	8006df8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f000 fc70 	bl	80076f4 <osMessagePut>
      break;
 8006e14:	bf00      	nop
  }
  return status;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7e1b      	ldrb	r3, [r3, #24]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	2b0a      	cmp	r3, #10
 8006e38:	f200 822b 	bhi.w	8007292 <USBH_HandleControl+0x472>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <USBH_HandleControl+0x24>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08006e8b 	.word	0x08006e8b
 8006e4c:	08006f2d 	.word	0x08006f2d
 8006e50:	08006f53 	.word	0x08006f53
 8006e54:	08006fdf 	.word	0x08006fdf
 8006e58:	0800700b 	.word	0x0800700b
 8006e5c:	080070cd 	.word	0x080070cd
 8006e60:	080070ef 	.word	0x080070ef
 8006e64:	08007181 	.word	0x08007181
 8006e68:	080071a9 	.word	0x080071a9
 8006e6c:	0800723b 	.word	0x0800723b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f103 0110 	add.w	r1, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa19 	bl	80072b4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	761a      	strb	r2, [r3, #24]
      break;
 8006e88:	e20e      	b.n	80072a8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	795b      	ldrb	r3, [r3, #5]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f004 fa37 	bl	800b304 <USBH_LL_GetURBState>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d12c      	bne.n	8006efa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ea8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8adb      	ldrh	r3, [r3, #22]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006eb2:	7b7b      	ldrb	r3, [r7, #13]
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d103      	bne.n	8006ec0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2203      	movs	r2, #3
 8006ebc:	761a      	strb	r2, [r3, #24]
 8006ebe:	e00d      	b.n	8006edc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	761a      	strb	r2, [r3, #24]
 8006ec6:	e009      	b.n	8006edc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8006ec8:	7b7b      	ldrb	r3, [r7, #13]
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d103      	bne.n	8006ed6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2209      	movs	r2, #9
 8006ed2:	761a      	strb	r2, [r3, #24]
 8006ed4:	e002      	b.n	8006edc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2207      	movs	r2, #7
 8006eda:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f000 fbfe 	bl	80076f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ef8:	e1cd      	b.n	8007296 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d003      	beq.n	8006f08 <USBH_HandleControl+0xe8>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	f040 81c7 	bne.w	8007296 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	220b      	movs	r2, #11
 8006f0c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2203      	movs	r2, #3
 8006f12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f22:	2200      	movs	r2, #0
 8006f24:	4619      	mov	r1, r3
 8006f26:	f000 fbe5 	bl	80076f4 <osMessagePut>
      break;
 8006f2a:	e1b4      	b.n	8007296 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6899      	ldr	r1, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	899a      	ldrh	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f9f4 	bl	8007332 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	761a      	strb	r2, [r3, #24]
      break;
 8006f50:	e1aa      	b.n	80072a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f004 f9d3 	bl	800b304 <USBH_LL_GetURBState>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d110      	bne.n	8006f8a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2209      	movs	r2, #9
 8006f6c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2203      	movs	r2, #3
 8006f72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f82:	2200      	movs	r2, #0
 8006f84:	4619      	mov	r1, r3
 8006f86:	f000 fbb5 	bl	80076f4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d110      	bne.n	8006fb2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f90:	2303      	movs	r3, #3
 8006f92:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2203      	movs	r2, #3
 8006f98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4619      	mov	r1, r3
 8006fac:	f000 fba2 	bl	80076f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fb0:	e173      	b.n	800729a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	f040 8170 	bne.w	800729a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	220b      	movs	r2, #11
 8006fbe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f000 fb8c 	bl	80076f4 <osMessagePut>
      break;
 8006fdc:	e15d      	b.n	800729a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6899      	ldr	r1, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	899a      	ldrh	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7958      	ldrb	r0, [r3, #5]
 8006fea:	2301      	movs	r3, #1
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f979 	bl	80072e8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2206      	movs	r2, #6
 8007006:	761a      	strb	r2, [r3, #24]
      break;
 8007008:	e14e      	b.n	80072a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	795b      	ldrb	r3, [r3, #5]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f004 f977 	bl	800b304 <USBH_LL_GetURBState>
 8007016:	4603      	mov	r3, r0
 8007018:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d111      	bne.n	8007044 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2207      	movs	r2, #7
 8007024:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2203      	movs	r2, #3
 800702a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800703a:	2200      	movs	r2, #0
 800703c:	4619      	mov	r1, r3
 800703e:	f000 fb59 	bl	80076f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007042:	e12c      	b.n	800729e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b05      	cmp	r3, #5
 8007048:	d113      	bne.n	8007072 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	220c      	movs	r2, #12
 800704e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007050:	2303      	movs	r3, #3
 8007052:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007068:	2200      	movs	r2, #0
 800706a:	4619      	mov	r1, r3
 800706c:	f000 fb42 	bl	80076f4 <osMessagePut>
      break;
 8007070:	e115      	b.n	800729e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d111      	bne.n	800709c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2205      	movs	r2, #5
 800707c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2203      	movs	r2, #3
 8007082:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007092:	2200      	movs	r2, #0
 8007094:	4619      	mov	r1, r3
 8007096:	f000 fb2d 	bl	80076f4 <osMessagePut>
      break;
 800709a:	e100      	b.n	800729e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	f040 80fd 	bne.w	800729e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220b      	movs	r2, #11
 80070a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80070aa:	2302      	movs	r3, #2
 80070ac:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2203      	movs	r2, #3
 80070b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070c2:	2200      	movs	r2, #0
 80070c4:	4619      	mov	r1, r3
 80070c6:	f000 fb15 	bl	80076f4 <osMessagePut>
      break;
 80070ca:	e0e8      	b.n	800729e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	791b      	ldrb	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f92c 	bl	8007332 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2208      	movs	r2, #8
 80070ea:	761a      	strb	r2, [r3, #24]

      break;
 80070ec:	e0dc      	b.n	80072a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f004 f905 	bl	800b304 <USBH_LL_GetURBState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d113      	bne.n	800712c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	220d      	movs	r2, #13
 8007108:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2203      	movs	r2, #3
 8007112:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007122:	2200      	movs	r2, #0
 8007124:	4619      	mov	r1, r3
 8007126:	f000 fae5 	bl	80076f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800712a:	e0ba      	b.n	80072a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b04      	cmp	r3, #4
 8007130:	d111      	bne.n	8007156 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	220b      	movs	r2, #11
 8007136:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2203      	movs	r2, #3
 800713c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800714c:	2200      	movs	r2, #0
 800714e:	4619      	mov	r1, r3
 8007150:	f000 fad0 	bl	80076f4 <osMessagePut>
      break;
 8007154:	e0a5      	b.n	80072a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b05      	cmp	r3, #5
 800715a:	f040 80a2 	bne.w	80072a2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2203      	movs	r2, #3
 8007166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007176:	2200      	movs	r2, #0
 8007178:	4619      	mov	r1, r3
 800717a:	f000 fabb 	bl	80076f4 <osMessagePut>
      break;
 800717e:	e090      	b.n	80072a2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	795a      	ldrb	r2, [r3, #5]
 8007184:	2301      	movs	r3, #1
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f8aa 	bl	80072e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220a      	movs	r2, #10
 80071a4:	761a      	strb	r2, [r3, #24]
      break;
 80071a6:	e07f      	b.n	80072a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	795b      	ldrb	r3, [r3, #5]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f004 f8a8 	bl	800b304 <USBH_LL_GetURBState>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d113      	bne.n	80071e6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	220d      	movs	r2, #13
 80071c6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2203      	movs	r2, #3
 80071cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071dc:	2200      	movs	r2, #0
 80071de:	4619      	mov	r1, r3
 80071e0:	f000 fa88 	bl	80076f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071e4:	e05f      	b.n	80072a6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d111      	bne.n	8007210 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2209      	movs	r2, #9
 80071f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2203      	movs	r2, #3
 80071f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007206:	2200      	movs	r2, #0
 8007208:	4619      	mov	r1, r3
 800720a:	f000 fa73 	bl	80076f4 <osMessagePut>
      break;
 800720e:	e04a      	b.n	80072a6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b04      	cmp	r3, #4
 8007214:	d147      	bne.n	80072a6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	220b      	movs	r2, #11
 800721a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007230:	2200      	movs	r2, #0
 8007232:	4619      	mov	r1, r3
 8007234:	f000 fa5e 	bl	80076f4 <osMessagePut>
      break;
 8007238:	e035      	b.n	80072a6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	7e5b      	ldrb	r3, [r3, #25]
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	765a      	strb	r2, [r3, #25]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7e5b      	ldrb	r3, [r3, #25]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d806      	bhi.n	800725c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800725a:	e025      	b.n	80072a8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007262:	2106      	movs	r1, #6
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	795b      	ldrb	r3, [r3, #5]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f90d 	bl	8007494 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f907 	bl	8007494 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	73fb      	strb	r3, [r7, #15]
      break;
 8007290:	e00a      	b.n	80072a8 <USBH_HandleControl+0x488>

    default:
      break;
 8007292:	bf00      	nop
 8007294:	e008      	b.n	80072a8 <USBH_HandleControl+0x488>
      break;
 8007296:	bf00      	nop
 8007298:	e006      	b.n	80072a8 <USBH_HandleControl+0x488>
      break;
 800729a:	bf00      	nop
 800729c:	e004      	b.n	80072a8 <USBH_HandleControl+0x488>
      break;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <USBH_HandleControl+0x488>
      break;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <USBH_HandleControl+0x488>
      break;
 80072a6:	bf00      	nop
  }

  return status;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop

080072b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af04      	add	r7, sp, #16
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072c2:	79f9      	ldrb	r1, [r7, #7]
 80072c4:	2300      	movs	r3, #0
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	2308      	movs	r3, #8
 80072ca:	9302      	str	r3, [sp, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	2300      	movs	r3, #0
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f003 ffe2 	bl	800b2a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	460b      	mov	r3, r1
 80072f8:	80fb      	strh	r3, [r7, #6]
 80072fa:	4613      	mov	r3, r2
 80072fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800730c:	7979      	ldrb	r1, [r7, #5]
 800730e:	7e3b      	ldrb	r3, [r7, #24]
 8007310:	9303      	str	r3, [sp, #12]
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	9302      	str	r3, [sp, #8]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	2301      	movs	r3, #1
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2300      	movs	r3, #0
 8007320:	2200      	movs	r2, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f003 ffbd 	bl	800b2a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b088      	sub	sp, #32
 8007336:	af04      	add	r7, sp, #16
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	4611      	mov	r1, r2
 800733e:	461a      	mov	r2, r3
 8007340:	460b      	mov	r3, r1
 8007342:	80fb      	strh	r3, [r7, #6]
 8007344:	4613      	mov	r3, r2
 8007346:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007348:	7979      	ldrb	r1, [r7, #5]
 800734a:	2300      	movs	r3, #0
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	2301      	movs	r3, #1
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	2201      	movs	r2, #1
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f003 ff9f 	bl	800b2a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007364:	2300      	movs	r3, #0

}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af04      	add	r7, sp, #16
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4611      	mov	r1, r2
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	80fb      	strh	r3, [r7, #6]
 8007380:	4613      	mov	r3, r2
 8007382:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007392:	7979      	ldrb	r1, [r7, #5]
 8007394:	7e3b      	ldrb	r3, [r7, #24]
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	9302      	str	r3, [sp, #8]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	2301      	movs	r3, #1
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2302      	movs	r3, #2
 80073a6:	2200      	movs	r2, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f003 ff7a 	bl	800b2a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af04      	add	r7, sp, #16
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	460b      	mov	r3, r1
 80073c8:	80fb      	strh	r3, [r7, #6]
 80073ca:	4613      	mov	r3, r2
 80073cc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073ce:	7979      	ldrb	r1, [r7, #5]
 80073d0:	2300      	movs	r3, #0
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	2301      	movs	r3, #1
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2201      	movs	r2, #1
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f003 ff5c 	bl	800b2a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af04      	add	r7, sp, #16
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	461a      	mov	r2, r3
 8007402:	4603      	mov	r3, r0
 8007404:	70fb      	strb	r3, [r7, #3]
 8007406:	460b      	mov	r3, r1
 8007408:	70bb      	strb	r3, [r7, #2]
 800740a:	4613      	mov	r3, r2
 800740c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800740e:	7878      	ldrb	r0, [r7, #1]
 8007410:	78ba      	ldrb	r2, [r7, #2]
 8007412:	78f9      	ldrb	r1, [r7, #3]
 8007414:	8b3b      	ldrh	r3, [r7, #24]
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	7d3b      	ldrb	r3, [r7, #20]
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	7c3b      	ldrb	r3, [r7, #16]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4603      	mov	r3, r0
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f003 feef 	bl	800b206 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f003 ff0e 	bl	800b264 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f836 	bl	80074d0 <USBH_GetFreePipe>
 8007464:	4603      	mov	r3, r0
 8007466:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007468:	89fb      	ldrh	r3, [r7, #14]
 800746a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800746e:	4293      	cmp	r3, r2
 8007470:	d00a      	beq.n	8007488 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	33e0      	adds	r3, #224	; 0xe0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	b2db      	uxtb	r3, r3
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	2b0a      	cmp	r3, #10
 80074a4:	d80d      	bhi.n	80074c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	33e0      	adds	r3, #224	; 0xe0
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	33e0      	adds	r3, #224	; 0xe0
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
 80074e0:	e00f      	b.n	8007502 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	33e0      	adds	r3, #224	; 0xe0
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	e007      	b.n	800750c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	3301      	adds	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b0a      	cmp	r3, #10
 8007506:	d9ec      	bls.n	80074e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007508:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800752a:	2b84      	cmp	r3, #132	; 0x84
 800752c:	d005      	beq.n	800753a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800752e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	3303      	adds	r3, #3
 8007538:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	607b      	str	r3, [r7, #4]
  return(result);
 8007554:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007570:	f001 fa3c 	bl	80089ec <vTaskStartScheduler>
  
  return osOK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	bd80      	pop	{r7, pc}

0800757a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800757a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757c:	b089      	sub	sp, #36	; 0x24
 800757e:	af04      	add	r7, sp, #16
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d020      	beq.n	80075ce <osThreadCreate+0x54>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01c      	beq.n	80075ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685c      	ldr	r4, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681d      	ldr	r5, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691e      	ldr	r6, [r3, #16]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff ffb6 	bl	8007518 <makeFreeRtosPriority>
 80075ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075b6:	9202      	str	r2, [sp, #8]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	9100      	str	r1, [sp, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	4632      	mov	r2, r6
 80075c0:	4629      	mov	r1, r5
 80075c2:	4620      	mov	r0, r4
 80075c4:	f001 f84f 	bl	8008666 <xTaskCreateStatic>
 80075c8:	4603      	mov	r3, r0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e01c      	b.n	8007608 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685c      	ldr	r4, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075da:	b29e      	uxth	r6, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff ff98 	bl	8007518 <makeFreeRtosPriority>
 80075e8:	4602      	mov	r2, r0
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9200      	str	r2, [sp, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	4632      	mov	r2, r6
 80075f6:	4629      	mov	r1, r5
 80075f8:	4620      	mov	r0, r4
 80075fa:	f001 f88e 	bl	800871a <xTaskCreate>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007604:	2300      	movs	r3, #0
 8007606:	e000      	b.n	800760a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007612 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <osDelay+0x16>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	e000      	b.n	800762a <osDelay+0x18>
 8007628:	2301      	movs	r3, #1
 800762a:	4618      	mov	r0, r3
 800762c:	f001 f9aa 	bl	8008984 <vTaskDelay>
  
  return osOK;
 8007630:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af02      	add	r7, sp, #8
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <osSemaphoreCreate+0x34>
    if (count == 1) {
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10b      	bne.n	800766a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	2303      	movs	r3, #3
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	4613      	mov	r3, r2
 800765c:	2200      	movs	r2, #0
 800765e:	2100      	movs	r1, #0
 8007660:	2001      	movs	r0, #1
 8007662:	f000 fa17 	bl	8007a94 <xQueueGenericCreateStatic>
 8007666:	4603      	mov	r3, r0
 8007668:	e016      	b.n	8007698 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	e014      	b.n	8007698 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d110      	bne.n	8007696 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007674:	2203      	movs	r2, #3
 8007676:	2100      	movs	r1, #0
 8007678:	2001      	movs	r0, #1
 800767a:	f000 fa7e 	bl	8007b7a <xQueueGenericCreate>
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <osSemaphoreCreate+0x58>
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fad3 	bl	8007c38 <xQueueGenericSend>
      return sema;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	e000      	b.n	8007698 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007696:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d012      	beq.n	80076d8 <osMessageCreate+0x38>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00e      	beq.n	80076d8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68dc      	ldr	r4, [r3, #12]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4623      	mov	r3, r4
 80076d0:	f000 f9e0 	bl	8007a94 <xQueueGenericCreateStatic>
 80076d4:	4603      	mov	r3, r0
 80076d6:	e008      	b.n	80076ea <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	4619      	mov	r1, r3
 80076e4:	f000 fa49 	bl	8007b7a <xQueueGenericCreate>
 80076e8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd90      	pop	{r4, r7, pc}
	...

080076f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <osMessagePut+0x1e>
    ticks = 1;
 800770e:	2301      	movs	r3, #1
 8007710:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007712:	f7ff ff19 	bl	8007548 <inHandlerMode>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d018      	beq.n	800774e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800771c:	f107 0210 	add.w	r2, r7, #16
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	2300      	movs	r3, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fb80 	bl	8007e2c <xQueueGenericSendFromISR>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <osMessagePut+0x42>
      return osErrorOS;
 8007732:	23ff      	movs	r3, #255	; 0xff
 8007734:	e018      	b.n	8007768 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d014      	beq.n	8007766 <osMessagePut+0x72>
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <osMessagePut+0x7c>)
 800773e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	e00b      	b.n	8007766 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800774e:	f107 0108 	add.w	r1, r7, #8
 8007752:	2300      	movs	r3, #0
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fa6e 	bl	8007c38 <xQueueGenericSend>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d001      	beq.n	8007766 <osMessagePut+0x72>
      return osErrorOS;
 8007762:	23ff      	movs	r3, #255	; 0xff
 8007764:	e000      	b.n	8007768 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007774:	b590      	push	{r4, r7, lr}
 8007776:	b08b      	sub	sp, #44	; 0x2c
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	617b      	str	r3, [r7, #20]
    return event;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	461c      	mov	r4, r3
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800779e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077a2:	e054      	b.n	800784e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	d103      	bne.n	80077bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ba:	e009      	b.n	80077d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <osMessageGet+0x5c>
      ticks = 1;
 80077cc:	2301      	movs	r3, #1
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80077d0:	f7ff feba 	bl	8007548 <inHandlerMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01c      	beq.n	8007814 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80077da:	f107 0220 	add.w	r2, r7, #32
 80077de:	f107 0314 	add.w	r3, r7, #20
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	68b8      	ldr	r0, [r7, #8]
 80077e8:	f000 fd98 	bl	800831c <xQueueReceiveFromISR>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d102      	bne.n	80077f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80077f2:	2310      	movs	r3, #16
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e001      	b.n	80077fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d01d      	beq.n	800783e <osMessageGet+0xca>
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <osMessageGet+0xe4>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	e014      	b.n	800783e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	3304      	adds	r3, #4
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	4619      	mov	r1, r3
 800781e:	68b8      	ldr	r0, [r7, #8]
 8007820:	f000 fb98 	bl	8007f54 <xQueueReceive>
 8007824:	4603      	mov	r3, r0
 8007826:	2b01      	cmp	r3, #1
 8007828:	d102      	bne.n	8007830 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800782a:	2310      	movs	r3, #16
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e006      	b.n	800783e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <osMessageGet+0xc6>
 8007836:	2300      	movs	r3, #0
 8007838:	e000      	b.n	800783c <osMessageGet+0xc8>
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	461c      	mov	r4, r3
 8007842:	f107 0314 	add.w	r3, r7, #20
 8007846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	372c      	adds	r7, #44	; 0x2c
 8007852:	46bd      	mov	sp, r7
 8007854:	bd90      	pop	{r4, r7, pc}
 8007856:	bf00      	nop
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 0208 	add.w	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f04f 32ff 	mov.w	r2, #4294967295
 8007874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f103 0208 	add.w	r2, r3, #8
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f103 0208 	add.w	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d103      	bne.n	800791e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e00c      	b.n	8007938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3308      	adds	r3, #8
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e002      	b.n	800792c <vListInsert+0x2e>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d2f6      	bcs.n	8007926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6892      	ldr	r2, [r2, #8]
 8007986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6852      	ldr	r2, [r2, #4]
 8007990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d103      	bne.n	80079a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	e7fe      	b.n	80079ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80079ec:	f001 ff4e 	bl	800988c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	68f9      	ldr	r1, [r7, #12]
 80079fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	441a      	add	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	22ff      	movs	r2, #255	; 0xff
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	22ff      	movs	r2, #255	; 0xff
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d114      	bne.n	8007a6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01a      	beq.n	8007a80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3310      	adds	r3, #16
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 fa0a 	bl	8008e68 <xTaskRemoveFromEventList>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d012      	beq.n	8007a80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <xQueueGenericReset+0xcc>)
 8007a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	e009      	b.n	8007a80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3310      	adds	r3, #16
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fef3 	bl	800785c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3324      	adds	r3, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff feee 	bl	800785c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a80:	f001 ff32 	bl	80098e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a84:	2301      	movs	r3, #1
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	e000ed04 	.word	0xe000ed04

08007a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08e      	sub	sp, #56	; 0x38
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <xQueueGenericCreateStatic+0x28>
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aba:	e7fe      	b.n	8007aba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <xQueueGenericCreateStatic+0x42>
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <xQueueGenericCreateStatic+0x4e>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <xQueueGenericCreateStatic+0x52>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <xQueueGenericCreateStatic+0x54>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <xQueueGenericCreateStatic+0x6c>
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	623b      	str	r3, [r7, #32]
 8007afe:	e7fe      	b.n	8007afe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <xQueueGenericCreateStatic+0x78>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueGenericCreateStatic+0x7c>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueGenericCreateStatic+0x7e>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <xQueueGenericCreateStatic+0x96>
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b2a:	2348      	movs	r3, #72	; 0x48
 8007b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b48      	cmp	r3, #72	; 0x48
 8007b32:	d009      	beq.n	8007b48 <xQueueGenericCreateStatic+0xb4>
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e7fe      	b.n	8007b46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00d      	beq.n	8007b70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f844 	bl	8007bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b08a      	sub	sp, #40	; 0x28
 8007b7e:	af02      	add	r7, sp, #8
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	4613      	mov	r3, r2
 8007b86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <xQueueGenericCreate+0x28>
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e004      	b.n	8007bb8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3348      	adds	r3, #72	; 0x48
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 ff7f 	bl	8009ac0 <pvPortMalloc>
 8007bc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d011      	beq.n	8007bee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3348      	adds	r3, #72	; 0x48
 8007bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bdc:	79fa      	ldrb	r2, [r7, #7]
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f805 	bl	8007bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bee:	69bb      	ldr	r3, [r7, #24]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e002      	b.n	8007c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c26:	2101      	movs	r1, #1
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f7ff fecb 	bl	80079c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <xQueueGenericSend+0x30>
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c66:	e7fe      	b.n	8007c66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x3e>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSend+0x42>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSend+0x44>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <xQueueGenericSend+0x5c>
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
 8007c92:	e7fe      	b.n	8007c92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d103      	bne.n	8007ca2 <xQueueGenericSend+0x6a>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <xQueueGenericSend+0x6e>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericSend+0x70>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <xQueueGenericSend+0x88>
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
 8007cbe:	e7fe      	b.n	8007cbe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc0:	f001 fa8a 	bl	80091d8 <xTaskGetSchedulerState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <xQueueGenericSend+0x98>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <xQueueGenericSend+0x9c>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e000      	b.n	8007cd6 <xQueueGenericSend+0x9e>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <xQueueGenericSend+0xb6>
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cee:	f001 fdcd 	bl	800988c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <xQueueGenericSend+0xcc>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d129      	bne.n	8007d58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0a:	f000 fb9c 	bl	8008446 <prvCopyDataToQueue>
 8007d0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f8a3 	bl	8008e68 <xTaskRemoveFromEventList>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d013      	beq.n	8007d50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d28:	4b3f      	ldr	r3, [pc, #252]	; (8007e28 <xQueueGenericSend+0x1f0>)
 8007d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	e00a      	b.n	8007d50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d40:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <xQueueGenericSend+0x1f0>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d50:	f001 fdca 	bl	80098e8 <vPortExitCritical>
				return pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e063      	b.n	8007e20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d5e:	f001 fdc3 	bl	80098e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e05c      	b.n	8007e20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f8db 	bl	8008f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d76:	2301      	movs	r3, #1
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7a:	f001 fdb5 	bl	80098e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d7e:	f000 fe93 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d82:	f001 fd83 	bl	800988c <vPortEnterCritical>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d103      	bne.n	8007d9c <xQueueGenericSend+0x164>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da2:	b25b      	sxtb	r3, r3
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d103      	bne.n	8007db2 <xQueueGenericSend+0x17a>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db2:	f001 fd99 	bl	80098e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007db6:	1d3a      	adds	r2, r7, #4
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 f8ca 	bl	8008f58 <xTaskCheckForTimeOut>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d124      	bne.n	8007e14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dcc:	f000 fc33 	bl	8008636 <prvIsQueueFull>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d018      	beq.n	8007e08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	3310      	adds	r3, #16
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f81e 	bl	8008e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007de6:	f000 fbbe 	bl	8008566 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dea:	f000 fe6b 	bl	8008ac4 <xTaskResumeAll>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f47f af7c 	bne.w	8007cee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <xQueueGenericSend+0x1f0>)
 8007df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	e772      	b.n	8007cee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0a:	f000 fbac 	bl	8008566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e0e:	f000 fe59 	bl	8008ac4 <xTaskResumeAll>
 8007e12:	e76c      	b.n	8007cee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e16:	f000 fba6 	bl	8008566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e1a:	f000 fe53 	bl	8008ac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3738      	adds	r7, #56	; 0x38
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	; 0x38
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <xQueueGenericSendFromISR+0x2c>
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	e7fe      	b.n	8007e56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d103      	bne.n	8007e66 <xQueueGenericSendFromISR+0x3a>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <xQueueGenericSendFromISR+0x3e>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <xQueueGenericSendFromISR+0x40>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <xQueueGenericSendFromISR+0x58>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	e7fe      	b.n	8007e82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d103      	bne.n	8007e92 <xQueueGenericSendFromISR+0x66>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <xQueueGenericSendFromISR+0x6a>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <xQueueGenericSendFromISR+0x6c>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <xQueueGenericSendFromISR+0x84>
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e7fe      	b.n	8007eae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eb0:	f001 fdc8 	bl	8009a44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	61ba      	str	r2, [r7, #24]
 8007eca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d302      	bcc.n	8007ee2 <xQueueGenericSendFromISR+0xb6>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d12c      	bne.n	8007f3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef2:	f000 faa8 	bl	8008446 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ef6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d112      	bne.n	8007f26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	3324      	adds	r3, #36	; 0x24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 ffab 	bl	8008e68 <xTaskRemoveFromEventList>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e007      	b.n	8007f36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	b25a      	sxtb	r2, r3
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f36:	2301      	movs	r3, #1
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007f3a:	e001      	b.n	8007f40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3738      	adds	r7, #56	; 0x38
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08c      	sub	sp, #48	; 0x30
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <xQueueReceive+0x2e>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	623b      	str	r3, [r7, #32]
 8007f80:	e7fe      	b.n	8007f80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <xQueueReceive+0x3c>
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <xQueueReceive+0x40>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <xQueueReceive+0x42>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <xQueueReceive+0x5a>
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	e7fe      	b.n	8007fac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fae:	f001 f913 	bl	80091d8 <xTaskGetSchedulerState>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <xQueueReceive+0x6a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <xQueueReceive+0x6e>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <xQueueReceive+0x70>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <xQueueReceive+0x88>
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e7fe      	b.n	8007fda <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fdc:	f001 fc56 	bl	800988c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01f      	beq.n	800802c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff0:	f000 fa93 	bl	800851a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	1e5a      	subs	r2, r3, #1
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00f      	beq.n	8008024 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	3310      	adds	r3, #16
 8008008:	4618      	mov	r0, r3
 800800a:	f000 ff2d 	bl	8008e68 <xTaskRemoveFromEventList>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008014:	4b3c      	ldr	r3, [pc, #240]	; (8008108 <xQueueReceive+0x1b4>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008024:	f001 fc60 	bl	80098e8 <vPortExitCritical>
				return pdPASS;
 8008028:	2301      	movs	r3, #1
 800802a:	e069      	b.n	8008100 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008032:	f001 fc59 	bl	80098e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008036:	2300      	movs	r3, #0
 8008038:	e062      	b.n	8008100 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d106      	bne.n	800804e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008040:	f107 0310 	add.w	r3, r7, #16
 8008044:	4618      	mov	r0, r3
 8008046:	f000 ff71 	bl	8008f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800804e:	f001 fc4b 	bl	80098e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008052:	f000 fd29 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008056:	f001 fc19 	bl	800988c <vPortEnterCritical>
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008060:	b25b      	sxtb	r3, r3
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d103      	bne.n	8008070 <xQueueReceive+0x11c>
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008076:	b25b      	sxtb	r3, r3
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d103      	bne.n	8008086 <xQueueReceive+0x132>
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008086:	f001 fc2f 	bl	80098e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800808a:	1d3a      	adds	r2, r7, #4
 800808c:	f107 0310 	add.w	r3, r7, #16
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f000 ff60 	bl	8008f58 <xTaskCheckForTimeOut>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d123      	bne.n	80080e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a0:	f000 fab3 	bl	800860a <prvIsQueueEmpty>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	3324      	adds	r3, #36	; 0x24
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 feb4 	bl	8008e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ba:	f000 fa54 	bl	8008566 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080be:	f000 fd01 	bl	8008ac4 <xTaskResumeAll>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d189      	bne.n	8007fdc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80080c8:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <xQueueReceive+0x1b4>)
 80080ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	e780      	b.n	8007fdc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080dc:	f000 fa43 	bl	8008566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080e0:	f000 fcf0 	bl	8008ac4 <xTaskResumeAll>
 80080e4:	e77a      	b.n	8007fdc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e8:	f000 fa3d 	bl	8008566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080ec:	f000 fcea 	bl	8008ac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f2:	f000 fa8a 	bl	800860a <prvIsQueueEmpty>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f43f af6f 	beq.w	8007fdc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008100:	4618      	mov	r0, r3
 8008102:	3730      	adds	r7, #48	; 0x30
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	; 0x38
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <xQueueSemaphoreTake+0x30>
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	623b      	str	r3, [r7, #32]
 800813a:	e7fe      	b.n	800813a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <xQueueSemaphoreTake+0x4c>
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	e7fe      	b.n	8008156 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008158:	f001 f83e 	bl	80091d8 <xTaskGetSchedulerState>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <xQueueSemaphoreTake+0x5c>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <xQueueSemaphoreTake+0x60>
 8008168:	2301      	movs	r3, #1
 800816a:	e000      	b.n	800816e <xQueueSemaphoreTake+0x62>
 800816c:	2300      	movs	r3, #0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <xQueueSemaphoreTake+0x7a>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	e7fe      	b.n	8008184 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008186:	f001 fb81 	bl	800988c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d024      	beq.n	80081e0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	1e5a      	subs	r2, r3, #1
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081a6:	f001 f9d1 	bl	800954c <pvTaskIncrementMutexHeldCount>
 80081aa:	4602      	mov	r2, r0
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00f      	beq.n	80081d8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	3310      	adds	r3, #16
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fe53 	bl	8008e68 <xTaskRemoveFromEventList>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081c8:	4b53      	ldr	r3, [pc, #332]	; (8008318 <xQueueSemaphoreTake+0x20c>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081d8:	f001 fb86 	bl	80098e8 <vPortExitCritical>
				return pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	e096      	b.n	800830e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d110      	bne.n	8008208 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <xQueueSemaphoreTake+0xf4>
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e7fe      	b.n	80081fe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008200:	f001 fb72 	bl	80098e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008204:	2300      	movs	r3, #0
 8008206:	e082      	b.n	800830e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fe8a 	bl	8008f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008218:	2301      	movs	r3, #1
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800821c:	f001 fb64 	bl	80098e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008220:	f000 fc42 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008224:	f001 fb32 	bl	800988c <vPortEnterCritical>
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800822e:	b25b      	sxtb	r3, r3
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d103      	bne.n	800823e <xQueueSemaphoreTake+0x132>
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008244:	b25b      	sxtb	r3, r3
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d103      	bne.n	8008254 <xQueueSemaphoreTake+0x148>
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008254:	f001 fb48 	bl	80098e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008258:	463a      	mov	r2, r7
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fe79 	bl	8008f58 <xTaskCheckForTimeOut>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d132      	bne.n	80082d2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800826c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800826e:	f000 f9cc 	bl	800860a <prvIsQueueEmpty>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d026      	beq.n	80082c6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008280:	f001 fb04 	bl	800988c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 ffc3 	bl	8009214 <xTaskPriorityInherit>
 800828e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008290:	f001 fb2a 	bl	80098e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	3324      	adds	r3, #36	; 0x24
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fdbf 	bl	8008e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082a4:	f000 f95f 	bl	8008566 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082a8:	f000 fc0c 	bl	8008ac4 <xTaskResumeAll>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f47f af69 	bne.w	8008186 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80082b4:	4b18      	ldr	r3, [pc, #96]	; (8008318 <xQueueSemaphoreTake+0x20c>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	e75f      	b.n	8008186 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082c8:	f000 f94d 	bl	8008566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082cc:	f000 fbfa 	bl	8008ac4 <xTaskResumeAll>
 80082d0:	e759      	b.n	8008186 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082d4:	f000 f947 	bl	8008566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d8:	f000 fbf4 	bl	8008ac4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082de:	f000 f994 	bl	800860a <prvIsQueueEmpty>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f43f af4e 	beq.w	8008186 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80082f0:	f001 facc 	bl	800988c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082f6:	f000 f88e 	bl	8008416 <prvGetDisinheritPriorityAfterTimeout>
 80082fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008302:	4618      	mov	r0, r3
 8008304:	f001 f88a 	bl	800941c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008308:	f001 faee 	bl	80098e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800830c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800830e:	4618      	mov	r0, r3
 8008310:	3738      	adds	r7, #56	; 0x38
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08e      	sub	sp, #56	; 0x38
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <xQueueReceiveFromISR+0x2a>
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	623b      	str	r3, [r7, #32]
 8008344:	e7fe      	b.n	8008344 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <xQueueReceiveFromISR+0x38>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <xQueueReceiveFromISR+0x3c>
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <xQueueReceiveFromISR+0x3e>
 8008358:	2300      	movs	r3, #0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <xQueueReceiveFromISR+0x56>
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	e7fe      	b.n	8008370 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008372:	f001 fb67 	bl	8009a44 <vPortValidateInterruptPriority>
	__asm volatile
 8008376:	f3ef 8211 	mrs	r2, BASEPRI
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61ba      	str	r2, [r7, #24]
 800838c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800838e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d02f      	beq.n	80083fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ac:	f000 f8b5 	bl	800851a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	1e5a      	subs	r2, r3, #1
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80083b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c0:	d112      	bne.n	80083e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fd4a 	bl	8008e68 <xTaskRemoveFromEventList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e007      	b.n	80083f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ec:	3301      	adds	r3, #1
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	b25a      	sxtb	r2, r3
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80083f8:	2301      	movs	r3, #1
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	e001      	b.n	8008402 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80083fe:	2300      	movs	r3, #0
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800840e:	4618      	mov	r0, r3
 8008410:	3738      	adds	r7, #56	; 0x38
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b00      	cmp	r3, #0
 8008424:	d006      	beq.n	8008434 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f1c3 0307 	rsb	r3, r3, #7
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e001      	b.n	8008438 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008438:	68fb      	ldr	r3, [r7, #12]
	}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d14d      	bne.n	8008508 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	4618      	mov	r0, r3
 8008472:	f000 ff4f 	bl	8009314 <xTaskPriorityDisinherit>
 8008476:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	609a      	str	r2, [r3, #8]
 800847e:	e043      	b.n	8008508 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d119      	bne.n	80084ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6858      	ldr	r0, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	461a      	mov	r2, r3
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	f003 f84b 	bl	800b52c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	441a      	add	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d32b      	bcc.n	8008508 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	e026      	b.n	8008508 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	461a      	mov	r2, r3
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	f003 f831 	bl	800b52c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	425b      	negs	r3, r3
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d207      	bcs.n	80084f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	425b      	negs	r3, r3
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d105      	bne.n	8008508 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	3b01      	subs	r3, #1
 8008506:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008510:	697b      	ldr	r3, [r7, #20]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d018      	beq.n	800855e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	d303      	bcc.n	800854e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68d9      	ldr	r1, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	461a      	mov	r2, r3
 8008558:	6838      	ldr	r0, [r7, #0]
 800855a:	f002 ffe7 	bl	800b52c <memcpy>
	}
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800856e:	f001 f98d 	bl	800988c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008578:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800857a:	e011      	b.n	80085a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	d012      	beq.n	80085aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3324      	adds	r3, #36	; 0x24
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fc6d 	bl	8008e68 <xTaskRemoveFromEventList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008594:	f000 fd40 	bl	8009018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	3b01      	subs	r3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dce9      	bgt.n	800857c <prvUnlockQueue+0x16>
 80085a8:	e000      	b.n	80085ac <prvUnlockQueue+0x46>
					break;
 80085aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	22ff      	movs	r2, #255	; 0xff
 80085b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085b4:	f001 f998 	bl	80098e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085b8:	f001 f968 	bl	800988c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085c4:	e011      	b.n	80085ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d012      	beq.n	80085f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3310      	adds	r3, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fc48 	bl	8008e68 <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085de:	f000 fd1b 	bl	8009018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dce9      	bgt.n	80085c6 <prvUnlockQueue+0x60>
 80085f2:	e000      	b.n	80085f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	22ff      	movs	r2, #255	; 0xff
 80085fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085fe:	f001 f973 	bl	80098e8 <vPortExitCritical>
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008612:	f001 f93b 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	2b00      	cmp	r3, #0
 800861c:	d102      	bne.n	8008624 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800861e:	2301      	movs	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e001      	b.n	8008628 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008628:	f001 f95e 	bl	80098e8 <vPortExitCritical>

	return xReturn;
 800862c:	68fb      	ldr	r3, [r7, #12]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800863e:	f001 f925 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	429a      	cmp	r2, r3
 800864c:	d102      	bne.n	8008654 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	e001      	b.n	8008658 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008658:	f001 f946 	bl	80098e8 <vPortExitCritical>

	return xReturn;
 800865c:	68fb      	ldr	r3, [r7, #12]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008666:	b580      	push	{r7, lr}
 8008668:	b08e      	sub	sp, #56	; 0x38
 800866a:	af04      	add	r7, sp, #16
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <xTaskCreateStatic+0x28>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	e7fe      	b.n	800868c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <xTaskCreateStatic+0x42>
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	e7fe      	b.n	80086a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086a8:	2354      	movs	r3, #84	; 0x54
 80086aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b54      	cmp	r3, #84	; 0x54
 80086b0:	d009      	beq.n	80086c6 <xTaskCreateStatic+0x60>
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	e7fe      	b.n	80086c4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01e      	beq.n	800870c <xTaskCreateStatic+0xa6>
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01b      	beq.n	800870c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086e6:	2300      	movs	r3, #0
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	9302      	str	r3, [sp, #8]
 80086ee:	f107 0314 	add.w	r3, r7, #20
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f850 	bl	80087a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008706:	f000 f8d3 	bl	80088b0 <prvAddNewTaskToReadyList>
 800870a:	e001      	b.n	8008710 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008710:	697b      	ldr	r3, [r7, #20]
	}
 8008712:	4618      	mov	r0, r3
 8008714:	3728      	adds	r7, #40	; 0x28
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08c      	sub	sp, #48	; 0x30
 800871e:	af04      	add	r7, sp, #16
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4618      	mov	r0, r3
 8008730:	f001 f9c6 	bl	8009ac0 <pvPortMalloc>
 8008734:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00e      	beq.n	800875a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800873c:	2054      	movs	r0, #84	; 0x54
 800873e:	f001 f9bf 	bl	8009ac0 <pvPortMalloc>
 8008742:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	631a      	str	r2, [r3, #48]	; 0x30
 8008750:	e005      	b.n	800875e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008752:	6978      	ldr	r0, [r7, #20]
 8008754:	f001 fa76 	bl	8009c44 <vPortFree>
 8008758:	e001      	b.n	800875e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d017      	beq.n	8008794 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	2300      	movs	r3, #0
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	9302      	str	r3, [sp, #8]
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 f80e 	bl	80087a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008788:	69f8      	ldr	r0, [r7, #28]
 800878a:	f000 f891 	bl	80088b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800878e:	2301      	movs	r3, #1
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e002      	b.n	800879a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008794:	f04f 33ff 	mov.w	r3, #4294967295
 8008798:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800879a:	69bb      	ldr	r3, [r7, #24]
	}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087bc:	3b01      	subs	r3, #1
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <prvInitialiseNewTask+0x46>
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e7fe      	b.n	80087e8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01f      	beq.n	8008830 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087f0:	2300      	movs	r3, #0
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e012      	b.n	800881c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	7819      	ldrb	r1, [r3, #0]
 80087fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	3334      	adds	r3, #52	; 0x34
 8008806:	460a      	mov	r2, r1
 8008808:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d006      	beq.n	8008824 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3301      	adds	r3, #1
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b0f      	cmp	r3, #15
 8008820:	d9e9      	bls.n	80087f6 <prvInitialiseNewTask+0x52>
 8008822:	e000      	b.n	8008826 <prvInitialiseNewTask+0x82>
			{
				break;
 8008824:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800882e:	e003      	b.n	8008838 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2b06      	cmp	r3, #6
 800883c:	d901      	bls.n	8008842 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800883e:	2306      	movs	r3, #6
 8008840:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008846:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2200      	movs	r2, #0
 8008852:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff f81f 	bl	800789c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	3318      	adds	r3, #24
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff f81a 	bl	800789c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	f1c3 0207 	rsb	r2, r3, #7
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800887c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	2200      	movs	r2, #0
 8008882:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	69b8      	ldr	r0, [r7, #24]
 8008892:	f000 fed5 	bl	8009640 <pxPortInitialiseStack>
 8008896:	4602      	mov	r2, r0
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a8:	bf00      	nop
 80088aa:	3720      	adds	r7, #32
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088b8:	f000 ffe8 	bl	800988c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088bc:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <prvAddNewTaskToReadyList+0xb8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3301      	adds	r3, #1
 80088c2:	4a29      	ldr	r2, [pc, #164]	; (8008968 <prvAddNewTaskToReadyList+0xb8>)
 80088c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088c6:	4b29      	ldr	r3, [pc, #164]	; (800896c <prvAddNewTaskToReadyList+0xbc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ce:	4a27      	ldr	r2, [pc, #156]	; (800896c <prvAddNewTaskToReadyList+0xbc>)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <prvAddNewTaskToReadyList+0xb8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d110      	bne.n	80088fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088dc:	f000 fbc2 	bl	8009064 <prvInitialiseTaskLists>
 80088e0:	e00d      	b.n	80088fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088e2:	4b23      	ldr	r3, [pc, #140]	; (8008970 <prvAddNewTaskToReadyList+0xc0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088ea:	4b20      	ldr	r3, [pc, #128]	; (800896c <prvAddNewTaskToReadyList+0xbc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d802      	bhi.n	80088fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088f8:	4a1c      	ldr	r2, [pc, #112]	; (800896c <prvAddNewTaskToReadyList+0xbc>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <prvAddNewTaskToReadyList+0xc4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4a1b      	ldr	r2, [pc, #108]	; (8008974 <prvAddNewTaskToReadyList+0xc4>)
 8008906:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	2201      	movs	r2, #1
 800890e:	409a      	lsls	r2, r3
 8008910:	4b19      	ldr	r3, [pc, #100]	; (8008978 <prvAddNewTaskToReadyList+0xc8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4313      	orrs	r3, r2
 8008916:	4a18      	ldr	r2, [pc, #96]	; (8008978 <prvAddNewTaskToReadyList+0xc8>)
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4a15      	ldr	r2, [pc, #84]	; (800897c <prvAddNewTaskToReadyList+0xcc>)
 8008928:	441a      	add	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fe ffc0 	bl	80078b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008936:	f000 ffd7 	bl	80098e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800893a:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <prvAddNewTaskToReadyList+0xc0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00e      	beq.n	8008960 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <prvAddNewTaskToReadyList+0xbc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	429a      	cmp	r2, r3
 800894e:	d207      	bcs.n	8008960 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <prvAddNewTaskToReadyList+0xd0>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	200001b4 	.word	0x200001b4
 800896c:	200000b4 	.word	0x200000b4
 8008970:	200001c0 	.word	0x200001c0
 8008974:	200001d0 	.word	0x200001d0
 8008978:	200001bc 	.word	0x200001bc
 800897c:	200000b8 	.word	0x200000b8
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <vTaskDelay+0x60>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <vTaskDelay+0x2e>
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60bb      	str	r3, [r7, #8]
 80089b0:	e7fe      	b.n	80089b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80089b2:	f000 f879 	bl	8008aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fddb 	bl	8009574 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089be:	f000 f881 	bl	8008ac4 <xTaskResumeAll>
 80089c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d107      	bne.n	80089da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <vTaskDelay+0x64>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200001dc 	.word	0x200001dc
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08a      	sub	sp, #40	; 0x28
 80089f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089fa:	463a      	mov	r2, r7
 80089fc:	1d39      	adds	r1, r7, #4
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fa3a 	bl	8009e7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	2300      	movs	r3, #0
 8008a18:	460a      	mov	r2, r1
 8008a1a:	491d      	ldr	r1, [pc, #116]	; (8008a90 <vTaskStartScheduler+0xa4>)
 8008a1c:	481d      	ldr	r0, [pc, #116]	; (8008a94 <vTaskStartScheduler+0xa8>)
 8008a1e:	f7ff fe22 	bl	8008666 <xTaskCreateStatic>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <vTaskStartScheduler+0xac>)
 8008a26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a28:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <vTaskStartScheduler+0xac>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e001      	b.n	8008a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d115      	bne.n	8008a6c <vTaskStartScheduler+0x80>
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a52:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <vTaskStartScheduler+0xb0>)
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <vTaskStartScheduler+0xb4>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a60:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <vTaskStartScheduler+0xb8>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a66:	f000 fe73 	bl	8009750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a6a:	e00d      	b.n	8008a88 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d109      	bne.n	8008a88 <vTaskStartScheduler+0x9c>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e7fe      	b.n	8008a86 <vTaskStartScheduler+0x9a>
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	0800b71c 	.word	0x0800b71c
 8008a94:	08009031 	.word	0x08009031
 8008a98:	200001d8 	.word	0x200001d8
 8008a9c:	200001d4 	.word	0x200001d4
 8008aa0:	200001c0 	.word	0x200001c0
 8008aa4:	200001b8 	.word	0x200001b8

08008aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008aac:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <vTaskSuspendAll+0x18>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4a03      	ldr	r2, [pc, #12]	; (8008ac0 <vTaskSuspendAll+0x18>)
 8008ab4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008ab6:	bf00      	nop
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	200001dc 	.word	0x200001dc

08008ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ad2:	4b41      	ldr	r3, [pc, #260]	; (8008bd8 <xTaskResumeAll+0x114>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d109      	bne.n	8008aee <xTaskResumeAll+0x2a>
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	e7fe      	b.n	8008aec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aee:	f000 fecd 	bl	800988c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008af2:	4b39      	ldr	r3, [pc, #228]	; (8008bd8 <xTaskResumeAll+0x114>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4a37      	ldr	r2, [pc, #220]	; (8008bd8 <xTaskResumeAll+0x114>)
 8008afa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afc:	4b36      	ldr	r3, [pc, #216]	; (8008bd8 <xTaskResumeAll+0x114>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d161      	bne.n	8008bc8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b04:	4b35      	ldr	r3, [pc, #212]	; (8008bdc <xTaskResumeAll+0x118>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d05d      	beq.n	8008bc8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b0c:	e02e      	b.n	8008b6c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0e:	4b34      	ldr	r3, [pc, #208]	; (8008be0 <xTaskResumeAll+0x11c>)
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3318      	adds	r3, #24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe ff28 	bl	8007970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe ff23 	bl	8007970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	2201      	movs	r2, #1
 8008b30:	409a      	lsls	r2, r3
 8008b32:	4b2c      	ldr	r3, [pc, #176]	; (8008be4 <xTaskResumeAll+0x120>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	4a2a      	ldr	r2, [pc, #168]	; (8008be4 <xTaskResumeAll+0x120>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a27      	ldr	r2, [pc, #156]	; (8008be8 <xTaskResumeAll+0x124>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe feaf 	bl	80078b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	4b23      	ldr	r3, [pc, #140]	; (8008bec <xTaskResumeAll+0x128>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d302      	bcc.n	8008b6c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <xTaskResumeAll+0x12c>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b6c:	4b1c      	ldr	r3, [pc, #112]	; (8008be0 <xTaskResumeAll+0x11c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1cc      	bne.n	8008b0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b7a:	f000 fb0d 	bl	8009198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <xTaskResumeAll+0x130>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d010      	beq.n	8008bac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b8a:	f000 f837 	bl	8008bfc <xTaskIncrementTick>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008b94:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <xTaskResumeAll+0x12c>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f1      	bne.n	8008b8a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008ba6:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <xTaskResumeAll+0x130>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bac:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <xTaskResumeAll+0x12c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <xTaskResumeAll+0x134>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bc8:	f000 fe8e 	bl	80098e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	200001dc 	.word	0x200001dc
 8008bdc:	200001b4 	.word	0x200001b4
 8008be0:	20000174 	.word	0x20000174
 8008be4:	200001bc 	.word	0x200001bc
 8008be8:	200000b8 	.word	0x200000b8
 8008bec:	200000b4 	.word	0x200000b4
 8008bf0:	200001c8 	.word	0x200001c8
 8008bf4:	200001c4 	.word	0x200001c4
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c06:	4b4e      	ldr	r3, [pc, #312]	; (8008d40 <xTaskIncrementTick+0x144>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 8087 	bne.w	8008d1e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c10:	4b4c      	ldr	r3, [pc, #304]	; (8008d44 <xTaskIncrementTick+0x148>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3301      	adds	r3, #1
 8008c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c18:	4a4a      	ldr	r2, [pc, #296]	; (8008d44 <xTaskIncrementTick+0x148>)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11f      	bne.n	8008c64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c24:	4b48      	ldr	r3, [pc, #288]	; (8008d48 <xTaskIncrementTick+0x14c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <xTaskIncrementTick+0x46>
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	e7fe      	b.n	8008c40 <xTaskIncrementTick+0x44>
 8008c42:	4b41      	ldr	r3, [pc, #260]	; (8008d48 <xTaskIncrementTick+0x14c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	4b40      	ldr	r3, [pc, #256]	; (8008d4c <xTaskIncrementTick+0x150>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a3e      	ldr	r2, [pc, #248]	; (8008d48 <xTaskIncrementTick+0x14c>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4a3e      	ldr	r2, [pc, #248]	; (8008d4c <xTaskIncrementTick+0x150>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4b3e      	ldr	r3, [pc, #248]	; (8008d50 <xTaskIncrementTick+0x154>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	4a3c      	ldr	r2, [pc, #240]	; (8008d50 <xTaskIncrementTick+0x154>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	f000 fa9a 	bl	8009198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c64:	4b3b      	ldr	r3, [pc, #236]	; (8008d54 <xTaskIncrementTick+0x158>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d348      	bcc.n	8008d00 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c6e:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <xTaskIncrementTick+0x14c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c78:	4b36      	ldr	r3, [pc, #216]	; (8008d54 <xTaskIncrementTick+0x158>)
 8008c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7e:	601a      	str	r2, [r3, #0]
					break;
 8008c80:	e03e      	b.n	8008d00 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c82:	4b31      	ldr	r3, [pc, #196]	; (8008d48 <xTaskIncrementTick+0x14c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d203      	bcs.n	8008ca2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c9a:	4a2e      	ldr	r2, [pc, #184]	; (8008d54 <xTaskIncrementTick+0x158>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ca0:	e02e      	b.n	8008d00 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fe62 	bl	8007970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3318      	adds	r3, #24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe fe59 	bl	8007970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	409a      	lsls	r2, r3
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <xTaskIncrementTick+0x15c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	4a22      	ldr	r2, [pc, #136]	; (8008d58 <xTaskIncrementTick+0x15c>)
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a1f      	ldr	r2, [pc, #124]	; (8008d5c <xTaskIncrementTick+0x160>)
 8008cde:	441a      	add	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fde5 	bl	80078b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <xTaskIncrementTick+0x164>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d3b9      	bcc.n	8008c6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cfe:	e7b6      	b.n	8008c6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d00:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <xTaskIncrementTick+0x164>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d06:	4915      	ldr	r1, [pc, #84]	; (8008d5c <xTaskIncrementTick+0x160>)
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d907      	bls.n	8008d28 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e004      	b.n	8008d28 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d1e:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <xTaskIncrementTick+0x168>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a0f      	ldr	r2, [pc, #60]	; (8008d64 <xTaskIncrementTick+0x168>)
 8008d26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <xTaskIncrementTick+0x16c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d34:	697b      	ldr	r3, [r7, #20]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	200001dc 	.word	0x200001dc
 8008d44:	200001b8 	.word	0x200001b8
 8008d48:	2000016c 	.word	0x2000016c
 8008d4c:	20000170 	.word	0x20000170
 8008d50:	200001cc 	.word	0x200001cc
 8008d54:	200001d4 	.word	0x200001d4
 8008d58:	200001bc 	.word	0x200001bc
 8008d5c:	200000b8 	.word	0x200000b8
 8008d60:	200000b4 	.word	0x200000b4
 8008d64:	200001c4 	.word	0x200001c4
 8008d68:	200001c8 	.word	0x200001c8

08008d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d72:	4b26      	ldr	r3, [pc, #152]	; (8008e0c <vTaskSwitchContext+0xa0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d7a:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <vTaskSwitchContext+0xa4>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d80:	e03e      	b.n	8008e00 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008d82:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <vTaskSwitchContext+0xa4>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d88:	4b22      	ldr	r3, [pc, #136]	; (8008e14 <vTaskSwitchContext+0xa8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	fab3 f383 	clz	r3, r3
 8008d94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	f1c3 031f 	rsb	r3, r3, #31
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	491e      	ldr	r1, [pc, #120]	; (8008e18 <vTaskSwitchContext+0xac>)
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	e7fe      	b.n	8008dc4 <vTaskSwitchContext+0x58>
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4a11      	ldr	r2, [pc, #68]	; (8008e18 <vTaskSwitchContext+0xac>)
 8008dd2:	4413      	add	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	605a      	str	r2, [r3, #4]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	3308      	adds	r3, #8
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d104      	bne.n	8008df6 <vTaskSwitchContext+0x8a>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <vTaskSwitchContext+0xb0>)
 8008dfe:	6013      	str	r3, [r2, #0]
}
 8008e00:	bf00      	nop
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	200001dc 	.word	0x200001dc
 8008e10:	200001c8 	.word	0x200001c8
 8008e14:	200001bc 	.word	0x200001bc
 8008e18:	200000b8 	.word	0x200000b8
 8008e1c:	200000b4 	.word	0x200000b4

08008e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d109      	bne.n	8008e44 <vTaskPlaceOnEventList+0x24>
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e7fe      	b.n	8008e42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <vTaskPlaceOnEventList+0x44>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3318      	adds	r3, #24
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fe fd56 	bl	80078fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e52:	2101      	movs	r1, #1
 8008e54:	6838      	ldr	r0, [r7, #0]
 8008e56:	f000 fb8d 	bl	8009574 <prvAddCurrentTaskToDelayedList>
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200000b4 	.word	0x200000b4

08008e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d109      	bne.n	8008e92 <xTaskRemoveFromEventList+0x2a>
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e7fe      	b.n	8008e90 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	3318      	adds	r3, #24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fd6a 	bl	8007970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9c:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <xTaskRemoveFromEventList+0xac>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d11c      	bne.n	8008ede <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fd61 	bl	8007970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	409a      	lsls	r2, r3
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <xTaskRemoveFromEventList+0xb0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <xTaskRemoveFromEventList+0xb0>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <xTaskRemoveFromEventList+0xb4>)
 8008ece:	441a      	add	r2, r3
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	f7fe fced 	bl	80078b6 <vListInsertEnd>
 8008edc:	e005      	b.n	8008eea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	480e      	ldr	r0, [pc, #56]	; (8008f20 <xTaskRemoveFromEventList+0xb8>)
 8008ee6:	f7fe fce6 	bl	80078b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <xTaskRemoveFromEventList+0xbc>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d905      	bls.n	8008f04 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <xTaskRemoveFromEventList+0xc0>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e001      	b.n	8008f08 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f08:	697b      	ldr	r3, [r7, #20]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200001dc 	.word	0x200001dc
 8008f18:	200001bc 	.word	0x200001bc
 8008f1c:	200000b8 	.word	0x200000b8
 8008f20:	20000174 	.word	0x20000174
 8008f24:	200000b4 	.word	0x200000b4
 8008f28:	200001c8 	.word	0x200001c8

08008f2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f34:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <vTaskInternalSetTimeOutState+0x24>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <vTaskInternalSetTimeOutState+0x28>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	605a      	str	r2, [r3, #4]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	200001cc 	.word	0x200001cc
 8008f54:	200001b8 	.word	0x200001b8

08008f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <xTaskCheckForTimeOut+0x24>
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e7fe      	b.n	8008f7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <xTaskCheckForTimeOut+0x3e>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e7fe      	b.n	8008f94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008f96:	f000 fc79 	bl	800988c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f9a:	4b1d      	ldr	r3, [pc, #116]	; (8009010 <xTaskCheckForTimeOut+0xb8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d102      	bne.n	8008fba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61fb      	str	r3, [r7, #28]
 8008fb8:	e023      	b.n	8009002 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b15      	ldr	r3, [pc, #84]	; (8009014 <xTaskCheckForTimeOut+0xbc>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d007      	beq.n	8008fd6 <xTaskCheckForTimeOut+0x7e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d302      	bcc.n	8008fd6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
 8008fd4:	e015      	b.n	8009002 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d20b      	bcs.n	8008ff8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad2      	subs	r2, r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff ff9d 	bl	8008f2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	e004      	b.n	8009002 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ffe:	2301      	movs	r3, #1
 8009000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009002:	f000 fc71 	bl	80098e8 <vPortExitCritical>

	return xReturn;
 8009006:	69fb      	ldr	r3, [r7, #28]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200001b8 	.word	0x200001b8
 8009014:	200001cc 	.word	0x200001cc

08009018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800901c:	4b03      	ldr	r3, [pc, #12]	; (800902c <vTaskMissedYield+0x14>)
 800901e:	2201      	movs	r2, #1
 8009020:	601a      	str	r2, [r3, #0]
}
 8009022:	bf00      	nop
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	200001c8 	.word	0x200001c8

08009030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009038:	f000 f854 	bl	80090e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800903c:	4b07      	ldr	r3, [pc, #28]	; (800905c <prvIdleTask+0x2c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d907      	bls.n	8009054 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <prvIdleTask+0x30>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009054:	f000 ff0a 	bl	8009e6c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009058:	e7ee      	b.n	8009038 <prvIdleTask+0x8>
 800905a:	bf00      	nop
 800905c:	200000b8 	.word	0x200000b8
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800906a:	2300      	movs	r3, #0
 800906c:	607b      	str	r3, [r7, #4]
 800906e:	e00c      	b.n	800908a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <prvInitialiseTaskLists+0x60>)
 800907c:	4413      	add	r3, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fbec 	bl	800785c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3301      	adds	r3, #1
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b06      	cmp	r3, #6
 800908e:	d9ef      	bls.n	8009070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009090:	480d      	ldr	r0, [pc, #52]	; (80090c8 <prvInitialiseTaskLists+0x64>)
 8009092:	f7fe fbe3 	bl	800785c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009096:	480d      	ldr	r0, [pc, #52]	; (80090cc <prvInitialiseTaskLists+0x68>)
 8009098:	f7fe fbe0 	bl	800785c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800909c:	480c      	ldr	r0, [pc, #48]	; (80090d0 <prvInitialiseTaskLists+0x6c>)
 800909e:	f7fe fbdd 	bl	800785c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090a2:	480c      	ldr	r0, [pc, #48]	; (80090d4 <prvInitialiseTaskLists+0x70>)
 80090a4:	f7fe fbda 	bl	800785c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a8:	480b      	ldr	r0, [pc, #44]	; (80090d8 <prvInitialiseTaskLists+0x74>)
 80090aa:	f7fe fbd7 	bl	800785c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ae:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <prvInitialiseTaskLists+0x78>)
 80090b0:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <prvInitialiseTaskLists+0x64>)
 80090b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <prvInitialiseTaskLists+0x7c>)
 80090b6:	4a05      	ldr	r2, [pc, #20]	; (80090cc <prvInitialiseTaskLists+0x68>)
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200000b8 	.word	0x200000b8
 80090c8:	20000144 	.word	0x20000144
 80090cc:	20000158 	.word	0x20000158
 80090d0:	20000174 	.word	0x20000174
 80090d4:	20000188 	.word	0x20000188
 80090d8:	200001a0 	.word	0x200001a0
 80090dc:	2000016c 	.word	0x2000016c
 80090e0:	20000170 	.word	0x20000170

080090e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090ea:	e019      	b.n	8009120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090ec:	f000 fbce 	bl	800988c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <prvCheckTasksWaitingTermination+0x4c>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fc37 	bl	8007970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <prvCheckTasksWaitingTermination+0x50>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3b01      	subs	r3, #1
 8009108:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvCheckTasksWaitingTermination+0x50>)
 800910a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvCheckTasksWaitingTermination+0x54>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	4a09      	ldr	r2, [pc, #36]	; (8009138 <prvCheckTasksWaitingTermination+0x54>)
 8009114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009116:	f000 fbe7 	bl	80098e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f80e 	bl	800913c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <prvCheckTasksWaitingTermination+0x54>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e1      	bne.n	80090ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000188 	.word	0x20000188
 8009134:	200001b4 	.word	0x200001b4
 8009138:	2000019c 	.word	0x2000019c

0800913c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800914a:	2b00      	cmp	r3, #0
 800914c:	d108      	bne.n	8009160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fd76 	bl	8009c44 <vPortFree>
				vPortFree( pxTCB );
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fd73 	bl	8009c44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800915e:	e017      	b.n	8009190 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009166:	2b01      	cmp	r3, #1
 8009168:	d103      	bne.n	8009172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fd6a 	bl	8009c44 <vPortFree>
	}
 8009170:	e00e      	b.n	8009190 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009178:	2b02      	cmp	r3, #2
 800917a:	d009      	beq.n	8009190 <prvDeleteTCB+0x54>
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	e7fe      	b.n	800918e <prvDeleteTCB+0x52>
	}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091b0:	e008      	b.n	80091c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	2000016c 	.word	0x2000016c
 80091d4:	200001d4 	.word	0x200001d4

080091d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091de:	4b0b      	ldr	r3, [pc, #44]	; (800920c <xTaskGetSchedulerState+0x34>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091e6:	2301      	movs	r3, #1
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	e008      	b.n	80091fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <xTaskGetSchedulerState+0x38>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091f4:	2302      	movs	r3, #2
 80091f6:	607b      	str	r3, [r7, #4]
 80091f8:	e001      	b.n	80091fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091fe:	687b      	ldr	r3, [r7, #4]
	}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	200001c0 	.word	0x200001c0
 8009210:	200001dc 	.word	0x200001dc

08009214 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d069      	beq.n	80092fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	4b36      	ldr	r3, [pc, #216]	; (8009308 <xTaskPriorityInherit+0xf4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	429a      	cmp	r2, r3
 8009236:	d259      	bcs.n	80092ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	db06      	blt.n	800924e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009240:	4b31      	ldr	r3, [pc, #196]	; (8009308 <xTaskPriorityInherit+0xf4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	f1c3 0207 	rsb	r2, r3, #7
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6959      	ldr	r1, [r3, #20]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4a2b      	ldr	r2, [pc, #172]	; (800930c <xTaskPriorityInherit+0xf8>)
 8009260:	4413      	add	r3, r2
 8009262:	4299      	cmp	r1, r3
 8009264:	d13a      	bne.n	80092dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	3304      	adds	r3, #4
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fb80 	bl	8007970 <uxListRemove>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d115      	bne.n	80092a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4924      	ldr	r1, [pc, #144]	; (800930c <xTaskPriorityInherit+0xf8>)
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xTaskPriorityInherit+0x8e>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	2201      	movs	r2, #1
 8009292:	fa02 f303 	lsl.w	r3, r2, r3
 8009296:	43da      	mvns	r2, r3
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <xTaskPriorityInherit+0xfc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4013      	ands	r3, r2
 800929e:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <xTaskPriorityInherit+0xfc>)
 80092a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <xTaskPriorityInherit+0xf4>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	2201      	movs	r2, #1
 80092b2:	409a      	lsls	r2, r3
 80092b4:	4b16      	ldr	r3, [pc, #88]	; (8009310 <xTaskPriorityInherit+0xfc>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	4a15      	ldr	r2, [pc, #84]	; (8009310 <xTaskPriorityInherit+0xfc>)
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4a10      	ldr	r2, [pc, #64]	; (800930c <xTaskPriorityInherit+0xf8>)
 80092cc:	441a      	add	r2, r3
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7fe faee 	bl	80078b6 <vListInsertEnd>
 80092da:	e004      	b.n	80092e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <xTaskPriorityInherit+0xf4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80092e6:	2301      	movs	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e008      	b.n	80092fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f0:	4b05      	ldr	r3, [pc, #20]	; (8009308 <xTaskPriorityInherit+0xf4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d201      	bcs.n	80092fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200000b4 	.word	0x200000b4
 800930c:	200000b8 	.word	0x200000b8
 8009310:	200001bc 	.word	0x200001bc

08009314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d06c      	beq.n	8009404 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800932a:	4b39      	ldr	r3, [pc, #228]	; (8009410 <xTaskPriorityDisinherit+0xfc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	429a      	cmp	r2, r3
 8009332:	d009      	beq.n	8009348 <xTaskPriorityDisinherit+0x34>
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	e7fe      	b.n	8009346 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <xTaskPriorityDisinherit+0x50>
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	e7fe      	b.n	8009362 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	429a      	cmp	r2, r3
 8009378:	d044      	beq.n	8009404 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937e:	2b00      	cmp	r3, #0
 8009380:	d140      	bne.n	8009404 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3304      	adds	r3, #4
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe faf2 	bl	8007970 <uxListRemove>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d115      	bne.n	80093be <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009396:	491f      	ldr	r1, [pc, #124]	; (8009414 <xTaskPriorityDisinherit+0x100>)
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xTaskPriorityDisinherit+0xaa>
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	2201      	movs	r2, #1
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	43da      	mvns	r2, r3
 80093b4:	4b18      	ldr	r3, [pc, #96]	; (8009418 <xTaskPriorityDisinherit+0x104>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4013      	ands	r3, r2
 80093ba:	4a17      	ldr	r2, [pc, #92]	; (8009418 <xTaskPriorityDisinherit+0x104>)
 80093bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	f1c3 0207 	rsb	r2, r3, #7
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	2201      	movs	r2, #1
 80093d8:	409a      	lsls	r2, r3
 80093da:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <xTaskPriorityDisinherit+0x104>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4313      	orrs	r3, r2
 80093e0:	4a0d      	ldr	r2, [pc, #52]	; (8009418 <xTaskPriorityDisinherit+0x104>)
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4a08      	ldr	r2, [pc, #32]	; (8009414 <xTaskPriorityDisinherit+0x100>)
 80093f2:	441a      	add	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f7fe fa5b 	bl	80078b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009404:	697b      	ldr	r3, [r7, #20]
	}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200000b4 	.word	0x200000b4
 8009414:	200000b8 	.word	0x200000b8
 8009418:	200001bc 	.word	0x200001bc

0800941c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800942a:	2301      	movs	r3, #1
 800942c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8081 	beq.w	8009538 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e7fe      	b.n	8009450 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d902      	bls.n	8009462 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e002      	b.n	8009468 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	429a      	cmp	r2, r3
 8009470:	d062      	beq.n	8009538 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d15d      	bne.n	8009538 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800947c:	4b30      	ldr	r3, [pc, #192]	; (8009540 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	429a      	cmp	r2, r3
 8009484:	d109      	bne.n	800949a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60bb      	str	r3, [r7, #8]
 8009498:	e7fe      	b.n	8009498 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	db04      	blt.n	80094b8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	f1c3 0207 	rsb	r2, r3, #7
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	6959      	ldr	r1, [r3, #20]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4a1f      	ldr	r2, [pc, #124]	; (8009544 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80094c8:	4413      	add	r3, r2
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d134      	bne.n	8009538 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fa4c 	bl	8007970 <uxListRemove>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d115      	bne.n	800950a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e2:	4918      	ldr	r1, [pc, #96]	; (8009544 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	2201      	movs	r2, #1
 80094fa:	fa02 f303 	lsl.w	r3, r2, r3
 80094fe:	43da      	mvns	r2, r3
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4013      	ands	r3, r2
 8009506:	4a10      	ldr	r2, [pc, #64]	; (8009548 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009508:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	2201      	movs	r2, #1
 8009510:	409a      	lsls	r2, r3
 8009512:	4b0d      	ldr	r3, [pc, #52]	; (8009548 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	4a0b      	ldr	r2, [pc, #44]	; (8009548 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4a06      	ldr	r2, [pc, #24]	; (8009544 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800952a:	441a      	add	r2, r3
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7fe f9bf 	bl	80078b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009538:	bf00      	nop
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200000b4 	.word	0x200000b4
 8009544:	200000b8 	.word	0x200000b8
 8009548:	200001bc 	.word	0x200001bc

0800954c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <pvTaskIncrementMutexHeldCount+0x24>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <pvTaskIncrementMutexHeldCount+0x24>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800955e:	3201      	adds	r2, #1
 8009560:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <pvTaskIncrementMutexHeldCount+0x24>)
 8009564:	681b      	ldr	r3, [r3, #0]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	200000b4 	.word	0x200000b4

08009574 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800957e:	4b29      	ldr	r3, [pc, #164]	; (8009624 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009584:	4b28      	ldr	r3, [pc, #160]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3304      	adds	r3, #4
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe f9f0 	bl	8007970 <uxListRemove>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009596:	4b24      	ldr	r3, [pc, #144]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	2201      	movs	r2, #1
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	43da      	mvns	r2, r3
 80095a4:	4b21      	ldr	r3, [pc, #132]	; (800962c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4013      	ands	r3, r2
 80095aa:	4a20      	ldr	r2, [pc, #128]	; (800962c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d10a      	bne.n	80095cc <prvAddCurrentTaskToDelayedList+0x58>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4619      	mov	r1, r3
 80095c4:	481a      	ldr	r0, [pc, #104]	; (8009630 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095c6:	f7fe f976 	bl	80078b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095ca:	e026      	b.n	800961a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4413      	add	r3, r2
 80095d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095d4:	4b14      	ldr	r3, [pc, #80]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d209      	bcs.n	80095f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095e4:	4b13      	ldr	r3, [pc, #76]	; (8009634 <prvAddCurrentTaskToDelayedList+0xc0>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7fe f984 	bl	80078fe <vListInsert>
}
 80095f6:	e010      	b.n	800961a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f8:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <prvAddCurrentTaskToDelayedList+0xc4>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f7fe f97a 	bl	80078fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <prvAddCurrentTaskToDelayedList+0xc8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	429a      	cmp	r2, r3
 8009612:	d202      	bcs.n	800961a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009614:	4a09      	ldr	r2, [pc, #36]	; (800963c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6013      	str	r3, [r2, #0]
}
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200001b8 	.word	0x200001b8
 8009628:	200000b4 	.word	0x200000b4
 800962c:	200001bc 	.word	0x200001bc
 8009630:	200001a0 	.word	0x200001a0
 8009634:	20000170 	.word	0x20000170
 8009638:	2000016c 	.word	0x2000016c
 800963c:	200001d4 	.word	0x200001d4

08009640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3b04      	subs	r3, #4
 8009650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3b04      	subs	r3, #4
 800965e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f023 0201 	bic.w	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3b04      	subs	r3, #4
 800966e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009670:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <pxPortInitialiseStack+0x64>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3b14      	subs	r3, #20
 800967a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b04      	subs	r3, #4
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f06f 0202 	mvn.w	r2, #2
 800968e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3b20      	subs	r3, #32
 8009694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009696:	68fb      	ldr	r3, [r7, #12]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	080096a9 	.word	0x080096a9

080096a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <prvTaskExitError+0x50>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ba:	d009      	beq.n	80096d0 <prvTaskExitError+0x28>
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e7fe      	b.n	80096ce <prvTaskExitError+0x26>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096e2:	bf00      	nop
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0fc      	beq.n	80096e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000028 	.word	0x20000028
 80096fc:	00000000 	.word	0x00000000

08009700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <pxCurrentTCBConst2>)
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	6808      	ldr	r0, [r1, #0]
 8009706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	f380 8809 	msr	PSP, r0
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f04f 0000 	mov.w	r0, #0
 8009716:	f380 8811 	msr	BASEPRI, r0
 800971a:	4770      	bx	lr
 800971c:	f3af 8000 	nop.w

08009720 <pxCurrentTCBConst2>:
 8009720:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop

08009728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009728:	4808      	ldr	r0, [pc, #32]	; (800974c <prvPortStartFirstTask+0x24>)
 800972a:	6800      	ldr	r0, [r0, #0]
 800972c:	6800      	ldr	r0, [r0, #0]
 800972e:	f380 8808 	msr	MSP, r0
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8814 	msr	CONTROL, r0
 800973a:	b662      	cpsie	i
 800973c:	b661      	cpsie	f
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	df00      	svc	0
 8009748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800974a:	bf00      	nop
 800974c:	e000ed08 	.word	0xe000ed08

08009750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009756:	4b44      	ldr	r3, [pc, #272]	; (8009868 <xPortStartScheduler+0x118>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a44      	ldr	r2, [pc, #272]	; (800986c <xPortStartScheduler+0x11c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d109      	bne.n	8009774 <xPortStartScheduler+0x24>
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	e7fe      	b.n	8009772 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009774:	4b3c      	ldr	r3, [pc, #240]	; (8009868 <xPortStartScheduler+0x118>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a3d      	ldr	r2, [pc, #244]	; (8009870 <xPortStartScheduler+0x120>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d109      	bne.n	8009792 <xPortStartScheduler+0x42>
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	e7fe      	b.n	8009790 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009792:	4b38      	ldr	r3, [pc, #224]	; (8009874 <xPortStartScheduler+0x124>)
 8009794:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	22ff      	movs	r2, #255	; 0xff
 80097a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	4b30      	ldr	r3, [pc, #192]	; (8009878 <xPortStartScheduler+0x128>)
 80097b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097ba:	4b30      	ldr	r3, [pc, #192]	; (800987c <xPortStartScheduler+0x12c>)
 80097bc:	2207      	movs	r2, #7
 80097be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097c0:	e009      	b.n	80097d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80097c2:	4b2e      	ldr	r3, [pc, #184]	; (800987c <xPortStartScheduler+0x12c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4a2c      	ldr	r2, [pc, #176]	; (800987c <xPortStartScheduler+0x12c>)
 80097ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b80      	cmp	r3, #128	; 0x80
 80097e0:	d0ef      	beq.n	80097c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <xPortStartScheduler+0x12c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1c3 0307 	rsb	r3, r3, #7
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d009      	beq.n	8009802 <xPortStartScheduler+0xb2>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	60bb      	str	r3, [r7, #8]
 8009800:	e7fe      	b.n	8009800 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009802:	4b1e      	ldr	r3, [pc, #120]	; (800987c <xPortStartScheduler+0x12c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	4a1c      	ldr	r2, [pc, #112]	; (800987c <xPortStartScheduler+0x12c>)
 800980a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800980c:	4b1b      	ldr	r3, [pc, #108]	; (800987c <xPortStartScheduler+0x12c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009814:	4a19      	ldr	r2, [pc, #100]	; (800987c <xPortStartScheduler+0x12c>)
 8009816:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009820:	4b17      	ldr	r3, [pc, #92]	; (8009880 <xPortStartScheduler+0x130>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a16      	ldr	r2, [pc, #88]	; (8009880 <xPortStartScheduler+0x130>)
 8009826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800982a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800982c:	4b14      	ldr	r3, [pc, #80]	; (8009880 <xPortStartScheduler+0x130>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a13      	ldr	r2, [pc, #76]	; (8009880 <xPortStartScheduler+0x130>)
 8009832:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009836:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009838:	f000 f8d6 	bl	80099e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <xPortStartScheduler+0x134>)
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009842:	f000 f8f5 	bl	8009a30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009846:	4b10      	ldr	r3, [pc, #64]	; (8009888 <xPortStartScheduler+0x138>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a0f      	ldr	r2, [pc, #60]	; (8009888 <xPortStartScheduler+0x138>)
 800984c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009850:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009852:	f7ff ff69 	bl	8009728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009856:	f7ff fa89 	bl	8008d6c <vTaskSwitchContext>
	prvTaskExitError();
 800985a:	f7ff ff25 	bl	80096a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed00 	.word	0xe000ed00
 800986c:	410fc271 	.word	0x410fc271
 8009870:	410fc270 	.word	0x410fc270
 8009874:	e000e400 	.word	0xe000e400
 8009878:	200001e0 	.word	0x200001e0
 800987c:	200001e4 	.word	0x200001e4
 8009880:	e000ed20 	.word	0xe000ed20
 8009884:	20000028 	.word	0x20000028
 8009888:	e000ef34 	.word	0xe000ef34

0800988c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098a4:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <vPortEnterCritical+0x54>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	4a0d      	ldr	r2, [pc, #52]	; (80098e0 <vPortEnterCritical+0x54>)
 80098ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098ae:	4b0c      	ldr	r3, [pc, #48]	; (80098e0 <vPortEnterCritical+0x54>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d10e      	bne.n	80098d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <vPortEnterCritical+0x58>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <vPortEnterCritical+0x48>
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	603b      	str	r3, [r7, #0]
 80098d2:	e7fe      	b.n	80098d2 <vPortEnterCritical+0x46>
	}
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	20000028 	.word	0x20000028
 80098e4:	e000ed04 	.word	0xe000ed04

080098e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ee:	4b11      	ldr	r3, [pc, #68]	; (8009934 <vPortExitCritical+0x4c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <vPortExitCritical+0x22>
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	e7fe      	b.n	8009908 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <vPortExitCritical+0x4c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3b01      	subs	r3, #1
 8009910:	4a08      	ldr	r2, [pc, #32]	; (8009934 <vPortExitCritical+0x4c>)
 8009912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009914:	4b07      	ldr	r3, [pc, #28]	; (8009934 <vPortExitCritical+0x4c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <vPortExitCritical+0x3e>
 800991c:	2300      	movs	r3, #0
 800991e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000028 	.word	0x20000028
	...

08009940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009940:	f3ef 8009 	mrs	r0, PSP
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <pxCurrentTCBConst>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	f01e 0f10 	tst.w	lr, #16
 8009950:	bf08      	it	eq
 8009952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	6010      	str	r0, [r2, #0]
 800995c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009964:	f380 8811 	msr	BASEPRI, r0
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f7ff f9fc 	bl	8008d6c <vTaskSwitchContext>
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f380 8811 	msr	BASEPRI, r0
 800997c:	bc09      	pop	{r0, r3}
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009986:	f01e 0f10 	tst.w	lr, #16
 800998a:	bf08      	it	eq
 800998c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009990:	f380 8809 	msr	PSP, r0
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst>:
 80099a0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c0:	f7ff f91c 	bl	8008bfc <xTaskIncrementTick>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ca:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <SysTick_Handler+0x3c>)
 80099cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	2300      	movs	r3, #0
 80099d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099ec:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <vPortSetupTimerInterrupt+0x34>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099f2:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <vPortSetupTimerInterrupt+0x38>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099f8:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <vPortSetupTimerInterrupt+0x3c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a0a      	ldr	r2, [pc, #40]	; (8009a28 <vPortSetupTimerInterrupt+0x40>)
 80099fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009a02:	099b      	lsrs	r3, r3, #6
 8009a04:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <vPortSetupTimerInterrupt+0x44>)
 8009a06:	3b01      	subs	r3, #1
 8009a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a0a:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <vPortSetupTimerInterrupt+0x34>)
 8009a0c:	2207      	movs	r2, #7
 8009a0e:	601a      	str	r2, [r3, #0]
}
 8009a10:	bf00      	nop
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	e000e010 	.word	0xe000e010
 8009a20:	e000e018 	.word	0xe000e018
 8009a24:	2000002c 	.word	0x2000002c
 8009a28:	10624dd3 	.word	0x10624dd3
 8009a2c:	e000e014 	.word	0xe000e014

08009a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a40 <vPortEnableVFP+0x10>
 8009a34:	6801      	ldr	r1, [r0, #0]
 8009a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a3a:	6001      	str	r1, [r0, #0]
 8009a3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a3e:	bf00      	nop
 8009a40:	e000ed88 	.word	0xe000ed88

08009a44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a4a:	f3ef 8305 	mrs	r3, IPSR
 8009a4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b0f      	cmp	r3, #15
 8009a54:	d913      	bls.n	8009a7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a56:	4a16      	ldr	r2, [pc, #88]	; (8009ab0 <vPortValidateInterruptPriority+0x6c>)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a60:	4b14      	ldr	r3, [pc, #80]	; (8009ab4 <vPortValidateInterruptPriority+0x70>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	7afa      	ldrb	r2, [r7, #11]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d209      	bcs.n	8009a7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	607b      	str	r3, [r7, #4]
 8009a7c:	e7fe      	b.n	8009a7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <vPortValidateInterruptPriority+0x74>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <vPortValidateInterruptPriority+0x78>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d909      	bls.n	8009aa2 <vPortValidateInterruptPriority+0x5e>
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	e7fe      	b.n	8009aa0 <vPortValidateInterruptPriority+0x5c>
	}
 8009aa2:	bf00      	nop
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	e000e3f0 	.word	0xe000e3f0
 8009ab4:	200001e0 	.word	0x200001e0
 8009ab8:	e000ed0c 	.word	0xe000ed0c
 8009abc:	200001e4 	.word	0x200001e4

08009ac0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08a      	sub	sp, #40	; 0x28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009acc:	f7fe ffec 	bl	8008aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ad0:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <pvPortMalloc+0x170>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ad8:	f000 f90c 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009adc:	4b55      	ldr	r3, [pc, #340]	; (8009c34 <pvPortMalloc+0x174>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f040 808c 	bne.w	8009c02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01c      	beq.n	8009b2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009af0:	2208      	movs	r2, #8
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d013      	beq.n	8009b2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	3308      	adds	r3, #8
 8009b0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d009      	beq.n	8009b2a <pvPortMalloc+0x6a>
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e7fe      	b.n	8009b28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d068      	beq.n	8009c02 <pvPortMalloc+0x142>
 8009b30:	4b41      	ldr	r3, [pc, #260]	; (8009c38 <pvPortMalloc+0x178>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d863      	bhi.n	8009c02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b3a:	4b40      	ldr	r3, [pc, #256]	; (8009c3c <pvPortMalloc+0x17c>)
 8009b3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b3e:	4b3f      	ldr	r3, [pc, #252]	; (8009c3c <pvPortMalloc+0x17c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b44:	e004      	b.n	8009b50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <pvPortMalloc+0xa2>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b62:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <pvPortMalloc+0x170>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d04a      	beq.n	8009c02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2208      	movs	r2, #8
 8009b72:	4413      	add	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	2308      	movs	r3, #8
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d91e      	bls.n	8009bcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <pvPortMalloc+0xf4>
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	e7fe      	b.n	8009bb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bc6:	69b8      	ldr	r0, [r7, #24]
 8009bc8:	f000 f8f6 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bcc:	4b1a      	ldr	r3, [pc, #104]	; (8009c38 <pvPortMalloc+0x178>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <pvPortMalloc+0x178>)
 8009bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bda:	4b17      	ldr	r3, [pc, #92]	; (8009c38 <pvPortMalloc+0x178>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	4b18      	ldr	r3, [pc, #96]	; (8009c40 <pvPortMalloc+0x180>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d203      	bcs.n	8009bee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <pvPortMalloc+0x178>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <pvPortMalloc+0x180>)
 8009bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <pvPortMalloc+0x174>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c02:	f7fe ff5f 	bl	8008ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <pvPortMalloc+0x164>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	e7fe      	b.n	8009c22 <pvPortMalloc+0x162>
	return pvReturn;
 8009c24:	69fb      	ldr	r3, [r7, #28]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3728      	adds	r7, #40	; 0x28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20003df0 	.word	0x20003df0
 8009c34:	20003dfc 	.word	0x20003dfc
 8009c38:	20003df4 	.word	0x20003df4
 8009c3c:	20003de8 	.word	0x20003de8
 8009c40:	20003df8 	.word	0x20003df8

08009c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d046      	beq.n	8009ce4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c56:	2308      	movs	r3, #8
 8009c58:	425b      	negs	r3, r3
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	4b20      	ldr	r3, [pc, #128]	; (8009cec <vPortFree+0xa8>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d109      	bne.n	8009c86 <vPortFree+0x42>
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	e7fe      	b.n	8009c84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <vPortFree+0x5e>
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60bb      	str	r3, [r7, #8]
 8009ca0:	e7fe      	b.n	8009ca0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <vPortFree+0xa8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d019      	beq.n	8009ce4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d115      	bne.n	8009ce4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <vPortFree+0xa8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc8:	f7fe feee 	bl	8008aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xac>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xac>)
 8009cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f000 f86c 	bl	8009db8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ce0:	f7fe fef0 	bl	8008ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ce4:	bf00      	nop
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20003dfc 	.word	0x20003dfc
 8009cf0:	20003df4 	.word	0x20003df4

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	200001e8 	.word	0x200001e8
 8009da4:	20003de8 	.word	0x20003de8
 8009da8:	20003df0 	.word	0x20003df0
 8009dac:	20003df8 	.word	0x20003df8
 8009db0:	20003df4 	.word	0x20003df4
 8009db4:	20003dfc 	.word	0x20003dfc

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20003de8 	.word	0x20003de8
 8009e68:	20003df0 	.word	0x20003df0

08009e6c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8009e70:	bf00      	nop
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4a07      	ldr	r2, [pc, #28]	; (8009ea8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4a06      	ldr	r2, [pc, #24]	; (8009eac <vApplicationGetIdleTaskMemory+0x30>)
 8009e92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2280      	movs	r2, #128	; 0x80
 8009e98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8009e9a:	bf00      	nop
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	20003e00 	.word	0x20003e00
 8009eac:	20003e54 	.word	0x20003e54

08009eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009eb0:	b5b0      	push	{r4, r5, r7, lr}
 8009eb2:	b0b6      	sub	sp, #216	; 0xd8
 8009eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009eb6:	f7f6 fb0b 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009eba:	f000 f8dd 	bl	800a078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ebe:	f000 fa3f 	bl	800a340 <MX_GPIO_Init>
  MX_I2C1_Init();
 8009ec2:	f000 f943 	bl	800a14c <MX_I2C1_Init>
  MX_SPI1_Init();
 8009ec6:	f000 f96f 	bl	800a1a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8009eca:	f000 f9a3 	bl	800a214 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009ece:	f000 f9d3 	bl	800a278 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8009ed2:	f000 fa03 	bl	800a2dc <MX_USART6_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of usart2_sem */
  osSemaphoreDef(usart2_sem);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  usart2_semHandle = osSemaphoreCreate(osSemaphore(usart2_sem), 1);
 8009ee2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fd fba6 	bl	800763a <osSemaphoreCreate>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b50      	ldr	r3, [pc, #320]	; (800a034 <main+0x184>)
 8009ef2:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(usart3_sem);
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009efa:	2300      	movs	r3, #0
 8009efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  usart3_semHandle = osSemaphoreCreate(osSemaphore(usart3_sem), 1);
 8009f00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009f04:	2101      	movs	r1, #1
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fd fb97 	bl	800763a <osSemaphoreCreate>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	4b4a      	ldr	r3, [pc, #296]	; (800a038 <main+0x188>)
 8009f10:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of HMI_ISR_usart3_Q1 */
  osMessageQDef(HMI_ISR_usart3_Q1, 1, uint8_t);
 8009f12:	4b4a      	ldr	r3, [pc, #296]	; (800a03c <main+0x18c>)
 8009f14:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8009f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HMI_ISR_usart3_Q1Handle = osMessageCreate(osMessageQ(HMI_ISR_usart3_Q1), NULL);
 8009f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009f22:	2100      	movs	r1, #0
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fd fbbb 	bl	80076a0 <osMessageCreate>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b44      	ldr	r3, [pc, #272]	; (800a040 <main+0x190>)
 8009f2e:	601a      	str	r2, [r3, #0]

  /* definition and creation of CO2_ISR_usart6_Q1 */
  osMessageQDef(CO2_ISR_usart6_Q1, 1, uint8_t);
 8009f30:	4b42      	ldr	r3, [pc, #264]	; (800a03c <main+0x18c>)
 8009f32:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8009f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CO2_ISR_usart6_Q1Handle = osMessageCreate(osMessageQ(CO2_ISR_usart6_Q1), NULL);
 8009f3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd fbac 	bl	80076a0 <osMessageCreate>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	4b3e      	ldr	r3, [pc, #248]	; (800a044 <main+0x194>)
 8009f4c:	601a      	str	r2, [r3, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8009f4e:	4b3e      	ldr	r3, [pc, #248]	; (800a048 <main+0x198>)
 8009f50:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8009f54:	461d      	mov	r5, r3
 8009f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009f62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fd fb06 	bl	800757a <osThreadCreate>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	4b36      	ldr	r3, [pc, #216]	; (800a04c <main+0x19c>)
 8009f72:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLED_Task */
  osThreadDef(myLED_Task, StartLED_Task, osPriorityLow, 0, 128);
 8009f74:	4b36      	ldr	r3, [pc, #216]	; (800a050 <main+0x1a0>)
 8009f76:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8009f7a:	461d      	mov	r5, r3
 8009f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED_TaskHandle = osThreadCreate(osThread(myLED_Task), NULL);
 8009f88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd faf3 	bl	800757a <osThreadCreate>
 8009f94:	4602      	mov	r2, r0
 8009f96:	4b2f      	ldr	r3, [pc, #188]	; (800a054 <main+0x1a4>)
 8009f98:	601a      	str	r2, [r3, #0]

  /* definition and creation of myButton_Task */
  osThreadDef(myButton_Task, StartButton_Task, osPriorityLow, 0, 128);
 8009f9a:	4b2f      	ldr	r3, [pc, #188]	; (800a058 <main+0x1a8>)
 8009f9c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8009fa0:	461d      	mov	r5, r3
 8009fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButton_TaskHandle = osThreadCreate(osThread(myButton_Task), NULL);
 8009fae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fd fae0 	bl	800757a <osThreadCreate>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4b27      	ldr	r3, [pc, #156]	; (800a05c <main+0x1ac>)
 8009fbe:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart2_Rx_handle */
  osThreadDef(uart2_Rx_handle, Start_uart2_Rx_handle, osPriorityNormal, 0, 128);
 8009fc0:	4b27      	ldr	r3, [pc, #156]	; (800a060 <main+0x1b0>)
 8009fc2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8009fc6:	461d      	mov	r5, r3
 8009fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2_Rx_handleHandle = osThreadCreate(osThread(uart2_Rx_handle), NULL);
 8009fd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd facd 	bl	800757a <osThreadCreate>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	4b20      	ldr	r3, [pc, #128]	; (800a064 <main+0x1b4>)
 8009fe4:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart3_Rx_handle */
  osThreadDef(uart3_Rx_handle, Start_uart3_Rx_handle, osPriorityNormal, 0, 512);
 8009fe6:	4b20      	ldr	r3, [pc, #128]	; (800a068 <main+0x1b8>)
 8009fe8:	f107 041c 	add.w	r4, r7, #28
 8009fec:	461d      	mov	r5, r3
 8009fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Rx_handleHandle = osThreadCreate(osThread(uart3_Rx_handle), NULL);
 8009ffa:	f107 031c 	add.w	r3, r7, #28
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f7fd faba 	bl	800757a <osThreadCreate>
 800a006:	4602      	mov	r2, r0
 800a008:	4b18      	ldr	r3, [pc, #96]	; (800a06c <main+0x1bc>)
 800a00a:	601a      	str	r2, [r3, #0]

  /* definition and creation of CO2_u6_Rx_handl */
  osThreadDef(CO2_u6_Rx_handl, Start_CO2_Rx_handle, osPriorityNormal, 0, 128);
 800a00c:	4b18      	ldr	r3, [pc, #96]	; (800a070 <main+0x1c0>)
 800a00e:	463c      	mov	r4, r7
 800a010:	461d      	mov	r5, r3
 800a012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a01a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO2_u6_Rx_handlHandle = osThreadCreate(osThread(CO2_u6_Rx_handl), NULL);
 800a01e:	463b      	mov	r3, r7
 800a020:	2100      	movs	r1, #0
 800a022:	4618      	mov	r0, r3
 800a024:	f7fd faa9 	bl	800757a <osThreadCreate>
 800a028:	4602      	mov	r2, r0
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <main+0x1c4>)
 800a02c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a02e:	f7fd fa9d 	bl	800756c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a032:	e7fe      	b.n	800a032 <main+0x182>
 800a034:	2000410c 	.word	0x2000410c
 800a038:	200041ac 	.word	0x200041ac
 800a03c:	0800b724 	.word	0x0800b724
 800a040:	200041fc 	.word	0x200041fc
 800a044:	20004150 	.word	0x20004150
 800a048:	0800b740 	.word	0x0800b740
 800a04c:	2000406c 	.word	0x2000406c
 800a050:	0800b768 	.word	0x0800b768
 800a054:	20004070 	.word	0x20004070
 800a058:	0800b794 	.word	0x0800b794
 800a05c:	200041f4 	.word	0x200041f4
 800a060:	0800b7c0 	.word	0x0800b7c0
 800a064:	200041f8 	.word	0x200041f8
 800a068:	0800b7ec 	.word	0x0800b7ec
 800a06c:	200041b0 	.word	0x200041b0
 800a070:	0800b818 	.word	0x0800b818
 800a074:	20004108 	.word	0x20004108

0800a078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b094      	sub	sp, #80	; 0x50
 800a07c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a07e:	f107 0320 	add.w	r3, r7, #32
 800a082:	2230      	movs	r2, #48	; 0x30
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f001 fa5b 	bl	800b542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a08c:	f107 030c 	add.w	r3, r7, #12
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	609a      	str	r2, [r3, #8]
 800a098:	60da      	str	r2, [r3, #12]
 800a09a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a09c:	2300      	movs	r3, #0
 800a09e:	60bb      	str	r3, [r7, #8]
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <SystemClock_Config+0xcc>)
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	4a27      	ldr	r2, [pc, #156]	; (800a144 <SystemClock_Config+0xcc>)
 800a0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ac:	4b25      	ldr	r3, [pc, #148]	; (800a144 <SystemClock_Config+0xcc>)
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b4:	60bb      	str	r3, [r7, #8]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	4b22      	ldr	r3, [pc, #136]	; (800a148 <SystemClock_Config+0xd0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a21      	ldr	r2, [pc, #132]	; (800a148 <SystemClock_Config+0xd0>)
 800a0c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	4b1f      	ldr	r3, [pc, #124]	; (800a148 <SystemClock_Config+0xd0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a0d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a0e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a0ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a0f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a0f6:	2307      	movs	r3, #7
 800a0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a0fa:	f107 0320 	add.w	r3, r7, #32
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f8 fb46 	bl	8002790 <HAL_RCC_OscConfig>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800a10a:	f000 fc30 	bl	800a96e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a10e:	230f      	movs	r3, #15
 800a110:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a112:	2302      	movs	r3, #2
 800a114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a11a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a11e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a126:	f107 030c 	add.w	r3, r7, #12
 800a12a:	2105      	movs	r1, #5
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f8 fd9f 	bl	8002c70 <HAL_RCC_ClockConfig>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a138:	f000 fc19 	bl	800a96e <Error_Handler>
  }
}
 800a13c:	bf00      	nop
 800a13e:	3750      	adds	r7, #80	; 0x50
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40023800 	.word	0x40023800
 800a148:	40007000 	.word	0x40007000

0800a14c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a150:	4b12      	ldr	r3, [pc, #72]	; (800a19c <MX_I2C1_Init+0x50>)
 800a152:	4a13      	ldr	r2, [pc, #76]	; (800a1a0 <MX_I2C1_Init+0x54>)
 800a154:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a156:	4b11      	ldr	r3, [pc, #68]	; (800a19c <MX_I2C1_Init+0x50>)
 800a158:	4a12      	ldr	r2, [pc, #72]	; (800a1a4 <MX_I2C1_Init+0x58>)
 800a15a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <MX_I2C1_Init+0x50>)
 800a15e:	2200      	movs	r2, #0
 800a160:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a162:	4b0e      	ldr	r3, [pc, #56]	; (800a19c <MX_I2C1_Init+0x50>)
 800a164:	2200      	movs	r2, #0
 800a166:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <MX_I2C1_Init+0x50>)
 800a16a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a16e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <MX_I2C1_Init+0x50>)
 800a172:	2200      	movs	r2, #0
 800a174:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <MX_I2C1_Init+0x50>)
 800a178:	2200      	movs	r2, #0
 800a17a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a17c:	4b07      	ldr	r3, [pc, #28]	; (800a19c <MX_I2C1_Init+0x50>)
 800a17e:	2200      	movs	r2, #0
 800a180:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a182:	4b06      	ldr	r3, [pc, #24]	; (800a19c <MX_I2C1_Init+0x50>)
 800a184:	2200      	movs	r2, #0
 800a186:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a188:	4804      	ldr	r0, [pc, #16]	; (800a19c <MX_I2C1_Init+0x50>)
 800a18a:	f7f8 f9c9 	bl	8002520 <HAL_I2C_Init>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a194:	f000 fbeb 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a198:	bf00      	nop
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	200040b4 	.word	0x200040b4
 800a1a0:	40005400 	.word	0x40005400
 800a1a4:	000186a0 	.word	0x000186a0

0800a1a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a1ac:	4b17      	ldr	r3, [pc, #92]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1ae:	4a18      	ldr	r2, [pc, #96]	; (800a210 <MX_SPI1_Init+0x68>)
 800a1b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a1b2:	4b16      	ldr	r3, [pc, #88]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a1b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a1ba:	4b14      	ldr	r3, [pc, #80]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a1c0:	4b12      	ldr	r3, [pc, #72]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1c6:	4b11      	ldr	r3, [pc, #68]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a1d2:	4b0e      	ldr	r3, [pc, #56]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a1f2:	4b06      	ldr	r3, [pc, #24]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a1f8:	4804      	ldr	r0, [pc, #16]	; (800a20c <MX_SPI1_Init+0x64>)
 800a1fa:	f7f8 ff5d 	bl	80030b8 <HAL_SPI_Init>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a204:	f000 fbb3 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a208:	bf00      	nop
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20004154 	.word	0x20004154
 800a210:	40013000 	.word	0x40013000

0800a214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a218:	4b15      	ldr	r3, [pc, #84]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a21a:	4a16      	ldr	r2, [pc, #88]	; (800a274 <MX_USART2_UART_Init+0x60>)
 800a21c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800a21e:	4b14      	ldr	r3, [pc, #80]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a220:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800a224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a226:	4b12      	ldr	r3, [pc, #72]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a22e:	2200      	movs	r2, #0
 800a230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a232:	4b0f      	ldr	r3, [pc, #60]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a238:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a23a:	220c      	movs	r2, #12
 800a23c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a23e:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a240:	2200      	movs	r2, #0
 800a242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a244:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a246:	2200      	movs	r2, #0
 800a248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a24a:	4809      	ldr	r0, [pc, #36]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a24c:	f7f9 f9d6 	bl	80035fc <HAL_UART_Init>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a256:	f000 fb8a 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	4b03      	ldr	r3, [pc, #12]	; (800a270 <MX_USART2_UART_Init+0x5c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f042 0220 	orr.w	r2, r2, #32
 800a268:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 800a26a:	bf00      	nop
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200041b4 	.word	0x200041b4
 800a274:	40004400 	.word	0x40004400

0800a278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a27c:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a27e:	4a16      	ldr	r2, [pc, #88]	; (800a2d8 <MX_USART3_UART_Init+0x60>)
 800a280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800a282:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a290:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a292:	2200      	movs	r2, #0
 800a294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a296:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a298:	2200      	movs	r2, #0
 800a29a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a29c:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a29e:	220c      	movs	r2, #12
 800a2a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a2ae:	4809      	ldr	r0, [pc, #36]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a2b0:	f7f9 f9a4 	bl	80035fc <HAL_UART_Init>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a2ba:	f000 fb58 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* Enable Rx Interrupt */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <MX_USART3_UART_Init+0x5c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0220 	orr.w	r2, r2, #32
 800a2cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 800a2ce:	bf00      	nop
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20004074 	.word	0x20004074
 800a2d8:	40004800 	.word	0x40004800

0800a2dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a2e2:	4a16      	ldr	r2, [pc, #88]	; (800a33c <MX_USART6_UART_Init+0x60>)
 800a2e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a2e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a2ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a2ee:	4b12      	ldr	r3, [pc, #72]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a2f4:	4b10      	ldr	r3, [pc, #64]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a302:	220c      	movs	r2, #12
 800a304:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a306:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a308:	2200      	movs	r2, #0
 800a30a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a30c:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a312:	4809      	ldr	r0, [pc, #36]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a314:	f7f9 f972 	bl	80035fc <HAL_UART_Init>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a31e:	f000 fb26 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* Enable Rx Interrupt */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800a322:	4b05      	ldr	r3, [pc, #20]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	4b03      	ldr	r3, [pc, #12]	; (800a338 <MX_USART6_UART_Init+0x5c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0220 	orr.w	r2, r2, #32
 800a330:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART6_Init 2 */

}
 800a332:	bf00      	nop
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20004110 	.word	0x20004110
 800a33c:	40011400 	.word	0x40011400

0800a340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08c      	sub	sp, #48	; 0x30
 800a344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a346:	f107 031c 	add.w	r3, r7, #28
 800a34a:	2200      	movs	r2, #0
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	605a      	str	r2, [r3, #4]
 800a350:	609a      	str	r2, [r3, #8]
 800a352:	60da      	str	r2, [r3, #12]
 800a354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a356:	2300      	movs	r3, #0
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	4b7d      	ldr	r3, [pc, #500]	; (800a550 <MX_GPIO_Init+0x210>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	4a7c      	ldr	r2, [pc, #496]	; (800a550 <MX_GPIO_Init+0x210>)
 800a360:	f043 0310 	orr.w	r3, r3, #16
 800a364:	6313      	str	r3, [r2, #48]	; 0x30
 800a366:	4b7a      	ldr	r3, [pc, #488]	; (800a550 <MX_GPIO_Init+0x210>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	f003 0310 	and.w	r3, r3, #16
 800a36e:	61bb      	str	r3, [r7, #24]
 800a370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	4b76      	ldr	r3, [pc, #472]	; (800a550 <MX_GPIO_Init+0x210>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	4a75      	ldr	r2, [pc, #468]	; (800a550 <MX_GPIO_Init+0x210>)
 800a37c:	f043 0304 	orr.w	r3, r3, #4
 800a380:	6313      	str	r3, [r2, #48]	; 0x30
 800a382:	4b73      	ldr	r3, [pc, #460]	; (800a550 <MX_GPIO_Init+0x210>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a38e:	2300      	movs	r3, #0
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	4b6f      	ldr	r3, [pc, #444]	; (800a550 <MX_GPIO_Init+0x210>)
 800a394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a396:	4a6e      	ldr	r2, [pc, #440]	; (800a550 <MX_GPIO_Init+0x210>)
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	6313      	str	r3, [r2, #48]	; 0x30
 800a39e:	4b6c      	ldr	r3, [pc, #432]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	4b68      	ldr	r3, [pc, #416]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	4a67      	ldr	r2, [pc, #412]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3b4:	f043 0301 	orr.w	r3, r3, #1
 800a3b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ba:	4b65      	ldr	r3, [pc, #404]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60bb      	str	r3, [r7, #8]
 800a3ca:	4b61      	ldr	r3, [pc, #388]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	4a60      	ldr	r2, [pc, #384]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3d0:	f043 0302 	orr.w	r3, r3, #2
 800a3d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a3d6:	4b5e      	ldr	r3, [pc, #376]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	60bb      	str	r3, [r7, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
 800a3e6:	4b5a      	ldr	r3, [pc, #360]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ea:	4a59      	ldr	r2, [pc, #356]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3ec:	f043 0308 	orr.w	r3, r3, #8
 800a3f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a3f2:	4b57      	ldr	r3, [pc, #348]	; (800a550 <MX_GPIO_Init+0x210>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	f003 0308 	and.w	r3, r3, #8
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|USART3_RT_Pin, GPIO_PIN_RESET);
 800a3fe:	2200      	movs	r2, #0
 800a400:	f242 0108 	movw	r1, #8200	; 0x2008
 800a404:	4853      	ldr	r0, [pc, #332]	; (800a554 <MX_GPIO_Init+0x214>)
 800a406:	f7f6 fb65 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a40a:	2201      	movs	r2, #1
 800a40c:	2101      	movs	r1, #1
 800a40e:	4852      	ldr	r0, [pc, #328]	; (800a558 <MX_GPIO_Init+0x218>)
 800a410:	f7f6 fb60 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a414:	2200      	movs	r2, #0
 800a416:	f24f 0110 	movw	r1, #61456	; 0xf010
 800a41a:	4850      	ldr	r0, [pc, #320]	; (800a55c <MX_GPIO_Init+0x21c>)
 800a41c:	f7f6 fb5a 	bl	8000ad4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_RT_GPIO_Port, USART6_RT_Pin, GPIO_PIN_RESET);
 800a420:	2200      	movs	r2, #0
 800a422:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a426:	484c      	ldr	r0, [pc, #304]	; (800a558 <MX_GPIO_Init+0x218>)
 800a428:	f7f6 fb54 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin USART3_RT_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|USART3_RT_Pin;
 800a42c:	f242 0308 	movw	r3, #8200	; 0x2008
 800a430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a432:	2301      	movs	r3, #1
 800a434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a436:	2300      	movs	r3, #0
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a43a:	2300      	movs	r3, #0
 800a43c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a43e:	f107 031c 	add.w	r3, r7, #28
 800a442:	4619      	mov	r1, r3
 800a444:	4843      	ldr	r0, [pc, #268]	; (800a554 <MX_GPIO_Init+0x214>)
 800a446:	f7f6 f9ab 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin USART6_RT_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|USART6_RT_Pin;
 800a44a:	f240 1301 	movw	r3, #257	; 0x101
 800a44e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a450:	2301      	movs	r3, #1
 800a452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a454:	2300      	movs	r3, #0
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a458:	2300      	movs	r3, #0
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a45c:	f107 031c 	add.w	r3, r7, #28
 800a460:	4619      	mov	r1, r3
 800a462:	483d      	ldr	r0, [pc, #244]	; (800a558 <MX_GPIO_Init+0x218>)
 800a464:	f7f6 f99c 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a468:	2308      	movs	r3, #8
 800a46a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a46c:	2302      	movs	r3, #2
 800a46e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a470:	2300      	movs	r3, #0
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a474:	2300      	movs	r3, #0
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a478:	2305      	movs	r3, #5
 800a47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a47c:	f107 031c 	add.w	r3, r7, #28
 800a480:	4619      	mov	r1, r3
 800a482:	4835      	ldr	r0, [pc, #212]	; (800a558 <MX_GPIO_Init+0x218>)
 800a484:	f7f6 f98c 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a488:	2301      	movs	r3, #1
 800a48a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a48c:	4b34      	ldr	r3, [pc, #208]	; (800a560 <MX_GPIO_Init+0x220>)
 800a48e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a490:	2300      	movs	r3, #0
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a494:	f107 031c 	add.w	r3, r7, #28
 800a498:	4619      	mov	r1, r3
 800a49a:	4832      	ldr	r0, [pc, #200]	; (800a564 <MX_GPIO_Init+0x224>)
 800a49c:	f7f6 f980 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a4b0:	2306      	movs	r3, #6
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a4b4:	f107 031c 	add.w	r3, r7, #28
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	482a      	ldr	r0, [pc, #168]	; (800a564 <MX_GPIO_Init+0x224>)
 800a4bc:	f7f6 f970 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a4cc:	f107 031c 	add.w	r3, r7, #28
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4825      	ldr	r0, [pc, #148]	; (800a568 <MX_GPIO_Init+0x228>)
 800a4d4:	f7f6 f964 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a4d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 800a4dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4ea:	f107 031c 	add.w	r3, r7, #28
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	481a      	ldr	r0, [pc, #104]	; (800a55c <MX_GPIO_Init+0x21c>)
 800a4f2:	f7f6 f955 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800a4f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a4fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a500:	2300      	movs	r3, #0
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a504:	2300      	movs	r3, #0
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a508:	2306      	movs	r3, #6
 800a50a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a50c:	f107 031c 	add.w	r3, r7, #28
 800a510:	4619      	mov	r1, r3
 800a512:	4811      	ldr	r0, [pc, #68]	; (800a558 <MX_GPIO_Init+0x218>)
 800a514:	f7f6 f944 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a518:	2320      	movs	r3, #32
 800a51a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a51c:	2300      	movs	r3, #0
 800a51e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a520:	2300      	movs	r3, #0
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a524:	f107 031c 	add.w	r3, r7, #28
 800a528:	4619      	mov	r1, r3
 800a52a:	480c      	ldr	r0, [pc, #48]	; (800a55c <MX_GPIO_Init+0x21c>)
 800a52c:	f7f6 f938 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a530:	2302      	movs	r3, #2
 800a532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <MX_GPIO_Init+0x220>)
 800a536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a538:	2300      	movs	r3, #0
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a53c:	f107 031c 	add.w	r3, r7, #28
 800a540:	4619      	mov	r1, r3
 800a542:	4804      	ldr	r0, [pc, #16]	; (800a554 <MX_GPIO_Init+0x214>)
 800a544:	f7f6 f92c 	bl	80007a0 <HAL_GPIO_Init>

}
 800a548:	bf00      	nop
 800a54a:	3730      	adds	r7, #48	; 0x30
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	40023800 	.word	0x40023800
 800a554:	40021000 	.word	0x40021000
 800a558:	40020800 	.word	0x40020800
 800a55c:	40020c00 	.word	0x40020c00
 800a560:	10120000 	.word	0x10120000
 800a564:	40020000 	.word	0x40020000
 800a568:	40020400 	.word	0x40020400

0800a56c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a574:	f000 fc74 	bl	800ae60 <MX_USB_HOST_Init>
#ifdef SOFTWARE_DEBUG
	  osDelay(2000);
	  freemem = xPortGetFreeHeapSize();
	  vTaskList (pcWriteBuffer);
#endif
    osDelay(1);
 800a578:	2001      	movs	r0, #1
 800a57a:	f7fd f84a 	bl	8007612 <osDelay>
 800a57e:	e7fb      	b.n	800a578 <StartDefaultTask+0xc>

0800a580 <StartLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Task */
void StartLED_Task(void const * argument)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a588:	2001      	movs	r0, #1
 800a58a:	f7fd f842 	bl	8007612 <osDelay>
 800a58e:	e7fb      	b.n	800a588 <StartLED_Task+0x8>

0800a590 <StartButton_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton_Task */
void StartButton_Task(void const * argument)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_Task */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800a598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a59c:	4803      	ldr	r0, [pc, #12]	; (800a5ac <StartButton_Task+0x1c>)
 800a59e:	f7f6 fab2 	bl	8000b06 <HAL_GPIO_TogglePin>
	  osDelay(150);
 800a5a2:	2096      	movs	r0, #150	; 0x96
 800a5a4:	f7fd f835 	bl	8007612 <osDelay>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800a5a8:	e7f6      	b.n	800a598 <StartButton_Task+0x8>
 800a5aa:	bf00      	nop
 800a5ac:	40020c00 	.word	0x40020c00

0800a5b0 <USART2_IRQHandler>:
  /* USER CODE END StartButton_Task */
}


void USART2_IRQHandler(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
	uint8_t usart2_Rx_data = 0x00;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	71fb      	strb	r3, [r7, #7]

	HAL_UART_IRQHandler(&huart2);
 800a5ba:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <USART2_IRQHandler+0x20>)
 800a5bc:	f7f9 f904 	bl	80037c8 <HAL_UART_IRQHandler>
	usart2_Rx_data = (uint8_t) huart2.Instance->DR;
 800a5c0:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <USART2_IRQHandler+0x20>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	71fb      	strb	r3, [r7, #7]
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	200041b4 	.word	0x200041b4

0800a5d4 <Start_uart2_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart2_Rx_handle */
void Start_uart2_Rx_handle(void const * argument)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart2_Rx_handle */

  /* Infinite loop */
  for(;;)
  {
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800a5dc:	4b08      	ldr	r3, [pc, #32]	; (800a600 <Start_uart2_Rx_handle+0x2c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fd fd91 	bl	800810c <xQueueSemaphoreTake>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d1f5      	bne.n	800a5dc <Start_uart2_Rx_handle+0x8>
	  {
		  xSemaphoreTake(usart2_semHandle, portMAX_DELAY);
 800a5f0:	4b03      	ldr	r3, [pc, #12]	; (800a600 <Start_uart2_Rx_handle+0x2c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fd fd87 	bl	800810c <xQueueSemaphoreTake>
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800a5fe:	e7ed      	b.n	800a5dc <Start_uart2_Rx_handle+0x8>
 800a600:	2000410c 	.word	0x2000410c

0800a604 <USART3_IRQHandler>:
  /* USER CODE END Start_uart2_Rx_handle */
}


void USART3_IRQHandler(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
	uint8_t usart3_Rx_data = 0x00;
 800a60e:	2300      	movs	r3, #0
 800a610:	70fb      	strb	r3, [r7, #3]

	HAL_UART_IRQHandler(&huart3);
 800a612:	4811      	ldr	r0, [pc, #68]	; (800a658 <USART3_IRQHandler+0x54>)
 800a614:	f7f9 f8d8 	bl	80037c8 <HAL_UART_IRQHandler>
	usart3_Rx_data = (uint8_t) huart3.Instance->DR;
 800a618:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <USART3_IRQHandler+0x54>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	70fb      	strb	r3, [r7, #3]
	if (pdPASS == xQueueSendToBackFromISR(HMI_ISR_usart3_Q1Handle, &usart3_Rx_data, &xHigherPriorityTaskWoken))
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <USART3_IRQHandler+0x58>)
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	1d3a      	adds	r2, r7, #4
 800a628:	1cf9      	adds	r1, r7, #3
 800a62a:	2300      	movs	r3, #0
 800a62c:	f7fd fbfe 	bl	8007e2c <xQueueGenericSendFromISR>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10b      	bne.n	800a64e <USART3_IRQHandler+0x4a>
	{
		HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_SET);
 800a636:	2201      	movs	r2, #1
 800a638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a63c:	4808      	ldr	r0, [pc, #32]	; (800a660 <USART3_IRQHandler+0x5c>)
 800a63e:	f7f6 fa49 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800a642:	2201      	movs	r2, #1
 800a644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a648:	4806      	ldr	r0, [pc, #24]	; (800a664 <USART3_IRQHandler+0x60>)
 800a64a:	f7f6 fa43 	bl	8000ad4 <HAL_GPIO_WritePin>
	}

}
 800a64e:	bf00      	nop
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20004074 	.word	0x20004074
 800a65c:	200041fc 	.word	0x200041fc
 800a660:	40021000 	.word	0x40021000
 800a664:	40020c00 	.word	0x40020c00

0800a668 <Start_uart3_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart3_Rx_handle */
void Start_uart3_Rx_handle(void const * argument)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart3_Rx_handle */
	static uint8_t	usart3_counter = 0x00;
	static uint8_t	HMI_LAMP_blinking_counter = 0x00;
	static uint8_t	Modbus_Rx_status =  MB_FRAME_RX_IDLE;
//	static uint8_t	N_bytes_to_finish_Rx = 0x00;
	const portTickType xTicksToWait = 500 / portTICK_RATE_MS;
 800a670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a674:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t Rx_buffer_from_ISR;
	uint8_t Tx_buf_1 [] = {0x01, 0x01, 0x02, 0x00, 0x04, 0xB8, 0x3F};
 800a676:	4a61      	ldr	r2, [pc, #388]	; (800a7fc <Start_uart3_Rx_handle+0x194>)
 800a678:	f107 0318 	add.w	r3, r7, #24
 800a67c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	3304      	adds	r3, #4
 800a684:	8019      	strh	r1, [r3, #0]
 800a686:	3302      	adds	r3, #2
 800a688:	0c0a      	lsrs	r2, r1, #16
 800a68a:	701a      	strb	r2, [r3, #0]
	uint8_t Tx_buf_2 [] = {0x01, 0x01, 0x02, 0x00, 0x00, 0xB9, 0xFC};
 800a68c:	4a5c      	ldr	r2, [pc, #368]	; (800a800 <Start_uart3_Rx_handle+0x198>)
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a696:	6018      	str	r0, [r3, #0]
 800a698:	3304      	adds	r3, #4
 800a69a:	8019      	strh	r1, [r3, #0]
 800a69c:	3302      	adds	r3, #2
 800a69e:	0c0a      	lsrs	r2, r1, #16
 800a6a0:	701a      	strb	r2, [r3, #0]
	uint8_t Tx_buf_3 [] = {'O', 'k'};
 800a6a2:	4b58      	ldr	r3, [pc, #352]	; (800a804 <Start_uart3_Rx_handle+0x19c>)
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	81bb      	strh	r3, [r7, #12]
	uint8_t Tx_buf_4 [] = {'B', 'a', 'd'};
 800a6a8:	4a57      	ldr	r2, [pc, #348]	; (800a808 <Start_uart3_Rx_handle+0x1a0>)
 800a6aa:	f107 0308 	add.w	r3, r7, #8
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	8019      	strh	r1, [r3, #0]
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	0c12      	lsrs	r2, r2, #16
 800a6b8:	701a      	strb	r2, [r3, #0]
	uint8_t uart3_Tx_result = 0x00;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* Infinite loop */
	for(;;)
	{
		if(pdPASS == xQueueReceive(HMI_ISR_usart3_Q1Handle, &Rx_buffer_from_ISR, portMAX_DELAY )) /* xTicksToWait */
 800a6c0:	4b52      	ldr	r3, [pc, #328]	; (800a80c <Start_uart3_Rx_handle+0x1a4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f107 0122 	add.w	r1, r7, #34	; 0x22
 800a6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd fc41 	bl	8007f54 <xQueueReceive>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d17d      	bne.n	800a7d4 <Start_uart3_Rx_handle+0x16c>
		{
			usart3_counter++;
 800a6d8:	4b4d      	ldr	r3, [pc, #308]	; (800a810 <Start_uart3_Rx_handle+0x1a8>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	4b4b      	ldr	r3, [pc, #300]	; (800a810 <Start_uart3_Rx_handle+0x1a8>)
 800a6e2:	701a      	strb	r2, [r3, #0]
//					uart3_Tx_result = HAL_UART_Transmit(&huart3, &usart3_counter, 1, 1000);
//
//			}

//			if (((MB_FRAME_RX_COILS_FRAME_FINISHED_OK == Modbus_Rx_status) || (MB_FRAME_RX_INREG_FRAME_FINISHED_OK == Modbus_Rx_status)) && (0x08 == usart3_counter))
			if (0x08 == usart3_counter)
 800a6e4:	4b4a      	ldr	r3, [pc, #296]	; (800a810 <Start_uart3_Rx_handle+0x1a8>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d160      	bne.n	800a7ae <Start_uart3_Rx_handle+0x146>
			{

				usart3_counter = 0x00;
 800a6ec:	4b48      	ldr	r3, [pc, #288]	; (800a810 <Start_uart3_Rx_handle+0x1a8>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
				Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800a6f2:	4b48      	ldr	r3, [pc, #288]	; (800a814 <Start_uart3_Rx_handle+0x1ac>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]

				if (0x04 > HMI_LAMP_blinking_counter)
 800a6f8:	4b47      	ldr	r3, [pc, #284]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d818      	bhi.n	800a732 <Start_uart3_Rx_handle+0xca>
				{
					HMI_LAMP_blinking_counter++;
 800a700:	4b45      	ldr	r3, [pc, #276]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	b2da      	uxtb	r2, r3
 800a708:	4b43      	ldr	r3, [pc, #268]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a70a:	701a      	strb	r2, [r3, #0]
					uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_1, (uint16_t)(sizeof(Tx_buf_1)/sizeof(Tx_buf_1[0])), 1000);
 800a70c:	f107 0118 	add.w	r1, r7, #24
 800a710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a714:	2207      	movs	r2, #7
 800a716:	4841      	ldr	r0, [pc, #260]	; (800a81c <Start_uart3_Rx_handle+0x1b4>)
 800a718:	f7f8 ffbd 	bl	8003696 <HAL_UART_Transmit>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if (HAL_OK != uart3_Tx_result)
 800a722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a726:	2b00      	cmp	r3, #0
 800a728:	d041      	beq.n	800a7ae <Start_uart3_Rx_handle+0x146>
					{
						Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800a72a:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <Start_uart3_Rx_handle+0x1ac>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	e03d      	b.n	800a7ae <Start_uart3_Rx_handle+0x146>
					}
				}
				else if ((HMI_LAMP_blinking_counter < 0x07) && (HMI_LAMP_blinking_counter >= 0x04))
 800a732:	4b39      	ldr	r3, [pc, #228]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b06      	cmp	r3, #6
 800a738:	d81c      	bhi.n	800a774 <Start_uart3_Rx_handle+0x10c>
 800a73a:	4b37      	ldr	r3, [pc, #220]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d918      	bls.n	800a774 <Start_uart3_Rx_handle+0x10c>
				{
					HMI_LAMP_blinking_counter++;
 800a742:	4b35      	ldr	r3, [pc, #212]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	4b33      	ldr	r3, [pc, #204]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a74c:	701a      	strb	r2, [r3, #0]
					uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_2, (uint16_t)(sizeof(Tx_buf_2)/sizeof(Tx_buf_2[0])), 1000);
 800a74e:	f107 0110 	add.w	r1, r7, #16
 800a752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a756:	2207      	movs	r2, #7
 800a758:	4830      	ldr	r0, [pc, #192]	; (800a81c <Start_uart3_Rx_handle+0x1b4>)
 800a75a:	f7f8 ff9c 	bl	8003696 <HAL_UART_Transmit>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if (HAL_OK != uart3_Tx_result)
 800a764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d020      	beq.n	800a7ae <Start_uart3_Rx_handle+0x146>
					{
						Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800a76c:	4b29      	ldr	r3, [pc, #164]	; (800a814 <Start_uart3_Rx_handle+0x1ac>)
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]
					if (HAL_OK != uart3_Tx_result)
 800a772:	e01c      	b.n	800a7ae <Start_uart3_Rx_handle+0x146>
					}
				}
				else if ((0x07 == HMI_LAMP_blinking_counter) && (0x07 <= HMI_LAMP_blinking_counter))
 800a774:	4b28      	ldr	r3, [pc, #160]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b07      	cmp	r3, #7
 800a77a:	d118      	bne.n	800a7ae <Start_uart3_Rx_handle+0x146>
 800a77c:	4b26      	ldr	r3, [pc, #152]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b06      	cmp	r3, #6
 800a782:	d914      	bls.n	800a7ae <Start_uart3_Rx_handle+0x146>
				{
					HMI_LAMP_blinking_counter = 0x00;
 800a784:	4b24      	ldr	r3, [pc, #144]	; (800a818 <Start_uart3_Rx_handle+0x1b0>)
 800a786:	2200      	movs	r2, #0
 800a788:	701a      	strb	r2, [r3, #0]
					uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_2, (uint16_t)(sizeof(Tx_buf_2)/sizeof(Tx_buf_2[0])), 1000);
 800a78a:	f107 0110 	add.w	r1, r7, #16
 800a78e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a792:	2207      	movs	r2, #7
 800a794:	4821      	ldr	r0, [pc, #132]	; (800a81c <Start_uart3_Rx_handle+0x1b4>)
 800a796:	f7f8 ff7e 	bl	8003696 <HAL_UART_Transmit>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if (HAL_OK != uart3_Tx_result)
 800a7a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <Start_uart3_Rx_handle+0x146>
					{
						Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800a7a8:	4b1a      	ldr	r3, [pc, #104]	; (800a814 <Start_uart3_Rx_handle+0x1ac>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]


			}


			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_RESET);
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7b4:	481a      	ldr	r0, [pc, #104]	; (800a820 <Start_uart3_Rx_handle+0x1b8>)
 800a7b6:	f7f6 f98d 	bl	8000ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7c0:	4818      	ldr	r0, [pc, #96]	; (800a824 <Start_uart3_Rx_handle+0x1bc>)
 800a7c2:	f7f6 f987 	bl	8000ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7cc:	4815      	ldr	r0, [pc, #84]	; (800a824 <Start_uart3_Rx_handle+0x1bc>)
 800a7ce:	f7f6 f981 	bl	8000ad4 <HAL_GPIO_WritePin>
 800a7d2:	e775      	b.n	800a6c0 <Start_uart3_Rx_handle+0x58>

		}
		else
		{
			usart3_counter = 0x00;
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <Start_uart3_Rx_handle+0x1a8>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
			Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800a7da:	4b0e      	ldr	r3, [pc, #56]	; (800a814 <Start_uart3_Rx_handle+0x1ac>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_RESET);
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7e6:	480e      	ldr	r0, [pc, #56]	; (800a820 <Start_uart3_Rx_handle+0x1b8>)
 800a7e8:	f7f6 f974 	bl	8000ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7f2:	480c      	ldr	r0, [pc, #48]	; (800a824 <Start_uart3_Rx_handle+0x1bc>)
 800a7f4:	f7f6 f96e 	bl	8000ad4 <HAL_GPIO_WritePin>
		if(pdPASS == xQueueReceive(HMI_ISR_usart3_Q1Handle, &Rx_buffer_from_ISR, portMAX_DELAY )) /* xTicksToWait */
 800a7f8:	e762      	b.n	800a6c0 <Start_uart3_Rx_handle+0x58>
 800a7fa:	bf00      	nop
 800a7fc:	0800b834 	.word	0x0800b834
 800a800:	0800b83c 	.word	0x0800b83c
 800a804:	0800b844 	.word	0x0800b844
 800a808:	0800b848 	.word	0x0800b848
 800a80c:	200041fc 	.word	0x200041fc
 800a810:	20004054 	.word	0x20004054
 800a814:	20004055 	.word	0x20004055
 800a818:	20004056 	.word	0x20004056
 800a81c:	20004074 	.word	0x20004074
 800a820:	40021000 	.word	0x40021000
 800a824:	40020c00 	.word	0x40020c00

0800a828 <USART6_IRQHandler>:
  /* USER CODE END Start_uart3_Rx_handle */
}


void USART6_IRQHandler(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800a82e:	2300      	movs	r3, #0
 800a830:	607b      	str	r3, [r7, #4]
	uint8_t usart6_Rx_data = 0x00;
 800a832:	2300      	movs	r3, #0
 800a834:	70fb      	strb	r3, [r7, #3]

	HAL_UART_IRQHandler(&huart6);
 800a836:	4811      	ldr	r0, [pc, #68]	; (800a87c <USART6_IRQHandler+0x54>)
 800a838:	f7f8 ffc6 	bl	80037c8 <HAL_UART_IRQHandler>
	usart6_Rx_data = (uint8_t) huart6.Instance->DR;
 800a83c:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <USART6_IRQHandler+0x54>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	70fb      	strb	r3, [r7, #3]
//	usart3_counter++;

	if (pdPASS == xQueueSendToBackFromISR(CO2_ISR_usart6_Q1Handle, &usart6_Rx_data, &xHigherPriorityTaskWoken))
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <USART6_IRQHandler+0x58>)
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	1d3a      	adds	r2, r7, #4
 800a84c:	1cf9      	adds	r1, r7, #3
 800a84e:	2300      	movs	r3, #0
 800a850:	f7fd faec 	bl	8007e2c <xQueueGenericSendFromISR>
 800a854:	4603      	mov	r3, r0
 800a856:	2b01      	cmp	r3, #1
 800a858:	d10b      	bne.n	800a872 <USART6_IRQHandler+0x4a>
	{
		HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_SET);
 800a85a:	2201      	movs	r2, #1
 800a85c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a860:	4808      	ldr	r0, [pc, #32]	; (800a884 <USART6_IRQHandler+0x5c>)
 800a862:	f7f6 f937 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800a866:	2201      	movs	r2, #1
 800a868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a86c:	4806      	ldr	r0, [pc, #24]	; (800a888 <USART6_IRQHandler+0x60>)
 800a86e:	f7f6 f931 	bl	8000ad4 <HAL_GPIO_WritePin>
	}
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20004110 	.word	0x20004110
 800a880:	20004150 	.word	0x20004150
 800a884:	40020800 	.word	0x40020800
 800a888:	40020c00 	.word	0x40020c00

0800a88c <Start_CO2_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CO2_Rx_handle */
void Start_CO2_Rx_handle(void const * argument)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CO2_Rx_handle */
	uint8_t Rx_buffer_from_ISR;
	uint8_t Tx_buf_1 [] = {'O', 'k'};
 800a894:	4b28      	ldr	r3, [pc, #160]	; (800a938 <Start_CO2_Rx_handle+0xac>)
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	81bb      	strh	r3, [r7, #12]
	uint8_t Tx_buf_2 [] = {'B', 'a', 'd'};
 800a89a:	4a28      	ldr	r2, [pc, #160]	; (800a93c <Start_CO2_Rx_handle+0xb0>)
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	8019      	strh	r1, [r3, #0]
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	0c12      	lsrs	r2, r2, #16
 800a8aa:	701a      	strb	r2, [r3, #0]
	uint8_t	uart6_Tx_result = 0x00;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	 if(pdPASS == xQueueReceive(CO2_ISR_usart6_Q1Handle, &Rx_buffer_from_ISR, portMAX_DELAY))
 800a8b0:	4b23      	ldr	r3, [pc, #140]	; (800a940 <Start_CO2_Rx_handle+0xb4>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f107 010e 	add.w	r1, r7, #14
 800a8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fb49 	bl	8007f54 <xQueueReceive>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d1f3      	bne.n	800a8b0 <Start_CO2_Rx_handle+0x24>
	 {
		 if (0x01 == Rx_buffer_from_ISR)
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d119      	bne.n	800a902 <Start_CO2_Rx_handle+0x76>
		 {
			 uart6_Tx_result = HAL_UART_Transmit(&huart6, &Tx_buf_1, (uint16_t)(sizeof(Tx_buf_1)/sizeof(Tx_buf_1[0])), 1000);
 800a8ce:	f107 010c 	add.w	r1, r7, #12
 800a8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	481a      	ldr	r0, [pc, #104]	; (800a944 <Start_CO2_Rx_handle+0xb8>)
 800a8da:	f7f8 fedc 	bl	8003696 <HAL_UART_Transmit>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]
			 if (HAL_OK == uart6_Tx_result)
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e3      	bne.n	800a8b0 <Start_CO2_Rx_handle+0x24>
			 {
				 HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_RESET);
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8ee:	4816      	ldr	r0, [pc, #88]	; (800a948 <Start_CO2_Rx_handle+0xbc>)
 800a8f0:	f7f6 f8f0 	bl	8000ad4 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8fa:	4814      	ldr	r0, [pc, #80]	; (800a94c <Start_CO2_Rx_handle+0xc0>)
 800a8fc:	f7f6 f8ea 	bl	8000ad4 <HAL_GPIO_WritePin>
 800a900:	e7d6      	b.n	800a8b0 <Start_CO2_Rx_handle+0x24>
			 }
		 }
		 else
		 {
			 uart6_Tx_result = HAL_UART_Transmit(&huart6, Tx_buf_2, (uint16_t)(sizeof(Tx_buf_2)/sizeof(Tx_buf_2[0])), 1000);
 800a902:	f107 0108 	add.w	r1, r7, #8
 800a906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a90a:	2203      	movs	r2, #3
 800a90c:	480d      	ldr	r0, [pc, #52]	; (800a944 <Start_CO2_Rx_handle+0xb8>)
 800a90e:	f7f8 fec2 	bl	8003696 <HAL_UART_Transmit>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]
			 if (HAL_OK == uart6_Tx_result)
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1c9      	bne.n	800a8b0 <Start_CO2_Rx_handle+0x24>
			 {
				 HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_RESET);
 800a91c:	2200      	movs	r2, #0
 800a91e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a922:	4809      	ldr	r0, [pc, #36]	; (800a948 <Start_CO2_Rx_handle+0xbc>)
 800a924:	f7f6 f8d6 	bl	8000ad4 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800a928:	2200      	movs	r2, #0
 800a92a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a92e:	4807      	ldr	r0, [pc, #28]	; (800a94c <Start_CO2_Rx_handle+0xc0>)
 800a930:	f7f6 f8d0 	bl	8000ad4 <HAL_GPIO_WritePin>
	 if(pdPASS == xQueueReceive(CO2_ISR_usart6_Q1Handle, &Rx_buffer_from_ISR, portMAX_DELAY))
 800a934:	e7bc      	b.n	800a8b0 <Start_CO2_Rx_handle+0x24>
 800a936:	bf00      	nop
 800a938:	0800b844 	.word	0x0800b844
 800a93c:	0800b848 	.word	0x0800b848
 800a940:	20004150 	.word	0x20004150
 800a944:	20004110 	.word	0x20004110
 800a948:	40020800 	.word	0x40020800
 800a94c:	40020c00 	.word	0x40020c00

0800a950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a960:	d101      	bne.n	800a966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a962:	f7f5 fdd7 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a96e:	b480      	push	{r7}
 800a970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a972:	bf00      	nop
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a982:	2300      	movs	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
 800a986:	4b12      	ldr	r3, [pc, #72]	; (800a9d0 <HAL_MspInit+0x54>)
 800a988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98a:	4a11      	ldr	r2, [pc, #68]	; (800a9d0 <HAL_MspInit+0x54>)
 800a98c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a990:	6453      	str	r3, [r2, #68]	; 0x44
 800a992:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <HAL_MspInit+0x54>)
 800a994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a99a:	607b      	str	r3, [r7, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a99e:	2300      	movs	r3, #0
 800a9a0:	603b      	str	r3, [r7, #0]
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <HAL_MspInit+0x54>)
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <HAL_MspInit+0x54>)
 800a9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ae:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <HAL_MspInit+0x54>)
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	210f      	movs	r1, #15
 800a9be:	f06f 0001 	mvn.w	r0, #1
 800a9c2:	f7f5 fea1 	bl	8000708 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	40023800 	.word	0x40023800

0800a9d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08a      	sub	sp, #40	; 0x28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9dc:	f107 0314 	add.w	r3, r7, #20
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a19      	ldr	r2, [pc, #100]	; (800aa58 <HAL_I2C_MspInit+0x84>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d12c      	bne.n	800aa50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	613b      	str	r3, [r7, #16]
 800a9fa:	4b18      	ldr	r3, [pc, #96]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	4a17      	ldr	r2, [pc, #92]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	6313      	str	r3, [r2, #48]	; 0x30
 800aa06:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800aa12:	f44f 7310 	mov.w	r3, #576	; 0x240
 800aa16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aa18:	2312      	movs	r3, #18
 800aa1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa20:	2300      	movs	r3, #0
 800aa22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800aa24:	2304      	movs	r3, #4
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	480c      	ldr	r0, [pc, #48]	; (800aa60 <HAL_I2C_MspInit+0x8c>)
 800aa30:	f7f5 feb6 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	4a07      	ldr	r2, [pc, #28]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800aa3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa42:	6413      	str	r3, [r2, #64]	; 0x40
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <HAL_I2C_MspInit+0x88>)
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800aa50:	bf00      	nop
 800aa52:	3728      	adds	r7, #40	; 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	40005400 	.word	0x40005400
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	40020400 	.word	0x40020400

0800aa64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08a      	sub	sp, #40	; 0x28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa6c:	f107 0314 	add.w	r3, r7, #20
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	605a      	str	r2, [r3, #4]
 800aa76:	609a      	str	r2, [r3, #8]
 800aa78:	60da      	str	r2, [r3, #12]
 800aa7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <HAL_SPI_MspInit+0x84>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d12b      	bne.n	800aade <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa86:	2300      	movs	r3, #0
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	4b18      	ldr	r3, [pc, #96]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	4a17      	ldr	r2, [pc, #92]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aa90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa94:	6453      	str	r3, [r2, #68]	; 0x44
 800aa96:	4b15      	ldr	r3, [pc, #84]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	4b11      	ldr	r3, [pc, #68]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	4a10      	ldr	r2, [pc, #64]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aaac:	f043 0301 	orr.w	r3, r3, #1
 800aab0:	6313      	str	r3, [r2, #48]	; 0x30
 800aab2:	4b0e      	ldr	r3, [pc, #56]	; (800aaec <HAL_SPI_MspInit+0x88>)
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800aabe:	23e0      	movs	r3, #224	; 0xe0
 800aac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aac2:	2302      	movs	r3, #2
 800aac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaca:	2300      	movs	r3, #0
 800aacc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aace:	2305      	movs	r3, #5
 800aad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aad2:	f107 0314 	add.w	r3, r7, #20
 800aad6:	4619      	mov	r1, r3
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <HAL_SPI_MspInit+0x8c>)
 800aada:	f7f5 fe61 	bl	80007a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800aade:	bf00      	nop
 800aae0:	3728      	adds	r7, #40	; 0x28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	40013000 	.word	0x40013000
 800aaec:	40023800 	.word	0x40023800
 800aaf0:	40020000 	.word	0x40020000

0800aaf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08e      	sub	sp, #56	; 0x38
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aafc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	605a      	str	r2, [r3, #4]
 800ab06:	609a      	str	r2, [r3, #8]
 800ab08:	60da      	str	r2, [r3, #12]
 800ab0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a57      	ldr	r2, [pc, #348]	; (800ac70 <HAL_UART_MspInit+0x17c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d134      	bne.n	800ab80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ab16:	2300      	movs	r3, #0
 800ab18:	623b      	str	r3, [r7, #32]
 800ab1a:	4b56      	ldr	r3, [pc, #344]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1e:	4a55      	ldr	r2, [pc, #340]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab24:	6413      	str	r3, [r2, #64]	; 0x40
 800ab26:	4b53      	ldr	r3, [pc, #332]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2e:	623b      	str	r3, [r7, #32]
 800ab30:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab32:	2300      	movs	r3, #0
 800ab34:	61fb      	str	r3, [r7, #28]
 800ab36:	4b4f      	ldr	r3, [pc, #316]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3a:	4a4e      	ldr	r2, [pc, #312]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab3c:	f043 0301 	orr.w	r3, r3, #1
 800ab40:	6313      	str	r3, [r2, #48]	; 0x30
 800ab42:	4b4c      	ldr	r3, [pc, #304]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ab4e:	230c      	movs	r3, #12
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab52:	2302      	movs	r3, #2
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ab5e:	2307      	movs	r3, #7
 800ab60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab66:	4619      	mov	r1, r3
 800ab68:	4843      	ldr	r0, [pc, #268]	; (800ac78 <HAL_UART_MspInit+0x184>)
 800ab6a:	f7f5 fe19 	bl	80007a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2105      	movs	r1, #5
 800ab72:	2026      	movs	r0, #38	; 0x26
 800ab74:	f7f5 fdc8 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ab78:	2026      	movs	r0, #38	; 0x26
 800ab7a:	f7f5 fde1 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800ab7e:	e073      	b.n	800ac68 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a3d      	ldr	r2, [pc, #244]	; (800ac7c <HAL_UART_MspInit+0x188>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d135      	bne.n	800abf6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	4b39      	ldr	r3, [pc, #228]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	4a38      	ldr	r2, [pc, #224]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab98:	6413      	str	r3, [r2, #64]	; 0x40
 800ab9a:	4b36      	ldr	r3, [pc, #216]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aba2:	61bb      	str	r3, [r7, #24]
 800aba4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
 800abaa:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	4a31      	ldr	r2, [pc, #196]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	6313      	str	r3, [r2, #48]	; 0x30
 800abb6:	4b2f      	ldr	r3, [pc, #188]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800abc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc8:	2302      	movs	r3, #2
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abd0:	2303      	movs	r3, #3
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800abd4:	2307      	movs	r3, #7
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abdc:	4619      	mov	r1, r3
 800abde:	4828      	ldr	r0, [pc, #160]	; (800ac80 <HAL_UART_MspInit+0x18c>)
 800abe0:	f7f5 fdde 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800abe4:	2200      	movs	r2, #0
 800abe6:	2105      	movs	r1, #5
 800abe8:	2027      	movs	r0, #39	; 0x27
 800abea:	f7f5 fd8d 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800abee:	2027      	movs	r0, #39	; 0x27
 800abf0:	f7f5 fda6 	bl	8000740 <HAL_NVIC_EnableIRQ>
}
 800abf4:	e038      	b.n	800ac68 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a22      	ldr	r2, [pc, #136]	; (800ac84 <HAL_UART_MspInit+0x190>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d133      	bne.n	800ac68 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 800ac00:	2300      	movs	r3, #0
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	4b1b      	ldr	r3, [pc, #108]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac08:	4a1a      	ldr	r2, [pc, #104]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac0a:	f043 0320 	orr.w	r3, r3, #32
 800ac0e:	6453      	str	r3, [r2, #68]	; 0x44
 800ac10:	4b18      	ldr	r3, [pc, #96]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	4b14      	ldr	r3, [pc, #80]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac26:	f043 0304 	orr.w	r3, r3, #4
 800ac2a:	6313      	str	r3, [r2, #48]	; 0x30
 800ac2c:	4b11      	ldr	r3, [pc, #68]	; (800ac74 <HAL_UART_MspInit+0x180>)
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ac38:	23c0      	movs	r3, #192	; 0xc0
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac44:	2303      	movs	r3, #3
 800ac46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ac48:	2308      	movs	r3, #8
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac50:	4619      	mov	r1, r3
 800ac52:	480d      	ldr	r0, [pc, #52]	; (800ac88 <HAL_UART_MspInit+0x194>)
 800ac54:	f7f5 fda4 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2105      	movs	r1, #5
 800ac5c:	2047      	movs	r0, #71	; 0x47
 800ac5e:	f7f5 fd53 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800ac62:	2047      	movs	r0, #71	; 0x47
 800ac64:	f7f5 fd6c 	bl	8000740 <HAL_NVIC_EnableIRQ>
}
 800ac68:	bf00      	nop
 800ac6a:	3738      	adds	r7, #56	; 0x38
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	40004400 	.word	0x40004400
 800ac74:	40023800 	.word	0x40023800
 800ac78:	40020000 	.word	0x40020000
 800ac7c:	40004800 	.word	0x40004800
 800ac80:	40020400 	.word	0x40020400
 800ac84:	40011400 	.word	0x40011400
 800ac88:	40020800 	.word	0x40020800

0800ac8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	; 0x30
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	201c      	movs	r0, #28
 800aca2:	f7f5 fd31 	bl	8000708 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800aca6:	201c      	movs	r0, #28
 800aca8:	f7f5 fd4a 	bl	8000740 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800acac:	2300      	movs	r3, #0
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	4b20      	ldr	r3, [pc, #128]	; (800ad34 <HAL_InitTick+0xa8>)
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	4a1f      	ldr	r2, [pc, #124]	; (800ad34 <HAL_InitTick+0xa8>)
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	6413      	str	r3, [r2, #64]	; 0x40
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <HAL_InitTick+0xa8>)
 800acbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800acc8:	f107 0210 	add.w	r2, r7, #16
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f8 f9be 	bl	8003054 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800acd8:	f7f8 f994 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800acdc:	4603      	mov	r3, r0
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	4a14      	ldr	r2, [pc, #80]	; (800ad38 <HAL_InitTick+0xac>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	0c9b      	lsrs	r3, r3, #18
 800acec:	3b01      	subs	r3, #1
 800acee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800acf0:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <HAL_InitTick+0xb0>)
 800acf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800acf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800acf8:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <HAL_InitTick+0xb0>)
 800acfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800acfe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ad00:	4a0e      	ldr	r2, [pc, #56]	; (800ad3c <HAL_InitTick+0xb0>)
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ad06:	4b0d      	ldr	r3, [pc, #52]	; (800ad3c <HAL_InitTick+0xb0>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <HAL_InitTick+0xb0>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ad12:	480a      	ldr	r0, [pc, #40]	; (800ad3c <HAL_InitTick+0xb0>)
 800ad14:	f7f8 fa34 	bl	8003180 <HAL_TIM_Base_Init>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d104      	bne.n	800ad28 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ad1e:	4807      	ldr	r0, [pc, #28]	; (800ad3c <HAL_InitTick+0xb0>)
 800ad20:	f7f8 fa63 	bl	80031ea <HAL_TIM_Base_Start_IT>
 800ad24:	4603      	mov	r3, r0
 800ad26:	e000      	b.n	800ad2a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3730      	adds	r7, #48	; 0x30
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	40023800 	.word	0x40023800
 800ad38:	431bde83 	.word	0x431bde83
 800ad3c:	20004200 	.word	0x20004200

0800ad40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad52:	e7fe      	b.n	800ad52 <HardFault_Handler+0x4>

0800ad54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad54:	b480      	push	{r7}
 800ad56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad58:	e7fe      	b.n	800ad58 <MemManage_Handler+0x4>

0800ad5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad5e:	e7fe      	b.n	800ad5e <BusFault_Handler+0x4>

0800ad60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad64:	e7fe      	b.n	800ad64 <UsageFault_Handler+0x4>

0800ad66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ad66:	b480      	push	{r7}
 800ad68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad6a:	bf00      	nop
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ad78:	4802      	ldr	r0, [pc, #8]	; (800ad84 <TIM2_IRQHandler+0x10>)
 800ad7a:	f7f8 fa5a 	bl	8003232 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ad7e:	bf00      	nop
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20004200 	.word	0x20004200

0800ad88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800ad8c:	4802      	ldr	r0, [pc, #8]	; (800ad98 <OTG_FS_IRQHandler+0x10>)
 800ad8e:	f7f6 f965 	bl	800105c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20004624 	.word	0x20004624

0800ad9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ada4:	4b11      	ldr	r3, [pc, #68]	; (800adec <_sbrk+0x50>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <_sbrk+0x16>
		heap_end = &end;
 800adac:	4b0f      	ldr	r3, [pc, #60]	; (800adec <_sbrk+0x50>)
 800adae:	4a10      	ldr	r2, [pc, #64]	; (800adf0 <_sbrk+0x54>)
 800adb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800adb2:	4b0e      	ldr	r3, [pc, #56]	; (800adec <_sbrk+0x50>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800adb8:	4b0c      	ldr	r3, [pc, #48]	; (800adec <_sbrk+0x50>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4413      	add	r3, r2
 800adc0:	466a      	mov	r2, sp
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d907      	bls.n	800add6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800adc6:	f000 fb77 	bl	800b4b8 <__errno>
 800adca:	4602      	mov	r2, r0
 800adcc:	230c      	movs	r3, #12
 800adce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800add0:	f04f 33ff 	mov.w	r3, #4294967295
 800add4:	e006      	b.n	800ade4 <_sbrk+0x48>
	}

	heap_end += incr;
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <_sbrk+0x50>)
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	4a03      	ldr	r2, [pc, #12]	; (800adec <_sbrk+0x50>)
 800ade0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ade2:	68fb      	ldr	r3, [r7, #12]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20004058 	.word	0x20004058
 800adf0:	200048f0 	.word	0x200048f0

0800adf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800adf4:	b480      	push	{r7}
 800adf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800adf8:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <SystemInit+0x60>)
 800adfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfe:	4a15      	ldr	r2, [pc, #84]	; (800ae54 <SystemInit+0x60>)
 800ae00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ae08:	4b13      	ldr	r3, [pc, #76]	; (800ae58 <SystemInit+0x64>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a12      	ldr	r2, [pc, #72]	; (800ae58 <SystemInit+0x64>)
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ae14:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <SystemInit+0x64>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <SystemInit+0x64>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a0e      	ldr	r2, [pc, #56]	; (800ae58 <SystemInit+0x64>)
 800ae20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ae24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <SystemInit+0x64>)
 800ae2c:	4a0b      	ldr	r2, [pc, #44]	; (800ae5c <SystemInit+0x68>)
 800ae2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ae30:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <SystemInit+0x64>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a08      	ldr	r2, [pc, #32]	; (800ae58 <SystemInit+0x64>)
 800ae36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ae3c:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <SystemInit+0x64>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae42:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <SystemInit+0x60>)
 800ae44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae48:	609a      	str	r2, [r3, #8]
#endif
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	e000ed00 	.word	0xe000ed00
 800ae58:	40023800 	.word	0x40023800
 800ae5c:	24003010 	.word	0x24003010

0800ae60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ae64:	2201      	movs	r2, #1
 800ae66:	490e      	ldr	r1, [pc, #56]	; (800aea0 <MX_USB_HOST_Init+0x40>)
 800ae68:	480e      	ldr	r0, [pc, #56]	; (800aea4 <MX_USB_HOST_Init+0x44>)
 800ae6a:	f7fa fdc7 	bl	80059fc <USBH_Init>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae74:	f7ff fd7b 	bl	800a96e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ae78:	490b      	ldr	r1, [pc, #44]	; (800aea8 <MX_USB_HOST_Init+0x48>)
 800ae7a:	480a      	ldr	r0, [pc, #40]	; (800aea4 <MX_USB_HOST_Init+0x44>)
 800ae7c:	f7fa fe74 	bl	8005b68 <USBH_RegisterClass>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae86:	f7ff fd72 	bl	800a96e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae8a:	4806      	ldr	r0, [pc, #24]	; (800aea4 <MX_USB_HOST_Init+0x44>)
 800ae8c:	f7fa fef8 	bl	8005c80 <USBH_Start>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae96:	f7ff fd6a 	bl	800a96e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	0800aead 	.word	0x0800aead
 800aea4:	20004240 	.word	0x20004240
 800aea8:	20000008 	.word	0x20000008

0800aeac <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aeb8:	78fb      	ldrb	r3, [r7, #3]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d819      	bhi.n	800aef4 <USBH_UserProcess+0x48>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <USBH_UserProcess+0x1c>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800aef5 	.word	0x0800aef5
 800aecc:	0800aee5 	.word	0x0800aee5
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800aeed 	.word	0x0800aeed
 800aed8:	0800aedd 	.word	0x0800aedd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <USBH_UserProcess+0x58>)
 800aede:	2203      	movs	r2, #3
 800aee0:	701a      	strb	r2, [r3, #0]
  break;
 800aee2:	e008      	b.n	800aef6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <USBH_UserProcess+0x58>)
 800aee6:	2202      	movs	r2, #2
 800aee8:	701a      	strb	r2, [r3, #0]
  break;
 800aeea:	e004      	b.n	800aef6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <USBH_UserProcess+0x58>)
 800aeee:	2201      	movs	r2, #1
 800aef0:	701a      	strb	r2, [r3, #0]
  break;
 800aef2:	e000      	b.n	800aef6 <USBH_UserProcess+0x4a>

  default:
  break;
 800aef4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	2000405c 	.word	0x2000405c

0800af08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af10:	f107 0314 	add.w	r3, r7, #20
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	605a      	str	r2, [r3, #4]
 800af1a:	609a      	str	r2, [r3, #8]
 800af1c:	60da      	str	r2, [r3, #12]
 800af1e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af28:	d147      	bne.n	800afba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af2a:	2300      	movs	r3, #0
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	4a24      	ldr	r2, [pc, #144]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af34:	f043 0301 	orr.w	r3, r3, #1
 800af38:	6313      	str	r3, [r2, #48]	; 0x30
 800af3a:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800af46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af50:	2300      	movs	r3, #0
 800af52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	4619      	mov	r1, r3
 800af5a:	481b      	ldr	r0, [pc, #108]	; (800afc8 <HAL_HCD_MspInit+0xc0>)
 800af5c:	f7f5 fc20 	bl	80007a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800af60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800af64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af66:	2302      	movs	r3, #2
 800af68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af72:	230a      	movs	r3, #10
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af76:	f107 0314 	add.w	r3, r7, #20
 800af7a:	4619      	mov	r1, r3
 800af7c:	4812      	ldr	r0, [pc, #72]	; (800afc8 <HAL_HCD_MspInit+0xc0>)
 800af7e:	f7f5 fc0f 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af82:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	4a0f      	ldr	r2, [pc, #60]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af8c:	6353      	str	r3, [r2, #52]	; 0x34
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af96:	4a0b      	ldr	r2, [pc, #44]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800af98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af9c:	6453      	str	r3, [r2, #68]	; 0x44
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <HAL_HCD_MspInit+0xbc>)
 800afa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800afaa:	2200      	movs	r2, #0
 800afac:	2105      	movs	r1, #5
 800afae:	2043      	movs	r0, #67	; 0x43
 800afb0:	f7f5 fbaa 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afb4:	2043      	movs	r0, #67	; 0x43
 800afb6:	f7f5 fbc3 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afba:	bf00      	nop
 800afbc:	3728      	adds	r7, #40	; 0x28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	40023800 	.word	0x40023800
 800afc8:	40020000 	.word	0x40020000

0800afcc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fb fafd 	bl	80065da <USBH_LL_IncTimer>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fb fb41 	bl	800667e <USBH_LL_Connect>
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b012:	4618      	mov	r0, r3
 800b014:	f7fb fb56 	bl	80066c4 <USBH_LL_Disconnect>
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
 800b02c:	4613      	mov	r3, r2
 800b02e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b036:	4618      	mov	r0, r3
 800b038:	f7fb fb8b 	bl	8006752 <USBH_LL_NotifyURBChange>
#endif
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b052:	4618      	mov	r0, r3
 800b054:	f7fb faeb 	bl	800662e <USBH_LL_PortEnabled>
} 
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fb faf7 	bl	8006662 <USBH_LL_PortDisabled>
} 
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d12a      	bne.n	800b0e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b08e:	4a18      	ldr	r2, [pc, #96]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a15      	ldr	r2, [pc, #84]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b09a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b09e:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b0a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b0a6:	4b12      	ldr	r3, [pc, #72]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b0b2:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b0c4:	480a      	ldr	r0, [pc, #40]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0c6:	f7f5 fd39 	bl	8000b3c <HAL_HCD_Init>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b0d0:	f7ff fc4d 	bl	800a96e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b0d4:	4806      	ldr	r0, [pc, #24]	; (800b0f0 <USBH_LL_Init+0x74>)
 800b0d6:	f7f6 f93d 	bl	8001354 <HAL_HCD_GetCurrentFrame>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fb fa6c 	bl	80065bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20004624 	.word	0x20004624

0800b0f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f6 f8aa 	bl	8001264 <HAL_HCD_Start>
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 f95c 	bl	800b3d4 <USBH_Get_USB_Status>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b120:	7bbb      	ldrb	r3, [r7, #14]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b140:	4618      	mov	r0, r3
 800b142:	f7f6 f8b2 	bl	80012aa <HAL_HCD_Stop>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 f941 	bl	800b3d4 <USBH_Get_USB_Status>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b156:	7bbb      	ldrb	r3, [r7, #14]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b168:	2301      	movs	r3, #1
 800b16a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b172:	4618      	mov	r0, r3
 800b174:	f7f6 f8fc 	bl	8001370 <HAL_HCD_GetCurrentSpeed>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d007      	beq.n	800b18e <USBH_LL_GetSpeed+0x2e>
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d302      	bcc.n	800b188 <USBH_LL_GetSpeed+0x28>
 800b182:	2b02      	cmp	r3, #2
 800b184:	d006      	beq.n	800b194 <USBH_LL_GetSpeed+0x34>
 800b186:	e008      	b.n	800b19a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]
    break;
 800b18c:	e008      	b.n	800b1a0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b18e:	2301      	movs	r3, #1
 800b190:	73fb      	strb	r3, [r7, #15]
    break;
 800b192:	e005      	b.n	800b1a0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b194:	2302      	movs	r3, #2
 800b196:	73fb      	strb	r3, [r7, #15]
    break;
 800b198:	e002      	b.n	800b1a0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b19a:	2301      	movs	r3, #1
 800b19c:	73fb      	strb	r3, [r7, #15]
    break;
 800b19e:	bf00      	nop
  }
  return  speed;
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f6 f88f 	bl	80012e4 <HAL_HCD_ResetPort>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 f901 	bl	800b3d4 <USBH_Get_USB_Status>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7f6 f897 	bl	800132a <HAL_HCD_HC_GetXferCount>
 800b1fc:	4603      	mov	r3, r0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b089      	sub	sp, #36	; 0x24
 800b20a:	af04      	add	r7, sp, #16
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	461a      	mov	r2, r3
 800b214:	4603      	mov	r3, r0
 800b216:	70fb      	strb	r3, [r7, #3]
 800b218:	460b      	mov	r3, r1
 800b21a:	70bb      	strb	r3, [r7, #2]
 800b21c:	4613      	mov	r3, r2
 800b21e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b22e:	787c      	ldrb	r4, [r7, #1]
 800b230:	78ba      	ldrb	r2, [r7, #2]
 800b232:	78f9      	ldrb	r1, [r7, #3]
 800b234:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4623      	mov	r3, r4
 800b246:	f7f5 fcdb 	bl	8000c00 <HAL_HCD_HC_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 f8bf 	bl	800b3d4 <USBH_Get_USB_Status>
 800b256:	4603      	mov	r3, r0
 800b258:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	bd90      	pop	{r4, r7, pc}

0800b264 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b27e:	78fa      	ldrb	r2, [r7, #3]
 800b280:	4611      	mov	r1, r2
 800b282:	4618      	mov	r0, r3
 800b284:	f7f5 fd54 	bl	8000d30 <HAL_HCD_HC_Halt>
 800b288:	4603      	mov	r3, r0
 800b28a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f8a0 	bl	800b3d4 <USBH_Get_USB_Status>
 800b294:	4603      	mov	r3, r0
 800b296:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b298:	7bbb      	ldrb	r3, [r7, #14]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b2a2:	b590      	push	{r4, r7, lr}
 800b2a4:	b089      	sub	sp, #36	; 0x24
 800b2a6:	af04      	add	r7, sp, #16
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	70fb      	strb	r3, [r7, #3]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70bb      	strb	r3, [r7, #2]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b2ca:	787c      	ldrb	r4, [r7, #1]
 800b2cc:	78ba      	ldrb	r2, [r7, #2]
 800b2ce:	78f9      	ldrb	r1, [r7, #3]
 800b2d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b2d4:	9303      	str	r3, [sp, #12]
 800b2d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4623      	mov	r3, r4
 800b2e6:	f7f5 fd47 	bl	8000d78 <HAL_HCD_HC_SubmitRequest>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 f86f 	bl	800b3d4 <USBH_Get_USB_Status>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}

0800b304 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b316:	78fa      	ldrb	r2, [r7, #3]
 800b318:	4611      	mov	r1, r2
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7f5 fff0 	bl	8001300 <HAL_HCD_HC_GetURBState>
 800b320:	4603      	mov	r3, r0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d103      	bne.n	800b348 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f872 	bl	800b42c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b348:	20c8      	movs	r0, #200	; 0xc8
 800b34a:	f7f5 f903 	bl	8000554 <HAL_Delay>
  return USBH_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
 800b364:	4613      	mov	r3, r2
 800b366:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b36e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b370:	78fa      	ldrb	r2, [r7, #3]
 800b372:	68f9      	ldr	r1, [r7, #12]
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	440b      	add	r3, r1
 800b37e:	333b      	adds	r3, #59	; 0x3b
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b386:	78fa      	ldrb	r2, [r7, #3]
 800b388:	68f9      	ldr	r1, [r7, #12]
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	00db      	lsls	r3, r3, #3
 800b392:	440b      	add	r3, r1
 800b394:	3350      	adds	r3, #80	; 0x50
 800b396:	78ba      	ldrb	r2, [r7, #2]
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e009      	b.n	800b3b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b39c:	78fa      	ldrb	r2, [r7, #3]
 800b39e:	68f9      	ldr	r1, [r7, #12]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	440b      	add	r3, r1
 800b3aa:	3351      	adds	r3, #81	; 0x51
 800b3ac:	78ba      	ldrb	r2, [r7, #2]
 800b3ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7f5 f8c4 	bl	8000554 <HAL_Delay>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d817      	bhi.n	800b418 <USBH_Get_USB_Status+0x44>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <USBH_Get_USB_Status+0x1c>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b401 	.word	0x0800b401
 800b3f4:	0800b407 	.word	0x0800b407
 800b3f8:	0800b40d 	.word	0x0800b40d
 800b3fc:	0800b413 	.word	0x0800b413
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	73fb      	strb	r3, [r7, #15]
    break;
 800b404:	e00b      	b.n	800b41e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b406:	2302      	movs	r3, #2
 800b408:	73fb      	strb	r3, [r7, #15]
    break;
 800b40a:	e008      	b.n	800b41e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b40c:	2301      	movs	r3, #1
 800b40e:	73fb      	strb	r3, [r7, #15]
    break;
 800b410:	e005      	b.n	800b41e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b412:	2302      	movs	r3, #2
 800b414:	73fb      	strb	r3, [r7, #15]
    break;
 800b416:	e002      	b.n	800b41e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b418:	2302      	movs	r3, #2
 800b41a:	73fb      	strb	r3, [r7, #15]
    break;
 800b41c:	bf00      	nop
  }
  return usb_status;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
 800b444:	e001      	b.n	800b44a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b446:	2300      	movs	r3, #0
 800b448:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	461a      	mov	r2, r3
 800b44e:	2101      	movs	r1, #1
 800b450:	4803      	ldr	r0, [pc, #12]	; (800b460 <MX_DriverVbusFS+0x34>)
 800b452:	f7f5 fb3f 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	40020800 	.word	0x40020800

0800b464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b49c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b46a:	e003      	b.n	800b474 <LoopCopyDataInit>

0800b46c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b46c:	4b0c      	ldr	r3, [pc, #48]	; (800b4a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b46e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b472:	3104      	adds	r1, #4

0800b474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b474:	480b      	ldr	r0, [pc, #44]	; (800b4a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b47a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b47c:	d3f6      	bcc.n	800b46c <CopyDataInit>
  ldr  r2, =_sbss
 800b47e:	4a0b      	ldr	r2, [pc, #44]	; (800b4ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b480:	e002      	b.n	800b488 <LoopFillZerobss>

0800b482 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b484:	f842 3b04 	str.w	r3, [r2], #4

0800b488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b48a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b48c:	d3f9      	bcc.n	800b482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b48e:	f7ff fcb1 	bl	800adf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b492:	f000 f817 	bl	800b4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b496:	f7fe fd0b 	bl	8009eb0 <main>
  bx  lr    
 800b49a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b49c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b4a0:	0800b874 	.word	0x0800b874
  ldr  r0, =_sdata
 800b4a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b4a8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800b4ac:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800b4b0:	200048ec 	.word	0x200048ec

0800b4b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4b4:	e7fe      	b.n	800b4b4 <ADC_IRQHandler>
	...

0800b4b8 <__errno>:
 800b4b8:	4b01      	ldr	r3, [pc, #4]	; (800b4c0 <__errno+0x8>)
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	20000030 	.word	0x20000030

0800b4c4 <__libc_init_array>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	4e0d      	ldr	r6, [pc, #52]	; (800b4fc <__libc_init_array+0x38>)
 800b4c8:	4c0d      	ldr	r4, [pc, #52]	; (800b500 <__libc_init_array+0x3c>)
 800b4ca:	1ba4      	subs	r4, r4, r6
 800b4cc:	10a4      	asrs	r4, r4, #2
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	42a5      	cmp	r5, r4
 800b4d2:	d109      	bne.n	800b4e8 <__libc_init_array+0x24>
 800b4d4:	4e0b      	ldr	r6, [pc, #44]	; (800b504 <__libc_init_array+0x40>)
 800b4d6:	4c0c      	ldr	r4, [pc, #48]	; (800b508 <__libc_init_array+0x44>)
 800b4d8:	f000 f8f6 	bl	800b6c8 <_init>
 800b4dc:	1ba4      	subs	r4, r4, r6
 800b4de:	10a4      	asrs	r4, r4, #2
 800b4e0:	2500      	movs	r5, #0
 800b4e2:	42a5      	cmp	r5, r4
 800b4e4:	d105      	bne.n	800b4f2 <__libc_init_array+0x2e>
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}
 800b4e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4ec:	4798      	blx	r3
 800b4ee:	3501      	adds	r5, #1
 800b4f0:	e7ee      	b.n	800b4d0 <__libc_init_array+0xc>
 800b4f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4f6:	4798      	blx	r3
 800b4f8:	3501      	adds	r5, #1
 800b4fa:	e7f2      	b.n	800b4e2 <__libc_init_array+0x1e>
 800b4fc:	0800b86c 	.word	0x0800b86c
 800b500:	0800b86c 	.word	0x0800b86c
 800b504:	0800b86c 	.word	0x0800b86c
 800b508:	0800b870 	.word	0x0800b870

0800b50c <malloc>:
 800b50c:	4b02      	ldr	r3, [pc, #8]	; (800b518 <malloc+0xc>)
 800b50e:	4601      	mov	r1, r0
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	f000 b86d 	b.w	800b5f0 <_malloc_r>
 800b516:	bf00      	nop
 800b518:	20000030 	.word	0x20000030

0800b51c <free>:
 800b51c:	4b02      	ldr	r3, [pc, #8]	; (800b528 <free+0xc>)
 800b51e:	4601      	mov	r1, r0
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f000 b817 	b.w	800b554 <_free_r>
 800b526:	bf00      	nop
 800b528:	20000030 	.word	0x20000030

0800b52c <memcpy>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	1e43      	subs	r3, r0, #1
 800b530:	440a      	add	r2, r1
 800b532:	4291      	cmp	r1, r2
 800b534:	d100      	bne.n	800b538 <memcpy+0xc>
 800b536:	bd10      	pop	{r4, pc}
 800b538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b53c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b540:	e7f7      	b.n	800b532 <memcpy+0x6>

0800b542 <memset>:
 800b542:	4402      	add	r2, r0
 800b544:	4603      	mov	r3, r0
 800b546:	4293      	cmp	r3, r2
 800b548:	d100      	bne.n	800b54c <memset+0xa>
 800b54a:	4770      	bx	lr
 800b54c:	f803 1b01 	strb.w	r1, [r3], #1
 800b550:	e7f9      	b.n	800b546 <memset+0x4>
	...

0800b554 <_free_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4605      	mov	r5, r0
 800b558:	2900      	cmp	r1, #0
 800b55a:	d045      	beq.n	800b5e8 <_free_r+0x94>
 800b55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b560:	1f0c      	subs	r4, r1, #4
 800b562:	2b00      	cmp	r3, #0
 800b564:	bfb8      	it	lt
 800b566:	18e4      	addlt	r4, r4, r3
 800b568:	f000 f8ac 	bl	800b6c4 <__malloc_lock>
 800b56c:	4a1f      	ldr	r2, [pc, #124]	; (800b5ec <_free_r+0x98>)
 800b56e:	6813      	ldr	r3, [r2, #0]
 800b570:	4610      	mov	r0, r2
 800b572:	b933      	cbnz	r3, 800b582 <_free_r+0x2e>
 800b574:	6063      	str	r3, [r4, #4]
 800b576:	6014      	str	r4, [r2, #0]
 800b578:	4628      	mov	r0, r5
 800b57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b57e:	f000 b8a2 	b.w	800b6c6 <__malloc_unlock>
 800b582:	42a3      	cmp	r3, r4
 800b584:	d90c      	bls.n	800b5a0 <_free_r+0x4c>
 800b586:	6821      	ldr	r1, [r4, #0]
 800b588:	1862      	adds	r2, r4, r1
 800b58a:	4293      	cmp	r3, r2
 800b58c:	bf04      	itt	eq
 800b58e:	681a      	ldreq	r2, [r3, #0]
 800b590:	685b      	ldreq	r3, [r3, #4]
 800b592:	6063      	str	r3, [r4, #4]
 800b594:	bf04      	itt	eq
 800b596:	1852      	addeq	r2, r2, r1
 800b598:	6022      	streq	r2, [r4, #0]
 800b59a:	6004      	str	r4, [r0, #0]
 800b59c:	e7ec      	b.n	800b578 <_free_r+0x24>
 800b59e:	4613      	mov	r3, r2
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	b10a      	cbz	r2, 800b5a8 <_free_r+0x54>
 800b5a4:	42a2      	cmp	r2, r4
 800b5a6:	d9fa      	bls.n	800b59e <_free_r+0x4a>
 800b5a8:	6819      	ldr	r1, [r3, #0]
 800b5aa:	1858      	adds	r0, r3, r1
 800b5ac:	42a0      	cmp	r0, r4
 800b5ae:	d10b      	bne.n	800b5c8 <_free_r+0x74>
 800b5b0:	6820      	ldr	r0, [r4, #0]
 800b5b2:	4401      	add	r1, r0
 800b5b4:	1858      	adds	r0, r3, r1
 800b5b6:	4282      	cmp	r2, r0
 800b5b8:	6019      	str	r1, [r3, #0]
 800b5ba:	d1dd      	bne.n	800b578 <_free_r+0x24>
 800b5bc:	6810      	ldr	r0, [r2, #0]
 800b5be:	6852      	ldr	r2, [r2, #4]
 800b5c0:	605a      	str	r2, [r3, #4]
 800b5c2:	4401      	add	r1, r0
 800b5c4:	6019      	str	r1, [r3, #0]
 800b5c6:	e7d7      	b.n	800b578 <_free_r+0x24>
 800b5c8:	d902      	bls.n	800b5d0 <_free_r+0x7c>
 800b5ca:	230c      	movs	r3, #12
 800b5cc:	602b      	str	r3, [r5, #0]
 800b5ce:	e7d3      	b.n	800b578 <_free_r+0x24>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	1821      	adds	r1, r4, r0
 800b5d4:	428a      	cmp	r2, r1
 800b5d6:	bf04      	itt	eq
 800b5d8:	6811      	ldreq	r1, [r2, #0]
 800b5da:	6852      	ldreq	r2, [r2, #4]
 800b5dc:	6062      	str	r2, [r4, #4]
 800b5de:	bf04      	itt	eq
 800b5e0:	1809      	addeq	r1, r1, r0
 800b5e2:	6021      	streq	r1, [r4, #0]
 800b5e4:	605c      	str	r4, [r3, #4]
 800b5e6:	e7c7      	b.n	800b578 <_free_r+0x24>
 800b5e8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20004060 	.word	0x20004060

0800b5f0 <_malloc_r>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	1ccd      	adds	r5, r1, #3
 800b5f4:	f025 0503 	bic.w	r5, r5, #3
 800b5f8:	3508      	adds	r5, #8
 800b5fa:	2d0c      	cmp	r5, #12
 800b5fc:	bf38      	it	cc
 800b5fe:	250c      	movcc	r5, #12
 800b600:	2d00      	cmp	r5, #0
 800b602:	4606      	mov	r6, r0
 800b604:	db01      	blt.n	800b60a <_malloc_r+0x1a>
 800b606:	42a9      	cmp	r1, r5
 800b608:	d903      	bls.n	800b612 <_malloc_r+0x22>
 800b60a:	230c      	movs	r3, #12
 800b60c:	6033      	str	r3, [r6, #0]
 800b60e:	2000      	movs	r0, #0
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	f000 f857 	bl	800b6c4 <__malloc_lock>
 800b616:	4a21      	ldr	r2, [pc, #132]	; (800b69c <_malloc_r+0xac>)
 800b618:	6814      	ldr	r4, [r2, #0]
 800b61a:	4621      	mov	r1, r4
 800b61c:	b991      	cbnz	r1, 800b644 <_malloc_r+0x54>
 800b61e:	4c20      	ldr	r4, [pc, #128]	; (800b6a0 <_malloc_r+0xb0>)
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	b91b      	cbnz	r3, 800b62c <_malloc_r+0x3c>
 800b624:	4630      	mov	r0, r6
 800b626:	f000 f83d 	bl	800b6a4 <_sbrk_r>
 800b62a:	6020      	str	r0, [r4, #0]
 800b62c:	4629      	mov	r1, r5
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f838 	bl	800b6a4 <_sbrk_r>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d124      	bne.n	800b682 <_malloc_r+0x92>
 800b638:	230c      	movs	r3, #12
 800b63a:	6033      	str	r3, [r6, #0]
 800b63c:	4630      	mov	r0, r6
 800b63e:	f000 f842 	bl	800b6c6 <__malloc_unlock>
 800b642:	e7e4      	b.n	800b60e <_malloc_r+0x1e>
 800b644:	680b      	ldr	r3, [r1, #0]
 800b646:	1b5b      	subs	r3, r3, r5
 800b648:	d418      	bmi.n	800b67c <_malloc_r+0x8c>
 800b64a:	2b0b      	cmp	r3, #11
 800b64c:	d90f      	bls.n	800b66e <_malloc_r+0x7e>
 800b64e:	600b      	str	r3, [r1, #0]
 800b650:	50cd      	str	r5, [r1, r3]
 800b652:	18cc      	adds	r4, r1, r3
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f836 	bl	800b6c6 <__malloc_unlock>
 800b65a:	f104 000b 	add.w	r0, r4, #11
 800b65e:	1d23      	adds	r3, r4, #4
 800b660:	f020 0007 	bic.w	r0, r0, #7
 800b664:	1ac3      	subs	r3, r0, r3
 800b666:	d0d3      	beq.n	800b610 <_malloc_r+0x20>
 800b668:	425a      	negs	r2, r3
 800b66a:	50e2      	str	r2, [r4, r3]
 800b66c:	e7d0      	b.n	800b610 <_malloc_r+0x20>
 800b66e:	428c      	cmp	r4, r1
 800b670:	684b      	ldr	r3, [r1, #4]
 800b672:	bf16      	itet	ne
 800b674:	6063      	strne	r3, [r4, #4]
 800b676:	6013      	streq	r3, [r2, #0]
 800b678:	460c      	movne	r4, r1
 800b67a:	e7eb      	b.n	800b654 <_malloc_r+0x64>
 800b67c:	460c      	mov	r4, r1
 800b67e:	6849      	ldr	r1, [r1, #4]
 800b680:	e7cc      	b.n	800b61c <_malloc_r+0x2c>
 800b682:	1cc4      	adds	r4, r0, #3
 800b684:	f024 0403 	bic.w	r4, r4, #3
 800b688:	42a0      	cmp	r0, r4
 800b68a:	d005      	beq.n	800b698 <_malloc_r+0xa8>
 800b68c:	1a21      	subs	r1, r4, r0
 800b68e:	4630      	mov	r0, r6
 800b690:	f000 f808 	bl	800b6a4 <_sbrk_r>
 800b694:	3001      	adds	r0, #1
 800b696:	d0cf      	beq.n	800b638 <_malloc_r+0x48>
 800b698:	6025      	str	r5, [r4, #0]
 800b69a:	e7db      	b.n	800b654 <_malloc_r+0x64>
 800b69c:	20004060 	.word	0x20004060
 800b6a0:	20004064 	.word	0x20004064

0800b6a4 <_sbrk_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4c06      	ldr	r4, [pc, #24]	; (800b6c0 <_sbrk_r+0x1c>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	f7ff fb74 	bl	800ad9c <_sbrk>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_sbrk_r+0x1a>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_sbrk_r+0x1a>
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	200048e8 	.word	0x200048e8

0800b6c4 <__malloc_lock>:
 800b6c4:	4770      	bx	lr

0800b6c6 <__malloc_unlock>:
 800b6c6:	4770      	bx	lr

0800b6c8 <_init>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	bf00      	nop
 800b6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ce:	bc08      	pop	{r3}
 800b6d0:	469e      	mov	lr, r3
 800b6d2:	4770      	bx	lr

0800b6d4 <_fini>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr
