
My_30072019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b0  080083b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080083b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d0  20000010  080083c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044e0  080083c8  000244e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211b5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004294  00000000  00000000  000411f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af8  00000000  00000000  00045490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001940  00000000  00000000  00046f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002386e  00000000  00000000  000488c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015bf2  00000000  00000000  0006c136  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dabe0  00000000  00000000  00081d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007280  00000000  00000000  0015c984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081cc 	.word	0x080081cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080081cc 	.word	0x080081cc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8d8 	bl	80006ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f007 fca4 	bl	8007e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f007 fb1a 	bl	8007b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	20003fd4 	.word	0x20003fd4

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20003fd4 	.word	0x20003fd4

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff4c 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d6:	f7ff ff61 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6978      	ldr	r0, [r7, #20]
 80006e2:	f7ff ffb1 	bl	8000648 <NVIC_EncodePriority>
 80006e6:	4602      	mov	r2, r0
 80006e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <__NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff54 	bl	80005b8 <__NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d004      	beq.n	8000736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00c      	b.n	8000750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2205      	movs	r2, #5
 800073a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f022 0201 	bic.w	r2, r2, #1
 800074c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	e16b      	b.n	8000a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000778:	2201      	movs	r2, #1
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	f040 815a 	bne.w	8000a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00b      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d007      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	2b11      	cmp	r3, #17
 80007ac:	d003      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b12      	cmp	r3, #18
 80007b4:	d130      	bne.n	8000818 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	4013      	ands	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	4313      	orrs	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ec:	2201      	movs	r2, #1
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	f003 0201 	and.w	r2, r3, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4313      	orrs	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0xfc>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d123      	bne.n	80008a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3208      	adds	r2, #8
 8000860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	220f      	movs	r2, #15
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4313      	orrs	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	08da      	lsrs	r2, r3, #3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3208      	adds	r2, #8
 800089a:	69b9      	ldr	r1, [r7, #24]
 800089c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0203 	and.w	r2, r3, #3
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80b4 	beq.w	8000a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b5f      	ldr	r3, [pc, #380]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008fe:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3302      	adds	r3, #2
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	220f      	movs	r2, #15
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a51      	ldr	r2, [pc, #324]	; (8000a6c <HAL_GPIO_Init+0x310>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d02b      	beq.n	8000982 <HAL_GPIO_Init+0x226>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <HAL_GPIO_Init+0x314>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d025      	beq.n	800097e <HAL_GPIO_Init+0x222>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <HAL_GPIO_Init+0x318>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d01f      	beq.n	800097a <HAL_GPIO_Init+0x21e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4e      	ldr	r2, [pc, #312]	; (8000a78 <HAL_GPIO_Init+0x31c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <HAL_GPIO_Init+0x21a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <HAL_GPIO_Init+0x320>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x216>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4c      	ldr	r2, [pc, #304]	; (8000a80 <HAL_GPIO_Init+0x324>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x212>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <HAL_GPIO_Init+0x328>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x20e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <HAL_GPIO_Init+0x32c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x20a>
 8000962:	2307      	movs	r3, #7
 8000964:	e00e      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000966:	2308      	movs	r3, #8
 8000968:	e00c      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096a:	2306      	movs	r3, #6
 800096c:	e00a      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096e:	2305      	movs	r3, #5
 8000970:	e008      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000972:	2304      	movs	r3, #4
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000976:	2303      	movs	r3, #3
 8000978:	e004      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097a:	2302      	movs	r3, #2
 800097c:	e002      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000982:	2300      	movs	r3, #0
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	f002 0203 	and.w	r2, r2, #3
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	4093      	lsls	r3, r2
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000994:	4934      	ldr	r1, [pc, #208]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009c6:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	f67f ae90 	bls.w	8000778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3724      	adds	r7, #36	; 0x24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40021400 	.word	0x40021400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40021c00 	.word	0x40021c00
 8000a8c:	40013c00 	.word	0x40013c00

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d104      	bne.n	8000ae6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	041a      	lsls	r2, r3, #16
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	619a      	str	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 f9de 	bl	8003ed0 <USB_GetMode>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	f040 80ef 	bne.w	8000cfa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 f9c2 	bl	8003eaa <USB_ReadInterrupts>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 80e5 	beq.w	8000cf8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 f9b9 	bl	8003eaa <USB_ReadInterrupts>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b42:	d104      	bne.n	8000b4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f9a9 	bl	8003eaa <USB_ReadInterrupts>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b62:	d104      	bne.n	8000b6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f999 	bl	8003eaa <USB_ReadInterrupts>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b82:	d104      	bne.n	8000b8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f989 	bl	8003eaa <USB_ReadInterrupts>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d103      	bne.n	8000baa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f97b 	bl	8003eaa <USB_ReadInterrupts>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bbe:	d115      	bne.n	8000bec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bc8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d108      	bne.n	8000bec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f007 fa10 	bl	8008000 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 f980 	bl	8003eec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f95a 	bl	8003eaa <USB_ReadInterrupts>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d102      	bne.n	8000c08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f001 f8f0 	bl	8001de8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 f94c 	bl	8003eaa <USB_ReadInterrupts>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d106      	bne.n	8000c2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f007 f9d3 	bl	8007fc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2208      	movs	r2, #8
 8000c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f93b 	bl	8003eaa <USB_ReadInterrupts>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c3e:	d138      	bne.n	8000cb2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f98b 	bl	8003f60 <USB_HC_ReadInterrupt>
 8000c4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e025      	b.n	8000c9e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d018      	beq.n	8000c98 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c7c:	d106      	bne.n	8000c8c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f858 	bl	8000d3a <HCD_HC_IN_IRQHandler>
 8000c8a:	e005      	b.n	8000c98 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 fc86 	bl	80015a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3d4      	bcc.n	8000c52 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f8f7 	bl	8003eaa <USB_ReadInterrupts>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2b10      	cmp	r3, #16
 8000cc4:	d101      	bne.n	8000cca <HAL_HCD_IRQHandler+0x1d2>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <HAL_HCD_IRQHandler+0x1d4>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d014      	beq.n	8000cfa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0210 	bic.w	r2, r2, #16
 8000cde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 ffd5 	bl	8001c90 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	699a      	ldr	r2, [r3, #24]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 0210 	orr.w	r2, r2, #16
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	e000      	b.n	8000cfa <HAL_HCD_IRQHandler+0x202>
      return;
 8000cf8:	bf00      	nop
    }
  }
}
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_HCD_Stop+0x16>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e00d      	b.n	8000d32 <HAL_HCD_Stop+0x32>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fa2c 	bl	8004180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	015a      	lsls	r2, r3, #5
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d119      	bne.n	8000d9e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	015a      	lsls	r2, r3, #5
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4413      	add	r3, r2
 8000d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d76:	461a      	mov	r2, r3
 8000d78:	2304      	movs	r3, #4
 8000d7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	015a      	lsls	r2, r3, #5
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4413      	add	r3, r2
 8000d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	0151      	lsls	r1, r2, #5
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	440a      	add	r2, r1
 8000d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	60d3      	str	r3, [r2, #12]
 8000d9c:	e0ce      	b.n	8000f3c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	015a      	lsls	r2, r3, #5
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db4:	d12c      	bne.n	8000e10 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	015a      	lsls	r2, r3, #5
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	335d      	adds	r3, #93	; 0x5d
 8000dda:	2207      	movs	r2, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	015a      	lsls	r2, r3, #5
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4413      	add	r3, r2
 8000de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	0151      	lsls	r1, r2, #5
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	440a      	add	r2, r1
 8000df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 f8ba 	bl	8003f82 <USB_HC_Halt>
 8000e0e:	e095      	b.n	8000f3c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	015a      	lsls	r2, r3, #5
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	d109      	bne.n	8000e3a <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	015a      	lsls	r2, r3, #5
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e32:	461a      	mov	r2, r3
 8000e34:	2320      	movs	r3, #32
 8000e36:	6093      	str	r3, [r2, #8]
 8000e38:	e080      	b.n	8000f3c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4413      	add	r3, r2
 8000e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d134      	bne.n	8000eba <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4413      	add	r3, r2
 8000e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	0151      	lsls	r1, r2, #5
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	440a      	add	r2, r1
 8000e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	335d      	adds	r3, #93	; 0x5d
 8000e80:	2205      	movs	r2, #5
 8000e82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e90:	461a      	mov	r2, r3
 8000e92:	2310      	movs	r3, #16
 8000e94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	015a      	lsls	r2, r3, #5
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f865 	bl	8003f82 <USB_HC_Halt>
 8000eb8:	e040      	b.n	8000f3c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	015a      	lsls	r2, r3, #5
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d134      	bne.n	8000f3c <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	015a      	lsls	r2, r3, #5
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4413      	add	r3, r2
 8000eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	0151      	lsls	r1, r2, #5
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	440a      	add	r2, r1
 8000ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f840 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2310      	movs	r3, #16
 8000f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	335d      	adds	r3, #93	; 0x5d
 8000f24:	2208      	movs	r2, #8
 8000f26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f34:	461a      	mov	r2, r3
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	015a      	lsls	r2, r3, #5
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4413      	add	r3, r2
 8000f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f52:	d122      	bne.n	8000f9a <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	0151      	lsls	r1, r2, #5
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	440a      	add	r2, r1
 8000f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ffff 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f90:	461a      	mov	r2, r3
 8000f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000f98:	e300      	b.n	800159c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	015a      	lsls	r2, r3, #5
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	f040 80fd 	bne.w	80011ac <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d01b      	beq.n	8000ff2 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3348      	adds	r3, #72	; 0x48
 8000fca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	0159      	lsls	r1, r3, #5
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000fde:	1ad1      	subs	r1, r2, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4403      	add	r3, r0
 8000fee:	334c      	adds	r3, #76	; 0x4c
 8000ff0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	335d      	adds	r3, #93	; 0x5d
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3358      	adds	r3, #88	; 0x58
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4413      	add	r3, r2
 8001022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001026:	461a      	mov	r2, r3
 8001028:	2301      	movs	r3, #1
 800102a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	333f      	adds	r3, #63	; 0x3f
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00a      	beq.n	8001058 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	333f      	adds	r3, #63	; 0x3f
 8001052:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001054:	2b02      	cmp	r3, #2
 8001056:	d121      	bne.n	800109c <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	015a      	lsls	r2, r3, #5
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4413      	add	r3, r2
 8001060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	0151      	lsls	r1, r2, #5
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	440a      	add	r2, r1
 800106e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f002 ff7d 	bl	8003f82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	015a      	lsls	r2, r3, #5
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4413      	add	r3, r2
 8001090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001094:	461a      	mov	r2, r3
 8001096:	2310      	movs	r3, #16
 8001098:	6093      	str	r3, [r2, #8]
 800109a:	e070      	b.n	800117e <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	333f      	adds	r3, #63	; 0x3f
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d12a      	bne.n	8001108 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	015a      	lsls	r2, r3, #5
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4413      	add	r3, r2
 80010ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	0151      	lsls	r1, r2, #5
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	440a      	add	r2, r1
 80010c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80010cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010d0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	335c      	adds	r3, #92	; 0x5c
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	b2d8      	uxtb	r0, r3
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	335c      	adds	r3, #92	; 0x5c
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4601      	mov	r1, r0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f006 ff8b 	bl	800801c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001106:	e03a      	b.n	800117e <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	333f      	adds	r3, #63	; 0x3f
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d12f      	bne.n	800117e <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	335c      	adds	r3, #92	; 0x5c
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	3350      	adds	r3, #80	; 0x50
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2d8      	uxtb	r0, r3
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	3350      	adds	r3, #80	; 0x50
 800115a:	4602      	mov	r2, r0
 800115c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	b2d8      	uxtb	r0, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	335c      	adds	r3, #92	; 0x5c
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4601      	mov	r1, r0
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f006 ff4f 	bl	800801c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3350      	adds	r3, #80	; 0x50
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2d8      	uxtb	r0, r3
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3350      	adds	r3, #80	; 0x50
 80011a6:	4602      	mov	r2, r0
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	e1f7      	b.n	800159c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	015a      	lsls	r2, r3, #5
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b02      	cmp	r3, #2
 80011c0:	f040 811a 	bne.w	80013f8 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	015a      	lsls	r2, r3, #5
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4413      	add	r3, r2
 80011cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	0151      	lsls	r1, r2, #5
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	440a      	add	r2, r1
 80011da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011de:	f023 0302 	bic.w	r3, r3, #2
 80011e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	335d      	adds	r3, #93	; 0x5d
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10a      	bne.n	8001210 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	335c      	adds	r3, #92	; 0x5c
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e0d9      	b.n	80013c4 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	335d      	adds	r3, #93	; 0x5d
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d10a      	bne.n	800123c <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	335c      	adds	r3, #92	; 0x5c
 8001236:	2205      	movs	r2, #5
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e0c3      	b.n	80013c4 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	335d      	adds	r3, #93	; 0x5d
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b06      	cmp	r3, #6
 8001250:	d00a      	beq.n	8001268 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	335d      	adds	r3, #93	; 0x5d
 8001262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001264:	2b08      	cmp	r3, #8
 8001266:	d156      	bne.n	8001316 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	3358      	adds	r3, #88	; 0x58
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4403      	add	r3, r0
 800128a:	3358      	adds	r3, #88	; 0x58
 800128c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3358      	adds	r3, #88	; 0x58
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d914      	bls.n	80012ce <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3358      	adds	r3, #88	; 0x58
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	335c      	adds	r3, #92	; 0x5c
 80012c8:	2204      	movs	r2, #4
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e009      	b.n	80012e2 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	335c      	adds	r3, #92	; 0x5c
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001300:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4413      	add	r3, r2
 800130a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e056      	b.n	80013c4 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	335d      	adds	r3, #93	; 0x5d
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d123      	bne.n	8001374 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	335c      	adds	r3, #92	; 0x5c
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	015a      	lsls	r2, r3, #5
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4413      	add	r3, r2
 8001348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001356:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	015a      	lsls	r2, r3, #5
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4413      	add	r3, r2
 8001368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e027      	b.n	80013c4 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	335d      	adds	r3, #93	; 0x5d
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d11c      	bne.n	80013c4 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3358      	adds	r3, #88	; 0x58
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4403      	add	r3, r0
 80013ac:	3358      	adds	r3, #88	; 0x58
 80013ae:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	335c      	adds	r3, #92	; 0x5c
 80013c0:	2204      	movs	r2, #4
 80013c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d0:	461a      	mov	r2, r3
 80013d2:	2302      	movs	r3, #2
 80013d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	335c      	adds	r3, #92	; 0x5c
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4601      	mov	r1, r0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f006 fe13 	bl	800801c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80013f6:	e0d1      	b.n	800159c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	2b80      	cmp	r3, #128	; 0x80
 800140c:	d13e      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4413      	add	r3, r2
 8001416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	0151      	lsls	r1, r2, #5
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	440a      	add	r2, r1
 8001424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	3358      	adds	r3, #88	; 0x58
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4403      	add	r3, r0
 8001450:	3358      	adds	r3, #88	; 0x58
 8001452:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	335d      	adds	r3, #93	; 0x5d
 8001464:	2206      	movs	r2, #6
 8001466:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fd85 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001484:	461a      	mov	r2, r3
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	6093      	str	r3, [r2, #8]
}
 800148a:	e087      	b.n	800159c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d17c      	bne.n	800159c <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	333f      	adds	r3, #63	; 0x3f
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d122      	bne.n	80014fe <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3358      	adds	r3, #88	; 0x58
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	0151      	lsls	r1, r2, #5
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	440a      	add	r2, r1
 80014e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fd43 	bl	8003f82 <USB_HC_Halt>
 80014fc:	e045      	b.n	800158a <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	333f      	adds	r3, #63	; 0x3f
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00a      	beq.n	800152a <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	333f      	adds	r3, #63	; 0x3f
 8001524:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001526:	2b02      	cmp	r3, #2
 8001528:	d12f      	bne.n	800158a <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3358      	adds	r3, #88	; 0x58
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d121      	bne.n	800158a <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	335d      	adds	r3, #93	; 0x5d
 8001556:	2203      	movs	r2, #3
 8001558:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	0151      	lsls	r1, r2, #5
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	440a      	add	r2, r1
 8001570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fcfc 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4413      	add	r3, r2
 8001592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001596:	461a      	mov	r2, r3
 8001598:	2310      	movs	r3, #16
 800159a:	6093      	str	r3, [r2, #8]
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d119      	bne.n	8001608 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e0:	461a      	mov	r2, r3
 80015e2:	2304      	movs	r3, #4
 80015e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	0151      	lsls	r1, r2, #5
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	440a      	add	r2, r1
 80015fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001606:	e33e      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4413      	add	r3, r2
 8001610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b20      	cmp	r3, #32
 800161c:	d141      	bne.n	80016a2 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	461a      	mov	r2, r3
 800162c:	2320      	movs	r3, #32
 800162e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	333d      	adds	r3, #61	; 0x3d
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 831f 	bne.w	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	333d      	adds	r3, #61	; 0x3d
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	335c      	adds	r3, #92	; 0x5c
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	440a      	add	r2, r1
 8001686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fc71 	bl	8003f82 <USB_HC_Halt>
}
 80016a0:	e2f1      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d13f      	bne.n	8001738 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	335d      	adds	r3, #93	; 0x5d
 80016c8:	2204      	movs	r2, #4
 80016ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	333d      	adds	r3, #61	; 0x3d
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3358      	adds	r3, #88	; 0x58
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	0151      	lsls	r1, r2, #5
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	440a      	add	r2, r1
 800170a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fc2f 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001730:	461a      	mov	r2, r3
 8001732:	2340      	movs	r3, #64	; 0x40
 8001734:	6093      	str	r3, [r2, #8]
}
 8001736:	e2a6      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4413      	add	r3, r2
 8001740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174e:	d122      	bne.n	8001796 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4413      	add	r3, r2
 8001758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	0151      	lsls	r1, r2, #5
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	440a      	add	r2, r1
 8001766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fc01 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001792:	6093      	str	r3, [r2, #8]
}
 8001794:	e277      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d135      	bne.n	8001818 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3358      	adds	r3, #88	; 0x58
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	0151      	lsls	r1, r2, #5
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	440a      	add	r2, r1
 80017d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fbc9 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fc:	461a      	mov	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	335d      	adds	r3, #93	; 0x5d
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	e236      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b08      	cmp	r3, #8
 800182c:	d12b      	bne.n	8001886 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4413      	add	r3, r2
 8001836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183a:	461a      	mov	r2, r3
 800183c:	2308      	movs	r3, #8
 800183e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4413      	add	r3, r2
 8001848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	0151      	lsls	r1, r2, #5
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	440a      	add	r2, r1
 8001856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fb89 	bl	8003f82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	335d      	adds	r3, #93	; 0x5d
 8001880:	2205      	movs	r2, #5
 8001882:	701a      	strb	r2, [r3, #0]
}
 8001884:	e1ff      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4413      	add	r3, r2
 800188e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	d155      	bne.n	8001948 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3358      	adds	r3, #88	; 0x58
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	335d      	adds	r3, #93	; 0x5d
 80018c0:	2203      	movs	r2, #3
 80018c2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	333d      	adds	r3, #61	; 0x3d
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d114      	bne.n	8001904 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	333c      	adds	r3, #60	; 0x3c
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	333d      	adds	r3, #61	; 0x3d
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4413      	add	r3, r2
 800190c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	0151      	lsls	r1, r2, #5
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	440a      	add	r2, r1
 800191a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fb27 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	2310      	movs	r3, #16
 8001944:	6093      	str	r3, [r2, #8]
}
 8001946:	e19e      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	2b80      	cmp	r3, #128	; 0x80
 800195c:	d12b      	bne.n	80019b6 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4413      	add	r3, r2
 8001966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	0151      	lsls	r1, r2, #5
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	440a      	add	r2, r1
 8001974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fafa 	bl	8003f82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	335d      	adds	r3, #93	; 0x5d
 800199e:	2206      	movs	r2, #6
 80019a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	461a      	mov	r2, r3
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	6093      	str	r3, [r2, #8]
}
 80019b4:	e167      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019cc:	d135      	bne.n	8001a3a <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	0151      	lsls	r1, r2, #5
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	440a      	add	r2, r1
 80019e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fac2 	bl	8003f82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	335d      	adds	r3, #93	; 0x5d
 8001a34:	2208      	movs	r2, #8
 8001a36:	701a      	strb	r2, [r3, #0]
}
 8001a38:	e125      	b.n	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	f040 811a 	bne.w	8001c86 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	0151      	lsls	r1, r2, #5
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	440a      	add	r2, r1
 8001a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a6c:	f023 0302 	bic.w	r3, r3, #2
 8001a70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	335d      	adds	r3, #93	; 0x5d
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d137      	bne.n	8001af8 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	335c      	adds	r3, #92	; 0x5c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	333f      	adds	r3, #63	; 0x3f
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d00b      	beq.n	8001aca <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	333f      	adds	r3, #63	; 0x3f
 8001ac2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	f040 80c5 	bne.w	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3351      	adds	r3, #81	; 0x51
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f083 0301 	eor.w	r3, r3, #1
 8001ae0:	b2d8      	uxtb	r0, r3
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	3351      	adds	r3, #81	; 0x51
 8001af2:	4602      	mov	r2, r0
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e0ad      	b.n	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	335d      	adds	r3, #93	; 0x5d
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d10a      	bne.n	8001b24 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	335c      	adds	r3, #92	; 0x5c
 8001b1e:	2202      	movs	r2, #2
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e097      	b.n	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	335d      	adds	r3, #93	; 0x5d
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d10a      	bne.n	8001b50 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	335c      	adds	r3, #92	; 0x5c
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e081      	b.n	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	335d      	adds	r3, #93	; 0x5d
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10a      	bne.n	8001b7c <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	335c      	adds	r3, #92	; 0x5c
 8001b76:	2205      	movs	r2, #5
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e06b      	b.n	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	335d      	adds	r3, #93	; 0x5d
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d00a      	beq.n	8001ba8 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	335d      	adds	r3, #93	; 0x5d
 8001ba2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d155      	bne.n	8001c54 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3358      	adds	r3, #88	; 0x58
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1c59      	adds	r1, r3, #1
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4403      	add	r3, r0
 8001bca:	3358      	adds	r3, #88	; 0x58
 8001bcc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3358      	adds	r3, #88	; 0x58
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d914      	bls.n	8001c0e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3358      	adds	r3, #88	; 0x58
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	335c      	adds	r3, #92	; 0x5c
 8001c08:	2204      	movs	r2, #4
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e009      	b.n	8001c22 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	335c      	adds	r3, #92	; 0x5c
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c38:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c40:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	461a      	mov	r2, r3
 8001c62:	2302      	movs	r3, #2
 8001c64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	335c      	adds	r3, #92	; 0x5c
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4601      	mov	r1, r0
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f006 f9cb 	bl	800801c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	0c5b      	lsrs	r3, r3, #17
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cc4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d003      	beq.n	8001cd4 <HCD_RXQLVL_IRQHandler+0x44>
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	f000 8082 	beq.w	8001dd6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001cd2:	e083      	b.n	8001ddc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d07f      	beq.n	8001dda <HCD_RXQLVL_IRQHandler+0x14a>
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3344      	adds	r3, #68	; 0x44
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d074      	beq.n	8001dda <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f002 f8a4 	bl	8003e58 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3344      	adds	r3, #68	; 0x44
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	18d1      	adds	r1, r2, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4403      	add	r3, r0
 8001d34:	3344      	adds	r3, #68	; 0x44
 8001d36:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	334c      	adds	r3, #76	; 0x4c
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	18d1      	adds	r1, r2, r3
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4403      	add	r3, r0
 8001d5c:	334c      	adds	r3, #76	; 0x4c
 8001d5e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HCD_RXQLVL_IRQHandler+0x154>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d031      	beq.n	8001dda <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d94:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	3350      	adds	r3, #80	; 0x50
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2d8      	uxtb	r0, r3
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	3350      	adds	r3, #80	; 0x50
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	701a      	strb	r2, [r3, #0]
      break;
 8001dd4:	e001      	b.n	8001dda <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e000      	b.n	8001ddc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8001dda:	bf00      	nop
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	1ff80000 	.word	0x1ff80000

08001de8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e14:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d10b      	bne.n	8001e38 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f006 f8da 	bl	8007fe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d132      	bne.n	8001ea8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d126      	bne.n	8001ea2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d113      	bne.n	8001e84 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001e62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e66:	d106      	bne.n	8001e76 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f83c 	bl	8003eec <USB_InitFSLSPClkSel>
 8001e74:	e011      	b.n	8001e9a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f835 	bl	8003eec <USB_InitFSLSPClkSel>
 8001e82:	e00a      	b.n	8001e9a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e92:	461a      	mov	r2, r3
 8001e94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001e98:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f006 f8d0 	bl	8008040 <HAL_HCD_PortEnabled_Callback>
 8001ea0:	e002      	b.n	8001ea8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f006 f8da 	bl	800805c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d103      	bne.n	8001eba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6013      	str	r3, [r2, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e11f      	b.n	8002122 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f005 fe4c 	bl	8007b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f34:	f000 fd3e 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8001f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a7b      	ldr	r2, [pc, #492]	; (800212c <HAL_I2C_Init+0x25c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d807      	bhi.n	8001f54 <HAL_I2C_Init+0x84>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a7a      	ldr	r2, [pc, #488]	; (8002130 <HAL_I2C_Init+0x260>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	bf94      	ite	ls
 8001f4c:	2301      	movls	r3, #1
 8001f4e:	2300      	movhi	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e006      	b.n	8001f62 <HAL_I2C_Init+0x92>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a77      	ldr	r2, [pc, #476]	; (8002134 <HAL_I2C_Init+0x264>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	bf94      	ite	ls
 8001f5c:	2301      	movls	r3, #1
 8001f5e:	2300      	movhi	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0db      	b.n	8002122 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_I2C_Init+0x268>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a64      	ldr	r2, [pc, #400]	; (800212c <HAL_I2C_Init+0x25c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d802      	bhi.n	8001fa4 <HAL_I2C_Init+0xd4>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	e009      	b.n	8001fb8 <HAL_I2C_Init+0xe8>
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_I2C_Init+0x26c>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4956      	ldr	r1, [pc, #344]	; (800212c <HAL_I2C_Init+0x25c>)
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d80d      	bhi.n	8001ff4 <HAL_I2C_Init+0x124>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e59      	subs	r1, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	bf38      	it	cc
 8001ff0:	2304      	movcc	r3, #4
 8001ff2:	e04f      	b.n	8002094 <HAL_I2C_Init+0x1c4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <HAL_I2C_Init+0x150>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e012      	b.n	8002046 <HAL_I2C_Init+0x176>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Init+0x17e>
 800204a:	2301      	movs	r3, #1
 800204c:	e022      	b.n	8002094 <HAL_I2C_Init+0x1c4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10e      	bne.n	8002074 <HAL_I2C_Init+0x1a4>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e58      	subs	r0, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	440b      	add	r3, r1
 8002064:	fbb0 f3f3 	udiv	r3, r0, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Init+0x1c4>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	6809      	ldr	r1, [r1, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6911      	ldr	r1, [r2, #16]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68d2      	ldr	r2, [r2, #12]
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	000186a0 	.word	0x000186a0
 8002130:	001e847f 	.word	0x001e847f
 8002134:	003d08ff 	.word	0x003d08ff
 8002138:	431bde83 	.word	0x431bde83
 800213c:	10624dd3 	.word	0x10624dd3

08002140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e25b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	4ba3      	ldr	r3, [pc, #652]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00c      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4ba0      	ldr	r3, [pc, #640]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002172:	2b08      	cmp	r3, #8
 8002174:	d112      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b9d      	ldr	r3, [pc, #628]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b99      	ldr	r3, [pc, #612]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e236      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a90      	ldr	r2, [pc, #576]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b84      	ldr	r3, [pc, #528]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a83      	ldr	r2, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe f9a0 	bl	800053c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe f99c 	bl	800053c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fb      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe f98c 	bl	800053c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe f988 	bl	800053c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e7      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b6c      	ldr	r3, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b62      	ldr	r3, [pc, #392]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1bb      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b56      	ldr	r3, [pc, #344]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4952      	ldr	r1, [pc, #328]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_RCC_OscConfig+0x2b0>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7fe f941 	bl	800053c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022be:	f7fe f93d 	bl	800053c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19c      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4940      	ldr	r1, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x2b0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe f920 	bl	800053c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe f91c 	bl	800053c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d030      	beq.n	800238c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x2b4>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe f900 	bl	800053c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe f8fc 	bl	800053c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
 800235e:	e015      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x2b4>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe f8e9 	bl	800053c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe f8e5 	bl	800053c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e144      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a0 	beq.w	80024da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d121      	bne.n	800241a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe f8ab 	bl	800053c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e011      	b.n	800240e <HAL_RCC_OscConfig+0x2ce>
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	42470000 	.word	0x42470000
 80023f4:	42470e80 	.word	0x42470e80
 80023f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fc:	f7fe f89e 	bl	800053c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0fd      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x2f0>
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x32a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	4b74      	ldr	r3, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a73      	ldr	r2, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x32a>
 8002452:	4b71      	ldr	r3, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a70      	ldr	r2, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a6d      	ldr	r2, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe f863 	bl	800053c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe f85f 	bl	800053c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0bc      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCC_OscConfig+0x33a>
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe f84d 	bl	800053c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe f849 	bl	800053c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0a6      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8092 	beq.w	8002608 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d05c      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d141      	bne.n	800257c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe f81d 	bl	800053c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe f819 	bl	800053c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e078      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	4933      	ldr	r1, [pc, #204]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fd fff2 	bl	800053c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7fd ffee 	bl	800053c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04d      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x41c>
 800257a:	e045      	b.n	8002608 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fd ffdb 	bl	800053c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fd ffd7 	bl	800053c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e036      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x44a>
 80025a8:	e02e      	b.n	8002608 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e029      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d115      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40007000 	.word	0x40007000
 8002618:	40023800 	.word	0x40023800
 800261c:	42470060 	.word	0x42470060

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cc      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d90c      	bls.n	800265c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d044      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e067      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4934      	ldr	r1, [pc, #208]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fd ff14 	bl	800053c <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fd ff10 	bl	800053c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	fa21 f303 	lsr.w	r3, r1, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f005 fb40 	bl	8007e4c <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08008390 	.word	0x08008390
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d007      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x32>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d008      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x38>
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80b4 	bne.w	8002980 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800281a:	60bb      	str	r3, [r7, #8]
       break;
 800281c:	e0b3      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281e:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002820:	60bb      	str	r3, [r7, #8]
      break;
 8002822:	e0b0      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282e:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04a      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	f04f 0400 	mov.w	r4, #0
 8002844:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	ea03 0501 	and.w	r5, r3, r1
 8002850:	ea04 0602 	and.w	r6, r4, r2
 8002854:	4629      	mov	r1, r5
 8002856:	4632      	mov	r2, r6
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f04f 0400 	mov.w	r4, #0
 8002860:	0154      	lsls	r4, r2, #5
 8002862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	4619      	mov	r1, r3
 800286a:	4622      	mov	r2, r4
 800286c:	1b49      	subs	r1, r1, r5
 800286e:	eb62 0206 	sbc.w	r2, r2, r6
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	f04f 0400 	mov.w	r4, #0
 800287a:	0194      	lsls	r4, r2, #6
 800287c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002880:	018b      	lsls	r3, r1, #6
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	eb64 0402 	sbc.w	r4, r4, r2
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	00e2      	lsls	r2, r4, #3
 8002892:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002896:	00d9      	lsls	r1, r3, #3
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	195b      	adds	r3, r3, r5
 800289e:	eb44 0406 	adc.w	r4, r4, r6
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	0262      	lsls	r2, r4, #9
 80028ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028b0:	0259      	lsls	r1, r3, #9
 80028b2:	460b      	mov	r3, r1
 80028b4:	4614      	mov	r4, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	4621      	mov	r1, r4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f04f 0400 	mov.w	r4, #0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	f7fd fc84 	bl	80001d0 <__aeabi_uldivmod>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e049      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	f04f 0400 	mov.w	r4, #0
 80028da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	ea03 0501 	and.w	r5, r3, r1
 80028e6:	ea04 0602 	and.w	r6, r4, r2
 80028ea:	4629      	mov	r1, r5
 80028ec:	4632      	mov	r2, r6
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	0154      	lsls	r4, r2, #5
 80028f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028fc:	014b      	lsls	r3, r1, #5
 80028fe:	4619      	mov	r1, r3
 8002900:	4622      	mov	r2, r4
 8002902:	1b49      	subs	r1, r1, r5
 8002904:	eb62 0206 	sbc.w	r2, r2, r6
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	0194      	lsls	r4, r2, #6
 8002912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	1a5b      	subs	r3, r3, r1
 800291a:	eb64 0402 	sbc.w	r4, r4, r2
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	00e2      	lsls	r2, r4, #3
 8002928:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800292c:	00d9      	lsls	r1, r3, #3
 800292e:	460b      	mov	r3, r1
 8002930:	4614      	mov	r4, r2
 8002932:	195b      	adds	r3, r3, r5
 8002934:	eb44 0406 	adc.w	r4, r4, r6
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	02a2      	lsls	r2, r4, #10
 8002942:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002946:	0299      	lsls	r1, r3, #10
 8002948:	460b      	mov	r3, r1
 800294a:	4614      	mov	r4, r2
 800294c:	4618      	mov	r0, r3
 800294e:	4621      	mov	r1, r4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	f7fd fc39 	bl	80001d0 <__aeabi_uldivmod>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	60bb      	str	r3, [r7, #8]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002982:	60bb      	str	r3, [r7, #8]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	68bb      	ldr	r3, [r7, #8]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	007a1200 	.word	0x007a1200

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	2000000c 	.word	0x2000000c

080029b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b8:	f7ff fff0 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029bc:	4601      	mov	r1, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	080083a0 	.word	0x080083a0

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e0:	f7ff ffdc 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029e4:	4601      	mov	r1, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0b5b      	lsrs	r3, r3, #13
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	080083a0 	.word	0x080083a0

08002a04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	220f      	movs	r2, #15
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_RCC_GetClockConfig+0x60>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40023c00 	.word	0x40023c00

08002a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e056      	b.n	8002b28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f005 f8c5 	bl	8007c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	f003 0104 	and.w	r1, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01d      	b.n	8002b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f815 	bl	8002b86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 f968 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d007      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d122      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11b      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0202 	mvn.w	r2, #2
 8002c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f8ee 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002c2a:	e005      	b.n	8002c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8e0 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8f1 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d122      	bne.n	8002c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d11b      	bne.n	8002c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0204 	mvn.w	r2, #4
 8002c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8c4 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002c7e:	e005      	b.n	8002c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8b6 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8c7 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d122      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11b      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0208 	mvn.w	r2, #8
 8002cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f89a 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002cd2:	e005      	b.n	8002ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f88c 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f89d 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d122      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d11b      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f06f 0210 	mvn.w	r2, #16
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2208      	movs	r2, #8
 8002d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f870 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002d26:	e005      	b.n	8002d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f862 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f873 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10e      	bne.n	8002d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0201 	mvn.w	r2, #1
 8002d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f004 f9dd 	bl	8007120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b80      	cmp	r3, #128	; 0x80
 8002d72:	d10e      	bne.n	8002d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d107      	bne.n	8002d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f903 	bl	8002f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d10e      	bne.n	8002dbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d107      	bne.n	8002dbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f838 	bl	8002e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d10e      	bne.n	8002dea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f06f 0220 	mvn.w	r2, #32
 8002de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8cd 	bl	8002f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d00f      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <TIM_Base_SetConfig+0x118>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3c      	ldr	r2, [pc, #240]	; (8002f60 <TIM_Base_SetConfig+0x11c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <TIM_Base_SetConfig+0x120>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d108      	bne.n	8002e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d027      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <TIM_Base_SetConfig+0x118>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d023      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <TIM_Base_SetConfig+0x11c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <TIM_Base_SetConfig+0x120>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d017      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <TIM_Base_SetConfig+0x128>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <TIM_Base_SetConfig+0x12c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00f      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <TIM_Base_SetConfig+0x130>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <TIM_Base_SetConfig+0x134>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <TIM_Base_SetConfig+0x138>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <TIM_Base_SetConfig+0x13c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_Base_SetConfig+0xf8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	615a      	str	r2, [r3, #20]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40001800 	.word	0x40001800
 8002f7c:	40001c00 	.word	0x40001c00
 8002f80:	40002000 	.word	0x40002000

08002f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e03f      	b.n	800303e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 fe6e 	bl	8007cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb4b 	bl	800368c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b088      	sub	sp, #32
 800304a:	af02      	add	r7, sp, #8
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 8083 	bne.w	800316e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Transmit+0x2e>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e07b      	b.n	8003170 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_UART_Transmit+0x40>
 8003082:	2302      	movs	r3, #2
 8003084:	e074      	b.n	8003170 <HAL_UART_Transmit+0x12a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	; 0x21
 8003098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800309c:	f7fd fa4e 	bl	800053c <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030b6:	e042      	b.n	800313e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d122      	bne.n	8003116 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f96a 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e042      	b.n	8003170 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3302      	adds	r3, #2
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	e017      	b.n	800313e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e013      	b.n	800313e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f947 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e01f      	b.n	8003170 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1b7      	bne.n	80030b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	2140      	movs	r1, #64	; 0x40
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f92e 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e006      	b.n	8003170 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x52>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9e0 	bl	8003588 <UART_Receive_IT>
      return;
 80031c8:	e0d1      	b.n	800336e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80b0 	beq.w	8003332 <HAL_UART_IRQHandler+0x1ba>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_UART_IRQHandler+0x70>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80a5 	beq.w	8003332 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_UART_IRQHandler+0x90>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_UART_IRQHandler+0xb0>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	f043 0202 	orr.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_UART_IRQHandler+0xd0>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00f      	beq.n	8003272 <HAL_UART_IRQHandler+0xfa>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_UART_IRQHandler+0xee>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	f043 0208 	orr.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d078      	beq.n	800336c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_UART_IRQHandler+0x11c>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f97a 	bl	8003588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_UART_IRQHandler+0x144>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d031      	beq.n	8003320 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8c3 	bl	8003448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d123      	bne.n	8003318 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_UART_IRQHandler+0x1fc>)
 80032ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fa0f 	bl	8000718 <HAL_DMA_Abort_IT>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d016      	beq.n	800332e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800330a:	4610      	mov	r0, r2
 800330c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	e00e      	b.n	800332e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f845 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	e00a      	b.n	800332e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f841 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331e:	e006      	b.n	800332e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f83d 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800332c:	e01e      	b.n	800336c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	bf00      	nop
    return;
 8003330:	e01c      	b.n	800336c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x1d6>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8b0 	bl	80034ac <UART_Transmit_IT>
    return;
 800334c:	e00f      	b.n	800336e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_UART_IRQHandler+0x1f6>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8f8 	bl	8003558 <UART_EndTransmit_IT>
    return;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_UART_IRQHandler+0x1f6>
    return;
 800336c:	bf00      	nop
  }
}
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	08003485 	.word	0x08003485

08003378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	e02c      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d028      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d4:	f7fd f8b2 	bl	800053c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d21d      	bcs.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	d0c3      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800345e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff ff7e 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b21      	cmp	r3, #33	; 0x21
 80034be:	d144      	bne.n	800354a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d11a      	bne.n	8003500 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]
 80034f2:	e00e      	b.n	8003512 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]
 80034fe:	e008      	b.n	8003512 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	1c59      	adds	r1, r3, #1
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6211      	str	r1, [r2, #32]
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29b      	uxth	r3, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4619      	mov	r1, r3
 8003520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fefd 	bl	8003378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b22      	cmp	r3, #34	; 0x22
 800359a:	d171      	bne.n	8003680 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d123      	bne.n	80035ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10e      	bne.n	80035d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
 80035d0:	e029      	b.n	8003626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
 80035ec:	e01b      	b.n	8003626 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6858      	ldr	r0, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6291      	str	r1, [r2, #40]	; 0x28
 8003606:	b2c2      	uxtb	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e00c      	b.n	8003626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	1c58      	adds	r0, r3, #1
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	6288      	str	r0, [r1, #40]	; 0x28
 800361e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29b      	uxth	r3, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4619      	mov	r1, r3
 8003634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003636:	2b00      	cmp	r3, #0
 8003638:	d120      	bne.n	800367c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0220 	bic.w	r2, r2, #32
 8003648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe8a 	bl	800338c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e002      	b.n	8003682 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036ce:	f023 030c 	bic.w	r3, r3, #12
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	430b      	orrs	r3, r1
 80036da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	f040 818b 	bne.w	8003a14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4ac1      	ldr	r2, [pc, #772]	; (8003a08 <UART_SetConfig+0x37c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d005      	beq.n	8003714 <UART_SetConfig+0x88>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4abf      	ldr	r2, [pc, #764]	; (8003a0c <UART_SetConfig+0x380>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 80bd 	bne.w	800388e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003714:	f7ff f962 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8003718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	461d      	mov	r5, r3
 800371e:	f04f 0600 	mov.w	r6, #0
 8003722:	46a8      	mov	r8, r5
 8003724:	46b1      	mov	r9, r6
 8003726:	eb18 0308 	adds.w	r3, r8, r8
 800372a:	eb49 0409 	adc.w	r4, r9, r9
 800372e:	4698      	mov	r8, r3
 8003730:	46a1      	mov	r9, r4
 8003732:	eb18 0805 	adds.w	r8, r8, r5
 8003736:	eb49 0906 	adc.w	r9, r9, r6
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800374a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374e:	4688      	mov	r8, r1
 8003750:	4691      	mov	r9, r2
 8003752:	eb18 0005 	adds.w	r0, r8, r5
 8003756:	eb49 0106 	adc.w	r1, r9, r6
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0600 	mov.w	r6, #0
 8003764:	196b      	adds	r3, r5, r5
 8003766:	eb46 0406 	adc.w	r4, r6, r6
 800376a:	461a      	mov	r2, r3
 800376c:	4623      	mov	r3, r4
 800376e:	f7fc fd2f 	bl	80001d0 <__aeabi_uldivmod>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	461a      	mov	r2, r3
 8003778:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <UART_SetConfig+0x384>)
 800377a:	fba3 2302 	umull	r2, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	461d      	mov	r5, r3
 8003788:	f04f 0600 	mov.w	r6, #0
 800378c:	46a9      	mov	r9, r5
 800378e:	46b2      	mov	sl, r6
 8003790:	eb19 0309 	adds.w	r3, r9, r9
 8003794:	eb4a 040a 	adc.w	r4, sl, sl
 8003798:	4699      	mov	r9, r3
 800379a:	46a2      	mov	sl, r4
 800379c:	eb19 0905 	adds.w	r9, r9, r5
 80037a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b8:	4689      	mov	r9, r1
 80037ba:	4692      	mov	sl, r2
 80037bc:	eb19 0005 	adds.w	r0, r9, r5
 80037c0:	eb4a 0106 	adc.w	r1, sl, r6
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	461d      	mov	r5, r3
 80037ca:	f04f 0600 	mov.w	r6, #0
 80037ce:	196b      	adds	r3, r5, r5
 80037d0:	eb46 0406 	adc.w	r4, r6, r6
 80037d4:	461a      	mov	r2, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	f7fc fcfa 	bl	80001d0 <__aeabi_uldivmod>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <UART_SetConfig+0x384>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	; 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	3332      	adds	r3, #50	; 0x32
 80037f6:	4a86      	ldr	r2, [pc, #536]	; (8003a10 <UART_SetConfig+0x384>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003804:	4498      	add	r8, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	461d      	mov	r5, r3
 800380a:	f04f 0600 	mov.w	r6, #0
 800380e:	46a9      	mov	r9, r5
 8003810:	46b2      	mov	sl, r6
 8003812:	eb19 0309 	adds.w	r3, r9, r9
 8003816:	eb4a 040a 	adc.w	r4, sl, sl
 800381a:	4699      	mov	r9, r3
 800381c:	46a2      	mov	sl, r4
 800381e:	eb19 0905 	adds.w	r9, r9, r5
 8003822:	eb4a 0a06 	adc.w	sl, sl, r6
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800383a:	4689      	mov	r9, r1
 800383c:	4692      	mov	sl, r2
 800383e:	eb19 0005 	adds.w	r0, r9, r5
 8003842:	eb4a 0106 	adc.w	r1, sl, r6
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	461d      	mov	r5, r3
 800384c:	f04f 0600 	mov.w	r6, #0
 8003850:	196b      	adds	r3, r5, r5
 8003852:	eb46 0406 	adc.w	r4, r6, r6
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	f7fc fcb9 	bl	80001d0 <__aeabi_uldivmod>
 800385e:	4603      	mov	r3, r0
 8003860:	460c      	mov	r4, r1
 8003862:	461a      	mov	r2, r3
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <UART_SetConfig+0x384>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <UART_SetConfig+0x384>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 0207 	and.w	r2, r3, #7
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4442      	add	r2, r8
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	e26f      	b.n	8003d6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388e:	f7ff f891 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8003892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	461d      	mov	r5, r3
 8003898:	f04f 0600 	mov.w	r6, #0
 800389c:	46a8      	mov	r8, r5
 800389e:	46b1      	mov	r9, r6
 80038a0:	eb18 0308 	adds.w	r3, r8, r8
 80038a4:	eb49 0409 	adc.w	r4, r9, r9
 80038a8:	4698      	mov	r8, r3
 80038aa:	46a1      	mov	r9, r4
 80038ac:	eb18 0805 	adds.w	r8, r8, r5
 80038b0:	eb49 0906 	adc.w	r9, r9, r6
 80038b4:	f04f 0100 	mov.w	r1, #0
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038c8:	4688      	mov	r8, r1
 80038ca:	4691      	mov	r9, r2
 80038cc:	eb18 0005 	adds.w	r0, r8, r5
 80038d0:	eb49 0106 	adc.w	r1, r9, r6
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	461d      	mov	r5, r3
 80038da:	f04f 0600 	mov.w	r6, #0
 80038de:	196b      	adds	r3, r5, r5
 80038e0:	eb46 0406 	adc.w	r4, r6, r6
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	f7fc fc72 	bl	80001d0 <__aeabi_uldivmod>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <UART_SetConfig+0x384>)
 80038f4:	fba3 2302 	umull	r2, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	461d      	mov	r5, r3
 8003902:	f04f 0600 	mov.w	r6, #0
 8003906:	46a9      	mov	r9, r5
 8003908:	46b2      	mov	sl, r6
 800390a:	eb19 0309 	adds.w	r3, r9, r9
 800390e:	eb4a 040a 	adc.w	r4, sl, sl
 8003912:	4699      	mov	r9, r3
 8003914:	46a2      	mov	sl, r4
 8003916:	eb19 0905 	adds.w	r9, r9, r5
 800391a:	eb4a 0a06 	adc.w	sl, sl, r6
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800392e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003932:	4689      	mov	r9, r1
 8003934:	4692      	mov	sl, r2
 8003936:	eb19 0005 	adds.w	r0, r9, r5
 800393a:	eb4a 0106 	adc.w	r1, sl, r6
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	461d      	mov	r5, r3
 8003944:	f04f 0600 	mov.w	r6, #0
 8003948:	196b      	adds	r3, r5, r5
 800394a:	eb46 0406 	adc.w	r4, r6, r6
 800394e:	461a      	mov	r2, r3
 8003950:	4623      	mov	r3, r4
 8003952:	f7fc fc3d 	bl	80001d0 <__aeabi_uldivmod>
 8003956:	4603      	mov	r3, r0
 8003958:	460c      	mov	r4, r1
 800395a:	461a      	mov	r2, r3
 800395c:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <UART_SetConfig+0x384>)
 800395e:	fba3 1302 	umull	r1, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2164      	movs	r1, #100	; 0x64
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <UART_SetConfig+0x384>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800397e:	4498      	add	r8, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	461d      	mov	r5, r3
 8003984:	f04f 0600 	mov.w	r6, #0
 8003988:	46a9      	mov	r9, r5
 800398a:	46b2      	mov	sl, r6
 800398c:	eb19 0309 	adds.w	r3, r9, r9
 8003990:	eb4a 040a 	adc.w	r4, sl, sl
 8003994:	4699      	mov	r9, r3
 8003996:	46a2      	mov	sl, r4
 8003998:	eb19 0905 	adds.w	r9, r9, r5
 800399c:	eb4a 0a06 	adc.w	sl, sl, r6
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b4:	4689      	mov	r9, r1
 80039b6:	4692      	mov	sl, r2
 80039b8:	eb19 0005 	adds.w	r0, r9, r5
 80039bc:	eb4a 0106 	adc.w	r1, sl, r6
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461d      	mov	r5, r3
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	196b      	adds	r3, r5, r5
 80039cc:	eb46 0406 	adc.w	r4, r6, r6
 80039d0:	461a      	mov	r2, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f7fc fbfc 	bl	80001d0 <__aeabi_uldivmod>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	461a      	mov	r2, r3
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <UART_SetConfig+0x384>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <UART_SetConfig+0x384>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4442      	add	r2, r8
 8003a04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a06:	e1b2      	b.n	8003d6e <UART_SetConfig+0x6e2>
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4ad7      	ldr	r2, [pc, #860]	; (8003d78 <UART_SetConfig+0x6ec>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d005      	beq.n	8003a2a <UART_SetConfig+0x39e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4ad6      	ldr	r2, [pc, #856]	; (8003d7c <UART_SetConfig+0x6f0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f040 80d1 	bne.w	8003bcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a2a:	f7fe ffd7 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8003a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	469a      	mov	sl, r3
 8003a34:	f04f 0b00 	mov.w	fp, #0
 8003a38:	46d0      	mov	r8, sl
 8003a3a:	46d9      	mov	r9, fp
 8003a3c:	eb18 0308 	adds.w	r3, r8, r8
 8003a40:	eb49 0409 	adc.w	r4, r9, r9
 8003a44:	4698      	mov	r8, r3
 8003a46:	46a1      	mov	r9, r4
 8003a48:	eb18 080a 	adds.w	r8, r8, sl
 8003a4c:	eb49 090b 	adc.w	r9, r9, fp
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a64:	4688      	mov	r8, r1
 8003a66:	4691      	mov	r9, r2
 8003a68:	eb1a 0508 	adds.w	r5, sl, r8
 8003a6c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f04f 0400 	mov.w	r4, #0
 8003a82:	0094      	lsls	r4, r2, #2
 8003a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a88:	008b      	lsls	r3, r1, #2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	4628      	mov	r0, r5
 8003a90:	4631      	mov	r1, r6
 8003a92:	f7fc fb9d 	bl	80001d0 <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4bb8      	ldr	r3, [pc, #736]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	469b      	mov	fp, r3
 8003aac:	f04f 0c00 	mov.w	ip, #0
 8003ab0:	46d9      	mov	r9, fp
 8003ab2:	46e2      	mov	sl, ip
 8003ab4:	eb19 0309 	adds.w	r3, r9, r9
 8003ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	eb19 090b 	adds.w	r9, r9, fp
 8003ac4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003adc:	4689      	mov	r9, r1
 8003ade:	4692      	mov	sl, r2
 8003ae0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ae4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	0094      	lsls	r4, r2, #2
 8003afc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b00:	008b      	lsls	r3, r1, #2
 8003b02:	461a      	mov	r2, r3
 8003b04:	4623      	mov	r3, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	4631      	mov	r1, r6
 8003b0a:	f7fc fb61 	bl	80001d0 <__aeabi_uldivmod>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b9a      	ldr	r3, [pc, #616]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003b16:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a95      	ldr	r2, [pc, #596]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b34:	4498      	add	r8, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	469b      	mov	fp, r3
 8003b3a:	f04f 0c00 	mov.w	ip, #0
 8003b3e:	46d9      	mov	r9, fp
 8003b40:	46e2      	mov	sl, ip
 8003b42:	eb19 0309 	adds.w	r3, r9, r9
 8003b46:	eb4a 040a 	adc.w	r4, sl, sl
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	46a2      	mov	sl, r4
 8003b4e:	eb19 090b 	adds.w	r9, r9, fp
 8003b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	4692      	mov	sl, r2
 8003b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b72:	eb4c 060a 	adc.w	r6, ip, sl
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	0094      	lsls	r4, r2, #2
 8003b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	4628      	mov	r0, r5
 8003b96:	4631      	mov	r1, r6
 8003b98:	f7fc fb1a 	bl	80001d0 <__aeabi_uldivmod>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b77      	ldr	r3, [pc, #476]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a72      	ldr	r2, [pc, #456]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4442      	add	r2, r8
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	e0d0      	b.n	8003d6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7fe fef2 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	46d0      	mov	r8, sl
 8003bdc:	46d9      	mov	r9, fp
 8003bde:	eb18 0308 	adds.w	r3, r8, r8
 8003be2:	eb49 0409 	adc.w	r4, r9, r9
 8003be6:	4698      	mov	r8, r3
 8003be8:	46a1      	mov	r9, r4
 8003bea:	eb18 080a 	adds.w	r8, r8, sl
 8003bee:	eb49 090b 	adc.w	r9, r9, fp
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c06:	4688      	mov	r8, r1
 8003c08:	4691      	mov	r9, r2
 8003c0a:	eb1a 0508 	adds.w	r5, sl, r8
 8003c0e:	eb4b 0609 	adc.w	r6, fp, r9
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4619      	mov	r1, r3
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	f04f 0400 	mov.w	r4, #0
 8003c24:	0094      	lsls	r4, r2, #2
 8003c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	4631      	mov	r1, r6
 8003c34:	f7fc facc 	bl	80001d0 <__aeabi_uldivmod>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003c40:	fba3 2302 	umull	r2, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	469b      	mov	fp, r3
 8003c4e:	f04f 0c00 	mov.w	ip, #0
 8003c52:	46d9      	mov	r9, fp
 8003c54:	46e2      	mov	sl, ip
 8003c56:	eb19 0309 	adds.w	r3, r9, r9
 8003c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c5e:	4699      	mov	r9, r3
 8003c60:	46a2      	mov	sl, r4
 8003c62:	eb19 090b 	adds.w	r9, r9, fp
 8003c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c7e:	4689      	mov	r9, r1
 8003c80:	4692      	mov	sl, r2
 8003c82:	eb1b 0509 	adds.w	r5, fp, r9
 8003c86:	eb4c 060a 	adc.w	r6, ip, sl
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	0094      	lsls	r4, r2, #2
 8003c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ca2:	008b      	lsls	r3, r1, #2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	4631      	mov	r1, r6
 8003cac:	f7fc fa90 	bl	80001d0 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd6:	4498      	add	r8, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	469b      	mov	fp, r3
 8003cdc:	f04f 0c00 	mov.w	ip, #0
 8003ce0:	46d9      	mov	r9, fp
 8003ce2:	46e2      	mov	sl, ip
 8003ce4:	eb19 0309 	adds.w	r3, r9, r9
 8003ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cec:	4699      	mov	r9, r3
 8003cee:	46a2      	mov	sl, r4
 8003cf0:	eb19 090b 	adds.w	r9, r9, fp
 8003cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cf8:	f04f 0100 	mov.w	r1, #0
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d0c:	4689      	mov	r9, r1
 8003d0e:	4692      	mov	sl, r2
 8003d10:	eb1b 0509 	adds.w	r5, fp, r9
 8003d14:	eb4c 060a 	adc.w	r6, ip, sl
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f04f 0400 	mov.w	r4, #0
 8003d2a:	0094      	lsls	r4, r2, #2
 8003d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d30:	008b      	lsls	r3, r1, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	4631      	mov	r1, r6
 8003d3a:	f7fc fa49 	bl	80001d0 <__aeabi_uldivmod>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003d46:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2164      	movs	r1, #100	; 0x64
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	; 0x32
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <UART_SetConfig+0x6f4>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4442      	add	r2, r8
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	e7ff      	b.n	8003d6e <UART_SetConfig+0x6e2>
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	51eb851f 	.word	0x51eb851f

08003d84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <USB_FlushTxFifo+0x48>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d0f0      	beq.n	8003de2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	00030d40 	.word	0x00030d40

08003e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2210      	movs	r2, #16
 8003e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <USB_FlushRxFifo+0x40>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d0f0      	beq.n	8003e26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	00030d40 	.word	0x00030d40

08003e58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	3303      	adds	r3, #3
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e00b      	b.n	8003e94 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ef      	bcc.n	8003e7c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0301 	and.w	r3, r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	461a      	mov	r2, r3
 8003f36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f3a:	6053      	str	r3, [r2, #4]
 8003f3c:	e009      	b.n	8003f52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d106      	bne.n	8003f52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	b29b      	uxth	r3, r3
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b087      	sub	sp, #28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0c9b      	lsrs	r3, r3, #18
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <USB_HC_Halt+0x3a>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d16c      	bne.n	8004096 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fda:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d143      	bne.n	8004070 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004006:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	440a      	add	r2, r1
 800401e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004026:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004046:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004054:	d81d      	bhi.n	8004092 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d0ec      	beq.n	8004048 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800406e:	e080      	b.n	8004172 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800408e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004090:	e06f      	b.n	8004172 <USB_HC_Halt+0x1f0>
          break;
 8004092:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004094:	e06d      	b.n	8004172 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d143      	bne.n	800414e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004104:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	440a      	add	r2, r1
 800411c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004124:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	3301      	adds	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004132:	d81d      	bhi.n	8004170 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414a:	d0ec      	beq.n	8004126 <USB_HC_Halt+0x1a4>
 800414c:	e011      	b.n	8004172 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	440a      	add	r2, r1
 8004164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e000      	b.n	8004172 <USB_HC_Halt+0x1f0>
          break;
 8004170:	bf00      	nop
    }
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe08 	bl	8003da6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004196:	2110      	movs	r1, #16
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fe15 	bl	8003dc8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fe38 	bl	8003e14 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e01f      	b.n	80041ea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3301      	adds	r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d9dc      	bls.n	80041aa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e034      	b.n	8004260 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800420c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004214:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800421c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800423c:	d80c      	bhi.n	8004258 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004254:	d0ec      	beq.n	8004230 <USB_StopHost+0xb0>
 8004256:	e000      	b.n	800425a <USB_StopHost+0xda>
        break;
 8004258:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3301      	adds	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d9c7      	bls.n	80041f6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426c:	461a      	mov	r2, r3
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fd81 	bl	8003d84 <USB_EnableGlobalInt>

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f804 	bl	80042b0 <USBH_HandleSof>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b0b      	cmp	r3, #11
 80042c0:	d10a      	bne.n	80042d8 <USBH_HandleSof+0x28>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
  }
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004304:	2200      	movs	r2, #0
 8004306:	4619      	mov	r1, r3
 8004308:	f000 f9a2 	bl	8004650 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800430c:	bf00      	nop
}
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004324:	bf00      	nop
}
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004364:	2200      	movs	r2, #0
 8004366:	4619      	mov	r1, r3
 8004368:	f000 f972 	bl	8004650 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f003 fe6e 	bl	8008078 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	791b      	ldrb	r3, [r3, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f830 	bl	8004408 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	795b      	ldrb	r3, [r3, #5]
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f82a 	bl	8004408 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80043c8:	2200      	movs	r2, #0
 80043ca:	4619      	mov	r1, r3
 80043cc:	f000 f940 	bl	8004650 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80043f6:	2200      	movs	r2, #0
 80043f8:	4619      	mov	r1, r3
 80043fa:	f000 f929 	bl	8004650 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b0a      	cmp	r3, #10
 8004418:	d80d      	bhi.n	8004436 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	33e0      	adds	r3, #224	; 0xe0
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	33e0      	adds	r3, #224	; 0xe0
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004456:	2b84      	cmp	r3, #132	; 0x84
 8004458:	d005      	beq.n	8004466 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800445a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	3303      	adds	r3, #3
 8004464:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447a:	f3ef 8305 	mrs	r3, IPSR
 800447e:	607b      	str	r3, [r7, #4]
  return(result);
 8004480:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800449c:	f001 f9b0 	bl	8005800 <vTaskStartScheduler>
  
  return osOK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a8:	b089      	sub	sp, #36	; 0x24
 80044aa:	af04      	add	r7, sp, #16
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <osThreadCreate+0x54>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685c      	ldr	r4, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681d      	ldr	r5, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691e      	ldr	r6, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ffb6 	bl	8004444 <makeFreeRtosPriority>
 80044d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044e2:	9202      	str	r2, [sp, #8]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	9100      	str	r1, [sp, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4632      	mov	r2, r6
 80044ec:	4629      	mov	r1, r5
 80044ee:	4620      	mov	r0, r4
 80044f0:	f000 ffc2 	bl	8005478 <xTaskCreateStatic>
 80044f4:	4603      	mov	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e01c      	b.n	8004534 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685c      	ldr	r4, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004506:	b29e      	uxth	r6, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ff98 	bl	8004444 <makeFreeRtosPriority>
 8004514:	4602      	mov	r2, r0
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	9200      	str	r2, [sp, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4632      	mov	r2, r6
 8004522:	4629      	mov	r1, r5
 8004524:	4620      	mov	r0, r4
 8004526:	f001 f801 	bl	800552c <xTaskCreate>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004534:	68fb      	ldr	r3, [r7, #12]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800453e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <osDelay+0x16>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	e000      	b.n	8004556 <osDelay+0x18>
 8004554:	2301      	movs	r3, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f91e 	bl	8005798 <vTaskDelay>
  
  return osOK;
 800455c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4619      	mov	r1, r3
 800457c:	2001      	movs	r0, #1
 800457e:	f000 fac6 	bl	8004b0e <xQueueCreateMutexStatic>
 8004582:	4603      	mov	r3, r0
 8004584:	e003      	b.n	800458e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004586:	2001      	movs	r0, #1
 8004588:	f000 faa9 	bl	8004ade <xQueueCreateMutex>
 800458c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af02      	add	r7, sp, #8
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <osSemaphoreCreate+0x34>
    if (count == 1) {
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10b      	bne.n	80045c6 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	2303      	movs	r3, #3
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	2200      	movs	r2, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	2001      	movs	r0, #1
 80045be:	f000 f9a3 	bl	8004908 <xQueueGenericCreateStatic>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e016      	b.n	80045f4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e014      	b.n	80045f4 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d110      	bne.n	80045f2 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80045d0:	2203      	movs	r2, #3
 80045d2:	2100      	movs	r1, #0
 80045d4:	2001      	movs	r0, #1
 80045d6:	f000 fa0a 	bl	80049ee <xQueueGenericCreate>
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <osSemaphoreCreate+0x58>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 faab 	bl	8004b44 <xQueueGenericSend>
      return sema;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	e000      	b.n	80045f4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80045f2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af02      	add	r7, sp, #8
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <osMessageCreate+0x38>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68dc      	ldr	r4, [r3, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4623      	mov	r3, r4
 800462c:	f000 f96c 	bl	8004908 <xQueueGenericCreateStatic>
 8004630:	4603      	mov	r3, r0
 8004632:	e008      	b.n	8004646 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	4619      	mov	r1, r3
 8004640:	f000 f9d5 	bl	80049ee <xQueueGenericCreate>
 8004644:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bd90      	pop	{r4, r7, pc}
	...

08004650 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <osMessagePut+0x1e>
    ticks = 1;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800466e:	f7ff ff01 	bl	8004474 <inHandlerMode>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d018      	beq.n	80046aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004678:	f107 0210 	add.w	r2, r7, #16
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	2300      	movs	r3, #0
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fb58 	bl	8004d38 <xQueueGenericSendFromISR>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <osMessagePut+0x42>
      return osErrorOS;
 800468e:	23ff      	movs	r3, #255	; 0xff
 8004690:	e018      	b.n	80046c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d014      	beq.n	80046c2 <osMessagePut+0x72>
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <osMessagePut+0x7c>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	e00b      	b.n	80046c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80046aa:	f107 0108 	add.w	r1, r7, #8
 80046ae:	2300      	movs	r3, #0
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa46 	bl	8004b44 <xQueueGenericSend>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <osMessagePut+0x72>
      return osErrorOS;
 80046be:	23ff      	movs	r3, #255	; 0xff
 80046c0:	e000      	b.n	80046c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f103 0208 	add.w	r2, r3, #8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0208 	add.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d103      	bne.n	8004792 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e00c      	b.n	80047ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3308      	adds	r3, #8
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e002      	b.n	80047a0 <vListInsert+0x2e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d2f6      	bcs.n	800479a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6892      	ldr	r2, [r2, #8]
 80047fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6852      	ldr	r2, [r2, #4]
 8004804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d103      	bne.n	8004818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	e7fe      	b.n	800485e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004860:	f001 ff1c 	bl	800669c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	441a      	add	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	3b01      	subs	r3, #1
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	441a      	add	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	22ff      	movs	r2, #255	; 0xff
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	22ff      	movs	r2, #255	; 0xff
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3310      	adds	r3, #16
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f9da 	bl	8005c7c <xTaskRemoveFromEventList>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <xQueueGenericReset+0xcc>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	e009      	b.n	80048f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3310      	adds	r3, #16
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fef3 	bl	80046d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff feee 	bl	80046d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048f4:	f001 ff00 	bl	80066f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f8:	2301      	movs	r3, #1
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	; 0x38
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <xQueueGenericCreateStatic+0x28>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
 800492e:	e7fe      	b.n	800492e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <xQueueGenericCreateStatic+0x42>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	e7fe      	b.n	8004948 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <xQueueGenericCreateStatic+0x4e>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xQueueGenericCreateStatic+0x52>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericCreateStatic+0x54>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <xQueueGenericCreateStatic+0x6c>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e7fe      	b.n	8004972 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <xQueueGenericCreateStatic+0x78>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <xQueueGenericCreateStatic+0x7c>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <xQueueGenericCreateStatic+0x7e>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <xQueueGenericCreateStatic+0x96>
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e7fe      	b.n	800499c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800499e:	2348      	movs	r3, #72	; 0x48
 80049a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b48      	cmp	r3, #72	; 0x48
 80049a6:	d009      	beq.n	80049bc <xQueueGenericCreateStatic+0xb4>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e7fe      	b.n	80049ba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f844 	bl	8004a6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3730      	adds	r7, #48	; 0x30
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <xQueueGenericCreate+0x28>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e004      	b.n	8004a2c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3348      	adds	r3, #72	; 0x48
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 ff4d 	bl	80068d0 <pvPortMalloc>
 8004a36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d011      	beq.n	8004a62 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3348      	adds	r3, #72	; 0x48
 8004a46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a50:	79fa      	ldrb	r2, [r7, #7]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f805 	bl	8004a6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a62:	69bb      	ldr	r3, [r7, #24]
	}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e002      	b.n	8004a8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	69b8      	ldr	r0, [r7, #24]
 8004a9e:	f7ff fecb 	bl	8004838 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004aca:	2300      	movs	r3, #0
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f837 	bl	8004b44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6939      	ldr	r1, [r7, #16]
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7ff ff79 	bl	80049ee <xQueueGenericCreate>
 8004afc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff ffd3 	bl	8004aaa <prvInitialiseMutex>

		return xNewQueue;
 8004b04:	68fb      	ldr	r3, [r7, #12]
	}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b088      	sub	sp, #32
 8004b12:	af02      	add	r7, sp, #8
 8004b14:	4603      	mov	r3, r0
 8004b16:	6039      	str	r1, [r7, #0]
 8004b18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	6939      	ldr	r1, [r7, #16]
 8004b2c:	6978      	ldr	r0, [r7, #20]
 8004b2e:	f7ff feeb 	bl	8004908 <xQueueGenericCreateStatic>
 8004b32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ffb8 	bl	8004aaa <prvInitialiseMutex>

		return xNewQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08e      	sub	sp, #56	; 0x38
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <xQueueGenericSend+0x30>
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b72:	e7fe      	b.n	8004b72 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <xQueueGenericSend+0x3e>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <xQueueGenericSend+0x42>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <xQueueGenericSend+0x44>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <xQueueGenericSend+0x5c>
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x6a>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSend+0x6e>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericSend+0x70>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <xQueueGenericSend+0x88>
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	e7fe      	b.n	8004bca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bcc:	f001 fa0e 	bl	8005fec <xTaskGetSchedulerState>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <xQueueGenericSend+0x98>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <xQueueGenericSend+0x9c>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <xQueueGenericSend+0x9e>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <xQueueGenericSend+0xb6>
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bfa:	f001 fd4f 	bl	800669c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <xQueueGenericSend+0xcc>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d129      	bne.n	8004c64 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 fb1f 	bl	8005258 <prvCopyDataToQueue>
 8004c1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d010      	beq.n	8004c46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	3324      	adds	r3, #36	; 0x24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f827 	bl	8005c7c <xTaskRemoveFromEventList>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <xQueueGenericSend+0x1f0>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	e00a      	b.n	8004c5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c4c:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <xQueueGenericSend+0x1f0>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c5c:	f001 fd4c 	bl	80066f8 <vPortExitCritical>
				return pdPASS;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e063      	b.n	8004d2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c6a:	f001 fd45 	bl	80066f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e05c      	b.n	8004d2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f85f 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c86:	f001 fd37 	bl	80066f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c8a:	f000 fe17 	bl	80058bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c8e:	f001 fd05 	bl	800669c <vPortEnterCritical>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d103      	bne.n	8004ca8 <xQueueGenericSend+0x164>
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cae:	b25b      	sxtb	r3, r3
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSend+0x17a>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cbe:	f001 fd1b 	bl	80066f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cc2:	1d3a      	adds	r2, r7, #4
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 f84e 	bl	8005d6c <xTaskCheckForTimeOut>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d124      	bne.n	8004d20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd8:	f000 fbb6 	bl	8005448 <prvIsQueueFull>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d018      	beq.n	8004d14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	3310      	adds	r3, #16
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 ffa2 	bl	8005c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf2:	f000 fb41 	bl	8005378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cf6:	f000 fdef 	bl	80058d8 <xTaskResumeAll>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f af7c 	bne.w	8004bfa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <xQueueGenericSend+0x1f0>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	e772      	b.n	8004bfa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d16:	f000 fb2f 	bl	8005378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1a:	f000 fddd 	bl	80058d8 <xTaskResumeAll>
 8004d1e:	e76c      	b.n	8004bfa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d22:	f000 fb29 	bl	8005378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d26:	f000 fdd7 	bl	80058d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3738      	adds	r7, #56	; 0x38
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08e      	sub	sp, #56	; 0x38
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <xQueueGenericSendFromISR+0x2c>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e7fe      	b.n	8004d62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <xQueueGenericSendFromISR+0x3a>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueGenericSendFromISR+0x3e>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueGenericSendFromISR+0x40>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <xQueueGenericSendFromISR+0x58>
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	e7fe      	b.n	8004d8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d103      	bne.n	8004d9e <xQueueGenericSendFromISR+0x66>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <xQueueGenericSendFromISR+0x6a>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xQueueGenericSendFromISR+0x6c>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <xQueueGenericSendFromISR+0x84>
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e7fe      	b.n	8004dba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dbc:	f001 fd4a 	bl	8006854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61ba      	str	r2, [r7, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <xQueueGenericSendFromISR+0xb6>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d12c      	bne.n	8004e48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfe:	f000 fa2b 	bl	8005258 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d112      	bne.n	8004e32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	3324      	adds	r3, #36	; 0x24
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 ff2f 	bl	8005c7c <xTaskRemoveFromEventList>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e007      	b.n	8004e42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e46:	e001      	b.n	8004e4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3738      	adds	r7, #56	; 0x38
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <xQueueReceive+0x2e>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	e7fe      	b.n	8004e8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <xQueueReceive+0x3c>
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <xQueueReceive+0x40>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <xQueueReceive+0x42>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <xQueueReceive+0x5a>
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eba:	f001 f897 	bl	8005fec <xTaskGetSchedulerState>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xQueueReceive+0x6a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <xQueueReceive+0x6e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <xQueueReceive+0x70>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <xQueueReceive+0x88>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e7fe      	b.n	8004ee6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee8:	f001 fbd8 	bl	800669c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efc:	f000 fa16 	bl	800532c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00f      	beq.n	8004f30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 feb1 	bl	8005c7c <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f20:	4b3c      	ldr	r3, [pc, #240]	; (8005014 <xQueueReceive+0x1b4>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f30:	f001 fbe2 	bl	80066f8 <vPortExitCritical>
				return pdPASS;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e069      	b.n	800500c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f3e:	f001 fbdb 	bl	80066f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e062      	b.n	800500c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fef5 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f5a:	f001 fbcd 	bl	80066f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f5e:	f000 fcad 	bl	80058bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f62:	f001 fb9b 	bl	800669c <vPortEnterCritical>
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d103      	bne.n	8004f7c <xQueueReceive+0x11c>
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <xQueueReceive+0x132>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f92:	f001 fbb1 	bl	80066f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f96:	1d3a      	adds	r2, r7, #4
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fee4 	bl	8005d6c <xTaskCheckForTimeOut>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d123      	bne.n	8004ff2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fac:	f000 fa36 	bl	800541c <prvIsQueueEmpty>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fe38 	bl	8005c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc6:	f000 f9d7 	bl	8005378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fca:	f000 fc85 	bl	80058d8 <xTaskResumeAll>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d189      	bne.n	8004ee8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <xQueueReceive+0x1b4>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e780      	b.n	8004ee8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe8:	f000 f9c6 	bl	8005378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fec:	f000 fc74 	bl	80058d8 <xTaskResumeAll>
 8004ff0:	e77a      	b.n	8004ee8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff4:	f000 f9c0 	bl	8005378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff8:	f000 fc6e 	bl	80058d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f000 fa0d 	bl	800541c <prvIsQueueEmpty>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43f af6f 	beq.w	8004ee8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800500a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	; 0x38
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <xQueueSemaphoreTake+0x30>
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	e7fe      	b.n	8005046 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <xQueueSemaphoreTake+0x4c>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e7fe      	b.n	8005062 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005064:	f000 ffc2 	bl	8005fec <xTaskGetSchedulerState>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <xQueueSemaphoreTake+0x5c>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <xQueueSemaphoreTake+0x60>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <xQueueSemaphoreTake+0x62>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <xQueueSemaphoreTake+0x7a>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e7fe      	b.n	8005090 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005092:	f001 fb03 	bl	800669c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d024      	beq.n	80050ec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050b2:	f001 f955 	bl	8006360 <pvTaskIncrementMutexHeldCount>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00f      	beq.n	80050e4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fdd7 	bl	8005c7c <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b53      	ldr	r3, [pc, #332]	; (8005224 <xQueueSemaphoreTake+0x20c>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050e4:	f001 fb08 	bl	80066f8 <vPortExitCritical>
				return pdPASS;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e096      	b.n	800521a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d110      	bne.n	8005114 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <xQueueSemaphoreTake+0xf4>
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e7fe      	b.n	800510a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800510c:	f001 faf4 	bl	80066f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005110:	2300      	movs	r3, #0
 8005112:	e082      	b.n	800521a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fe0e 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005128:	f001 fae6 	bl	80066f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800512c:	f000 fbc6 	bl	80058bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005130:	f001 fab4 	bl	800669c <vPortEnterCritical>
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513a:	b25b      	sxtb	r3, r3
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d103      	bne.n	800514a <xQueueSemaphoreTake+0x132>
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005150:	b25b      	sxtb	r3, r3
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <xQueueSemaphoreTake+0x148>
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005160:	f001 faca 	bl	80066f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005164:	463a      	mov	r2, r7
 8005166:	f107 030c 	add.w	r3, r7, #12
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fdfd 	bl	8005d6c <xTaskCheckForTimeOut>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d132      	bne.n	80051de <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800517a:	f000 f94f 	bl	800541c <prvIsQueueEmpty>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d026      	beq.n	80051d2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800518c:	f001 fa86 	bl	800669c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ff47 	bl	8006028 <xTaskPriorityInherit>
 800519a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800519c:	f001 faac 	bl	80066f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	3324      	adds	r3, #36	; 0x24
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fd43 	bl	8005c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051b0:	f000 f8e2 	bl	8005378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051b4:	f000 fb90 	bl	80058d8 <xTaskResumeAll>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f47f af69 	bne.w	8005092 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <xQueueSemaphoreTake+0x20c>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	e75f      	b.n	8005092 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051d4:	f000 f8d0 	bl	8005378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d8:	f000 fb7e 	bl	80058d8 <xTaskResumeAll>
 80051dc:	e759      	b.n	8005092 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80051de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e0:	f000 f8ca 	bl	8005378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051e4:	f000 fb78 	bl	80058d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ea:	f000 f917 	bl	800541c <prvIsQueueEmpty>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f43f af4e 	beq.w	8005092 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80051fc:	f001 fa4e 	bl	800669c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005202:	f000 f811 	bl	8005228 <prvGetDisinheritPriorityAfterTimeout>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f80e 	bl	8006230 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005214:	f001 fa70 	bl	80066f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800521a:	4618      	mov	r0, r3
 800521c:	3738      	adds	r7, #56	; 0x38
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1c3 0307 	rsb	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e001      	b.n	800524a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800524a:	68fb      	ldr	r3, [r7, #12]
	}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d14d      	bne.n	800531a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 ff50 	bl	8006128 <xTaskPriorityDisinherit>
 8005288:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	e043      	b.n	800531a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d119      	bne.n	80052cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6858      	ldr	r0, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	461a      	mov	r2, r3
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	f002 ff7e 	bl	80081a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d32b      	bcc.n	800531a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	e026      	b.n	800531a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68d8      	ldr	r0, [r3, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	461a      	mov	r2, r3
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	f002 ff64 	bl	80081a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	425b      	negs	r3, r3
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d207      	bcs.n	8005308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	425b      	negs	r3, r3
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d105      	bne.n	800531a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	3b01      	subs	r3, #1
 8005318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005322:	697b      	ldr	r3, [r7, #20]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	d303      	bcc.n	8005360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68d9      	ldr	r1, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	461a      	mov	r2, r3
 800536a:	6838      	ldr	r0, [r7, #0]
 800536c:	f002 ff1a 	bl	80081a4 <memcpy>
	}
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005380:	f001 f98c 	bl	800669c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800538a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800538c:	e011      	b.n	80053b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d012      	beq.n	80053bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3324      	adds	r3, #36	; 0x24
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc6e 	bl	8005c7c <xTaskRemoveFromEventList>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053a6:	f000 fd41 	bl	8005e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dce9      	bgt.n	800538e <prvUnlockQueue+0x16>
 80053ba:	e000      	b.n	80053be <prvUnlockQueue+0x46>
					break;
 80053bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	22ff      	movs	r2, #255	; 0xff
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053c6:	f001 f997 	bl	80066f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053ca:	f001 f967 	bl	800669c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d6:	e011      	b.n	80053fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3310      	adds	r3, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fc49 	bl	8005c7c <xTaskRemoveFromEventList>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053f0:	f000 fd1c 	bl	8005e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005400:	2b00      	cmp	r3, #0
 8005402:	dce9      	bgt.n	80053d8 <prvUnlockQueue+0x60>
 8005404:	e000      	b.n	8005408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005410:	f001 f972 	bl	80066f8 <vPortExitCritical>
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005424:	f001 f93a 	bl	800669c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e001      	b.n	800543a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800543a:	f001 f95d 	bl	80066f8 <vPortExitCritical>

	return xReturn;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005450:	f001 f924 	bl	800669c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	429a      	cmp	r2, r3
 800545e:	d102      	bne.n	8005466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e001      	b.n	800546a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800546a:	f001 f945 	bl	80066f8 <vPortExitCritical>

	return xReturn;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af04      	add	r7, sp, #16
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <xTaskCreateStatic+0x28>
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	e7fe      	b.n	800549e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <xTaskCreateStatic+0x42>
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	e7fe      	b.n	80054b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ba:	2354      	movs	r3, #84	; 0x54
 80054bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b54      	cmp	r3, #84	; 0x54
 80054c2:	d009      	beq.n	80054d8 <xTaskCreateStatic+0x60>
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e7fe      	b.n	80054d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01e      	beq.n	800551e <xTaskCreateStatic+0xa6>
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054f8:	2300      	movs	r3, #0
 80054fa:	9303      	str	r3, [sp, #12]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f850 	bl	80055b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005518:	f000 f8d4 	bl	80056c4 <prvAddNewTaskToReadyList>
 800551c:	e001      	b.n	8005522 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005522:	697b      	ldr	r3, [r7, #20]
	}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af04      	add	r7, sp, #16
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f001 f9c5 	bl	80068d0 <pvPortMalloc>
 8005546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00e      	beq.n	800556c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800554e:	2054      	movs	r0, #84	; 0x54
 8005550:	f001 f9be 	bl	80068d0 <pvPortMalloc>
 8005554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
 8005562:	e005      	b.n	8005570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f001 fa75 	bl	8006a54 <vPortFree>
 800556a:	e001      	b.n	8005570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	2300      	movs	r3, #0
 8005582:	9303      	str	r3, [sp, #12]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f80e 	bl	80055b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800559a:	69f8      	ldr	r0, [r7, #28]
 800559c:	f000 f892 	bl	80056c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055a0:	2301      	movs	r3, #1
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e002      	b.n	80055ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ac:	69bb      	ldr	r3, [r7, #24]
	}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	3b01      	subs	r3, #1
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f023 0307 	bic.w	r3, r3, #7
 80055dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <prvInitialiseNewTask+0x46>
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e7fe      	b.n	80055fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e012      	b.n	800562e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	7819      	ldrb	r1, [r3, #0]
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	3334      	adds	r3, #52	; 0x34
 8005618:	460a      	mov	r2, r1
 800561a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d9e9      	bls.n	8005608 <prvInitialiseNewTask+0x52>
 8005634:	e000      	b.n	8005638 <prvInitialiseNewTask+0x82>
			{
				break;
 8005636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005640:	e003      	b.n	800564a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2b06      	cmp	r3, #6
 800564e:	d901      	bls.n	8005654 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005650:	2306      	movs	r3, #6
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2200      	movs	r2, #0
 8005664:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	3304      	adds	r3, #4
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f850 	bl	8004710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	3318      	adds	r3, #24
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f84b 	bl	8004710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	f1c3 0207 	rsb	r2, r3, #7
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	69b8      	ldr	r0, [r7, #24]
 80056a4:	f000 fed6 	bl	8006454 <pxPortInitialiseStack>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ba:	bf00      	nop
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056cc:	f000 ffe6 	bl	800669c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <prvAddNewTaskToReadyList+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a29      	ldr	r2, [pc, #164]	; (800577c <prvAddNewTaskToReadyList+0xb8>)
 80056d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056da:	4b29      	ldr	r3, [pc, #164]	; (8005780 <prvAddNewTaskToReadyList+0xbc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056e2:	4a27      	ldr	r2, [pc, #156]	; (8005780 <prvAddNewTaskToReadyList+0xbc>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <prvAddNewTaskToReadyList+0xb8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d110      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056f0:	f000 fbc2 	bl	8005e78 <prvInitialiseTaskLists>
 80056f4:	e00d      	b.n	8005712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <prvAddNewTaskToReadyList+0xc0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056fe:	4b20      	ldr	r3, [pc, #128]	; (8005780 <prvAddNewTaskToReadyList+0xbc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	429a      	cmp	r2, r3
 800570a:	d802      	bhi.n	8005712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <prvAddNewTaskToReadyList+0xbc>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <prvAddNewTaskToReadyList+0xc4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <prvAddNewTaskToReadyList+0xc4>)
 800571a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	2201      	movs	r2, #1
 8005722:	409a      	lsls	r2, r3
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4313      	orrs	r3, r2
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4a15      	ldr	r2, [pc, #84]	; (8005790 <prvAddNewTaskToReadyList+0xcc>)
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7fe fff0 	bl	800472a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800574a:	f000 ffd5 	bl	80066f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <prvAddNewTaskToReadyList+0xc0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <prvAddNewTaskToReadyList+0xbc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <prvAddNewTaskToReadyList+0xd0>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000012c 	.word	0x2000012c
 8005780:	2000002c 	.word	0x2000002c
 8005784:	20000138 	.word	0x20000138
 8005788:	20000148 	.word	0x20000148
 800578c:	20000134 	.word	0x20000134
 8005790:	20000030 	.word	0x20000030
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <vTaskDelay+0x60>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <vTaskDelay+0x2e>
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	e7fe      	b.n	80057c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057c6:	f000 f879 	bl	80058bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057ca:	2100      	movs	r1, #0
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fddb 	bl	8006388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057d2:	f000 f881 	bl	80058d8 <xTaskResumeAll>
 80057d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <vTaskDelay+0x64>)
 80057e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000154 	.word	0x20000154
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800580e:	463a      	mov	r2, r7
 8005810:	1d39      	adds	r1, r7, #4
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4618      	mov	r0, r3
 8005818:	f001 ffb2 	bl	8007780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	9202      	str	r2, [sp, #8]
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	2300      	movs	r3, #0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	460a      	mov	r2, r1
 800582e:	491d      	ldr	r1, [pc, #116]	; (80058a4 <vTaskStartScheduler+0xa4>)
 8005830:	481d      	ldr	r0, [pc, #116]	; (80058a8 <vTaskStartScheduler+0xa8>)
 8005832:	f7ff fe21 	bl	8005478 <xTaskCreateStatic>
 8005836:	4602      	mov	r2, r0
 8005838:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <vTaskStartScheduler+0xac>)
 800583a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <vTaskStartScheduler+0xac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e001      	b.n	800584e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d115      	bne.n	8005880 <vTaskStartScheduler+0x80>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <vTaskStartScheduler+0xb0>)
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <vTaskStartScheduler+0xb4>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <vTaskStartScheduler+0xb8>)
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800587a:	f000 fe71 	bl	8006560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800587e:	e00d      	b.n	800589c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d109      	bne.n	800589c <vTaskStartScheduler+0x9c>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e7fe      	b.n	800589a <vTaskStartScheduler+0x9a>
}
 800589c:	bf00      	nop
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	080081e4 	.word	0x080081e4
 80058a8:	08005e45 	.word	0x08005e45
 80058ac:	20000150 	.word	0x20000150
 80058b0:	2000014c 	.word	0x2000014c
 80058b4:	20000138 	.word	0x20000138
 80058b8:	20000130 	.word	0x20000130

080058bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20000154 	.word	0x20000154

080058d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <xTaskResumeAll+0x114>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <xTaskResumeAll+0x2a>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	e7fe      	b.n	8005900 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005902:	f000 fecb 	bl	800669c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <xTaskResumeAll+0x114>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a37      	ldr	r2, [pc, #220]	; (80059ec <xTaskResumeAll+0x114>)
 800590e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <xTaskResumeAll+0x114>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d161      	bne.n	80059dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005918:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <xTaskResumeAll+0x118>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05d      	beq.n	80059dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005920:	e02e      	b.n	8005980 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b34      	ldr	r3, [pc, #208]	; (80059f4 <xTaskResumeAll+0x11c>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3318      	adds	r3, #24
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe ff58 	bl	80047e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe ff53 	bl	80047e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <xTaskResumeAll+0x120>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <xTaskResumeAll+0x120>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <xTaskResumeAll+0x124>)
 800595e:	441a      	add	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe fedf 	bl	800472a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <xTaskResumeAll+0x128>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <xTaskResumeAll+0x12c>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005980:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <xTaskResumeAll+0x11c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1cc      	bne.n	8005922 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800598e:	f000 fb0d 	bl	8005fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <xTaskResumeAll+0x130>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d010      	beq.n	80059c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800599e:	f000 f837 	bl	8005a10 <xTaskIncrementTick>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80059a8:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <xTaskResumeAll+0x12c>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f1      	bne.n	800599e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <xTaskResumeAll+0x130>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059c0:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <xTaskResumeAll+0x12c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059cc:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <xTaskResumeAll+0x134>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059dc:	f000 fe8c 	bl	80066f8 <vPortExitCritical>

	return xAlreadyYielded;
 80059e0:	68bb      	ldr	r3, [r7, #8]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000154 	.word	0x20000154
 80059f0:	2000012c 	.word	0x2000012c
 80059f4:	200000ec 	.word	0x200000ec
 80059f8:	20000134 	.word	0x20000134
 80059fc:	20000030 	.word	0x20000030
 8005a00:	2000002c 	.word	0x2000002c
 8005a04:	20000140 	.word	0x20000140
 8005a08:	2000013c 	.word	0x2000013c
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <xTaskIncrementTick+0x144>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 8087 	bne.w	8005b32 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a24:	4b4c      	ldr	r3, [pc, #304]	; (8005b58 <xTaskIncrementTick+0x148>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a2c:	4a4a      	ldr	r2, [pc, #296]	; (8005b58 <xTaskIncrementTick+0x148>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11f      	bne.n	8005a78 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a38:	4b48      	ldr	r3, [pc, #288]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <xTaskIncrementTick+0x46>
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	e7fe      	b.n	8005a54 <xTaskIncrementTick+0x44>
 8005a56:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <xTaskIncrementTick+0x150>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a3e      	ldr	r2, [pc, #248]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	4a3e      	ldr	r2, [pc, #248]	; (8005b60 <xTaskIncrementTick+0x150>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	4b3e      	ldr	r3, [pc, #248]	; (8005b64 <xTaskIncrementTick+0x154>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <xTaskIncrementTick+0x154>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	f000 fa9a 	bl	8005fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a78:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d348      	bcc.n	8005b14 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a92:	601a      	str	r2, [r3, #0]
					break;
 8005a94:	e03e      	b.n	8005b14 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a96:	4b31      	ldr	r3, [pc, #196]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d203      	bcs.n	8005ab6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aae:	4a2e      	ldr	r2, [pc, #184]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ab4:	e02e      	b.n	8005b14 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe92 	bl	80047e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	3318      	adds	r3, #24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fe89 	bl	80047e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <xTaskIncrementTick+0x15c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <xTaskIncrementTick+0x15c>)
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <xTaskIncrementTick+0x160>)
 8005af2:	441a      	add	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fe fe15 	bl	800472a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <xTaskIncrementTick+0x164>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3b9      	bcc.n	8005a82 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b12:	e7b6      	b.n	8005a82 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b14:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <xTaskIncrementTick+0x164>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4915      	ldr	r1, [pc, #84]	; (8005b70 <xTaskIncrementTick+0x160>)
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d907      	bls.n	8005b3c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e004      	b.n	8005b3c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <xTaskIncrementTick+0x168>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <xTaskIncrementTick+0x168>)
 8005b3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <xTaskIncrementTick+0x16c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b48:	697b      	ldr	r3, [r7, #20]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000154 	.word	0x20000154
 8005b58:	20000130 	.word	0x20000130
 8005b5c:	200000e4 	.word	0x200000e4
 8005b60:	200000e8 	.word	0x200000e8
 8005b64:	20000144 	.word	0x20000144
 8005b68:	2000014c 	.word	0x2000014c
 8005b6c:	20000134 	.word	0x20000134
 8005b70:	20000030 	.word	0x20000030
 8005b74:	2000002c 	.word	0x2000002c
 8005b78:	2000013c 	.word	0x2000013c
 8005b7c:	20000140 	.word	0x20000140

08005b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <vTaskSwitchContext+0xa0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b8e:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <vTaskSwitchContext+0xa4>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b94:	e03e      	b.n	8005c14 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <vTaskSwitchContext+0xa4>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9c:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <vTaskSwitchContext+0xa8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	f1c3 031f 	rsb	r3, r3, #31
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	491e      	ldr	r1, [pc, #120]	; (8005c2c <vTaskSwitchContext+0xac>)
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <vTaskSwitchContext+0x5a>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	e7fe      	b.n	8005bd8 <vTaskSwitchContext+0x58>
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a11      	ldr	r2, [pc, #68]	; (8005c2c <vTaskSwitchContext+0xac>)
 8005be6:	4413      	add	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d104      	bne.n	8005c0a <vTaskSwitchContext+0x8a>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <vTaskSwitchContext+0xb0>)
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000154 	.word	0x20000154
 8005c24:	20000140 	.word	0x20000140
 8005c28:	20000134 	.word	0x20000134
 8005c2c:	20000030 	.word	0x20000030
 8005c30:	2000002c 	.word	0x2000002c

08005c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <vTaskPlaceOnEventList+0x24>
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e7fe      	b.n	8005c56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <vTaskPlaceOnEventList+0x44>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3318      	adds	r3, #24
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fe fd86 	bl	8004772 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c66:	2101      	movs	r1, #1
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	f000 fb8d 	bl	8006388 <prvAddCurrentTaskToDelayedList>
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000002c 	.word	0x2000002c

08005c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <xTaskRemoveFromEventList+0x2a>
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fd9a 	bl	80047e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <xTaskRemoveFromEventList+0xac>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11c      	bne.n	8005cf2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fd91 	bl	80047e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <xTaskRemoveFromEventList+0xb0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <xTaskRemoveFromEventList+0xb0>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <xTaskRemoveFromEventList+0xb4>)
 8005ce2:	441a      	add	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fe fd1d 	bl	800472a <vListInsertEnd>
 8005cf0:	e005      	b.n	8005cfe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	480e      	ldr	r0, [pc, #56]	; (8005d34 <xTaskRemoveFromEventList+0xb8>)
 8005cfa:	f7fe fd16 	bl	800472a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <xTaskRemoveFromEventList+0xbc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d905      	bls.n	8005d18 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <xTaskRemoveFromEventList+0xc0>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e001      	b.n	8005d1c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d1c:	697b      	ldr	r3, [r7, #20]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000154 	.word	0x20000154
 8005d2c:	20000134 	.word	0x20000134
 8005d30:	20000030 	.word	0x20000030
 8005d34:	200000ec 	.word	0x200000ec
 8005d38:	2000002c 	.word	0x2000002c
 8005d3c:	20000140 	.word	0x20000140

08005d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <vTaskInternalSetTimeOutState+0x24>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <vTaskInternalSetTimeOutState+0x28>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000144 	.word	0x20000144
 8005d68:	20000130 	.word	0x20000130

08005d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <xTaskCheckForTimeOut+0x24>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	e7fe      	b.n	8005d8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <xTaskCheckForTimeOut+0x3e>
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e7fe      	b.n	8005da8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005daa:	f000 fc77 	bl	800669c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <xTaskCheckForTimeOut+0xb8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d102      	bne.n	8005dce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	e023      	b.n	8005e16 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <xTaskCheckForTimeOut+0xbc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d007      	beq.n	8005dea <xTaskCheckForTimeOut+0x7e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	e015      	b.n	8005e16 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d20b      	bcs.n	8005e0c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff9d 	bl	8005d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	e004      	b.n	8005e16 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e16:	f000 fc6f 	bl	80066f8 <vPortExitCritical>

	return xReturn;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000130 	.word	0x20000130
 8005e28:	20000144 	.word	0x20000144

08005e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <vTaskMissedYield+0x14>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000140 	.word	0x20000140

08005e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e4c:	f000 f854 	bl	8005ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <prvIdleTask+0x2c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d907      	bls.n	8005e68 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <prvIdleTask+0x30>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005e68:	f001 fc82 	bl	8007770 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005e6c:	e7ee      	b.n	8005e4c <prvIdleTask+0x8>
 8005e6e:	bf00      	nop
 8005e70:	20000030 	.word	0x20000030
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	e00c      	b.n	8005e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <prvInitialiseTaskLists+0x60>)
 8005e90:	4413      	add	r3, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fc1c 	bl	80046d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	d9ef      	bls.n	8005e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ea4:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ea6:	f7fe fc13 	bl	80046d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eaa:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005eac:	f7fe fc10 	bl	80046d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb0:	480c      	ldr	r0, [pc, #48]	; (8005ee4 <prvInitialiseTaskLists+0x6c>)
 8005eb2:	f7fe fc0d 	bl	80046d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eb6:	480c      	ldr	r0, [pc, #48]	; (8005ee8 <prvInitialiseTaskLists+0x70>)
 8005eb8:	f7fe fc0a 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ebc:	480b      	ldr	r0, [pc, #44]	; (8005eec <prvInitialiseTaskLists+0x74>)
 8005ebe:	f7fe fc07 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <prvInitialiseTaskLists+0x78>)
 8005ec4:	4a05      	ldr	r2, [pc, #20]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvInitialiseTaskLists+0x7c>)
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000030 	.word	0x20000030
 8005edc:	200000bc 	.word	0x200000bc
 8005ee0:	200000d0 	.word	0x200000d0
 8005ee4:	200000ec 	.word	0x200000ec
 8005ee8:	20000100 	.word	0x20000100
 8005eec:	20000118 	.word	0x20000118
 8005ef0:	200000e4 	.word	0x200000e4
 8005ef4:	200000e8 	.word	0x200000e8

08005ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efe:	e019      	b.n	8005f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f00:	f000 fbcc 	bl	800669c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvCheckTasksWaitingTermination+0x4c>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fc67 	bl	80047e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvCheckTasksWaitingTermination+0x50>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <prvCheckTasksWaitingTermination+0x50>)
 8005f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f2a:	f000 fbe5 	bl	80066f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f80e 	bl	8005f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e1      	bne.n	8005f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000100 	.word	0x20000100
 8005f48:	2000012c 	.word	0x2000012c
 8005f4c:	20000114 	.word	0x20000114

08005f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fd74 	bl	8006a54 <vPortFree>
				vPortFree( pxTCB );
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fd71 	bl	8006a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f72:	e017      	b.n	8005fa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d103      	bne.n	8005f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fd68 	bl	8006a54 <vPortFree>
	}
 8005f84:	e00e      	b.n	8005fa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d009      	beq.n	8005fa4 <prvDeleteTCB+0x54>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e7fe      	b.n	8005fa2 <prvDeleteTCB+0x52>
	}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fc4:	e008      	b.n	8005fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	200000e4 	.word	0x200000e4
 8005fe8:	2000014c 	.word	0x2000014c

08005fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <xTaskGetSchedulerState+0x34>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	607b      	str	r3, [r7, #4]
 8005ffe:	e008      	b.n	8006012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <xTaskGetSchedulerState+0x38>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006008:	2302      	movs	r3, #2
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	e001      	b.n	8006012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800600e:	2300      	movs	r3, #0
 8006010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006012:	687b      	ldr	r3, [r7, #4]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20000138 	.word	0x20000138
 8006024:	20000154 	.word	0x20000154

08006028 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d069      	beq.n	8006112 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <xTaskPriorityInherit+0xf4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d259      	bcs.n	8006100 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	db06      	blt.n	8006062 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <xTaskPriorityInherit+0xf4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	f1c3 0207 	rsb	r2, r3, #7
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6959      	ldr	r1, [r3, #20]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4a2b      	ldr	r2, [pc, #172]	; (8006120 <xTaskPriorityInherit+0xf8>)
 8006074:	4413      	add	r3, r2
 8006076:	4299      	cmp	r1, r3
 8006078:	d13a      	bne.n	80060f0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fbb0 	bl	80047e4 <uxListRemove>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d115      	bne.n	80060b6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4924      	ldr	r1, [pc, #144]	; (8006120 <xTaskPriorityInherit+0xf8>)
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xTaskPriorityInherit+0x8e>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	2201      	movs	r2, #1
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43da      	mvns	r2, r3
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <xTaskPriorityInherit+0xfc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4013      	ands	r3, r2
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <xTaskPriorityInherit+0xfc>)
 80060b4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060b6:	4b19      	ldr	r3, [pc, #100]	; (800611c <xTaskPriorityInherit+0xf4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	2201      	movs	r2, #1
 80060c6:	409a      	lsls	r2, r3
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <xTaskPriorityInherit+0xfc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <xTaskPriorityInherit+0xfc>)
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4a10      	ldr	r2, [pc, #64]	; (8006120 <xTaskPriorityInherit+0xf8>)
 80060e0:	441a      	add	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fe fb1e 	bl	800472a <vListInsertEnd>
 80060ee:	e004      	b.n	80060fa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <xTaskPriorityInherit+0xf4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e008      	b.n	8006112 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <xTaskPriorityInherit+0xf4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	429a      	cmp	r2, r3
 800610c:	d201      	bcs.n	8006112 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006112:	68fb      	ldr	r3, [r7, #12]
	}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	2000002c 	.word	0x2000002c
 8006120:	20000030 	.word	0x20000030
 8006124:	20000134 	.word	0x20000134

08006128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d06c      	beq.n	8006218 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800613e:	4b39      	ldr	r3, [pc, #228]	; (8006224 <xTaskPriorityDisinherit+0xfc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	d009      	beq.n	800615c <xTaskPriorityDisinherit+0x34>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e7fe      	b.n	800615a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <xTaskPriorityDisinherit+0x50>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	e7fe      	b.n	8006176 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	429a      	cmp	r2, r3
 800618c:	d044      	beq.n	8006218 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006192:	2b00      	cmp	r3, #0
 8006194:	d140      	bne.n	8006218 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3304      	adds	r3, #4
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fb22 	bl	80047e4 <uxListRemove>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d115      	bne.n	80061d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	491f      	ldr	r1, [pc, #124]	; (8006228 <xTaskPriorityDisinherit+0x100>)
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xTaskPriorityDisinherit+0xaa>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	2201      	movs	r2, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43da      	mvns	r2, r3
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <xTaskPriorityDisinherit+0x104>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4013      	ands	r3, r2
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <xTaskPriorityDisinherit+0x104>)
 80061d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	f1c3 0207 	rsb	r2, r3, #7
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	2201      	movs	r2, #1
 80061ec:	409a      	lsls	r2, r3
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <xTaskPriorityDisinherit+0x104>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <xTaskPriorityDisinherit+0x104>)
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <xTaskPriorityDisinherit+0x100>)
 8006206:	441a      	add	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f7fe fa8b 	bl	800472a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006218:	697b      	ldr	r3, [r7, #20]
	}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	2000002c 	.word	0x2000002c
 8006228:	20000030 	.word	0x20000030
 800622c:	20000134 	.word	0x20000134

08006230 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8081 	beq.w	800634c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e7fe      	b.n	8006264 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d902      	bls.n	8006276 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e002      	b.n	800627c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	429a      	cmp	r2, r3
 8006284:	d062      	beq.n	800634c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	429a      	cmp	r2, r3
 800628e:	d15d      	bne.n	800634c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006290:	4b30      	ldr	r3, [pc, #192]	; (8006354 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	429a      	cmp	r2, r3
 8006298:	d109      	bne.n	80062ae <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	e7fe      	b.n	80062ac <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	db04      	blt.n	80062cc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f1c3 0207 	rsb	r2, r3, #7
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	6959      	ldr	r1, [r3, #20]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062dc:	4413      	add	r3, r2
 80062de:	4299      	cmp	r1, r3
 80062e0:	d134      	bne.n	800634c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fa7c 	bl	80047e4 <uxListRemove>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4918      	ldr	r1, [pc, #96]	; (8006358 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	2201      	movs	r2, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43da      	mvns	r2, r3
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4013      	ands	r3, r2
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800631c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	2201      	movs	r2, #1
 8006324:	409a      	lsls	r2, r3
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4313      	orrs	r3, r2
 800632c:	4a0b      	ldr	r2, [pc, #44]	; (800635c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4a06      	ldr	r2, [pc, #24]	; (8006358 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800633e:	441a      	add	r2, r3
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f7fe f9ef 	bl	800472a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	2000002c 	.word	0x2000002c
 8006358:	20000030 	.word	0x20000030
 800635c:	20000134 	.word	0x20000134

08006360 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <pvTaskIncrementMutexHeldCount+0x24>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <pvTaskIncrementMutexHeldCount+0x24>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006372:	3201      	adds	r2, #1
 8006374:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006376:	4b03      	ldr	r3, [pc, #12]	; (8006384 <pvTaskIncrementMutexHeldCount+0x24>)
 8006378:	681b      	ldr	r3, [r3, #0]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	2000002c 	.word	0x2000002c

08006388 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006392:	4b29      	ldr	r3, [pc, #164]	; (8006438 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006398:	4b28      	ldr	r3, [pc, #160]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fa20 	bl	80047e4 <uxListRemove>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	2201      	movs	r2, #1
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43da      	mvns	r2, r3
 80063b8:	4b21      	ldr	r3, [pc, #132]	; (8006440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4013      	ands	r3, r2
 80063be:	4a20      	ldr	r2, [pc, #128]	; (8006440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d10a      	bne.n	80063e0 <prvAddCurrentTaskToDelayedList+0x58>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d0:	4b1a      	ldr	r3, [pc, #104]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	481a      	ldr	r0, [pc, #104]	; (8006444 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063da:	f7fe f9a6 	bl	800472a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063de:	e026      	b.n	800642e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4413      	add	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063e8:	4b14      	ldr	r3, [pc, #80]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d209      	bcs.n	800640c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe f9b4 	bl	8004772 <vListInsert>
}
 800640a:	e010      	b.n	800642e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <prvAddCurrentTaskToDelayedList+0xc4>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe f9aa 	bl	8004772 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	429a      	cmp	r2, r3
 8006426:	d202      	bcs.n	800642e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6013      	str	r3, [r2, #0]
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000130 	.word	0x20000130
 800643c:	2000002c 	.word	0x2000002c
 8006440:	20000134 	.word	0x20000134
 8006444:	20000118 	.word	0x20000118
 8006448:	200000e8 	.word	0x200000e8
 800644c:	200000e4 	.word	0x200000e4
 8006450:	2000014c 	.word	0x2000014c

08006454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3b04      	subs	r3, #4
 8006464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b04      	subs	r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b04      	subs	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006484:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <pxPortInitialiseStack+0x64>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b14      	subs	r3, #20
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b04      	subs	r3, #4
 800649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f06f 0202 	mvn.w	r2, #2
 80064a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3b20      	subs	r3, #32
 80064a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	080064bd 	.word	0x080064bd

080064bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <prvTaskExitError+0x50>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d009      	beq.n	80064e4 <prvTaskExitError+0x28>
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e7fe      	b.n	80064e2 <prvTaskExitError+0x26>
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064f6:	bf00      	nop
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0fc      	beq.n	80064f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20000008 	.word	0x20000008

08006510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <pxCurrentTCBConst2>)
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	f380 8809 	msr	PSP, r0
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8811 	msr	BASEPRI, r0
 800652a:	4770      	bx	lr
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst2>:
 8006530:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006538:	4808      	ldr	r0, [pc, #32]	; (800655c <prvPortStartFirstTask+0x24>)
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	6800      	ldr	r0, [r0, #0]
 800653e:	f380 8808 	msr	MSP, r0
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8814 	msr	CONTROL, r0
 800654a:	b662      	cpsie	i
 800654c:	b661      	cpsie	f
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	df00      	svc	0
 8006558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800655a:	bf00      	nop
 800655c:	e000ed08 	.word	0xe000ed08

08006560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006566:	4b44      	ldr	r3, [pc, #272]	; (8006678 <xPortStartScheduler+0x118>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a44      	ldr	r2, [pc, #272]	; (800667c <xPortStartScheduler+0x11c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d109      	bne.n	8006584 <xPortStartScheduler+0x24>
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e7fe      	b.n	8006582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006584:	4b3c      	ldr	r3, [pc, #240]	; (8006678 <xPortStartScheduler+0x118>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <xPortStartScheduler+0x120>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d109      	bne.n	80065a2 <xPortStartScheduler+0x42>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e7fe      	b.n	80065a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065a2:	4b38      	ldr	r3, [pc, #224]	; (8006684 <xPortStartScheduler+0x124>)
 80065a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	4b30      	ldr	r3, [pc, #192]	; (8006688 <xPortStartScheduler+0x128>)
 80065c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <xPortStartScheduler+0x12c>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065d0:	e009      	b.n	80065e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <xPortStartScheduler+0x12c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	4a2c      	ldr	r2, [pc, #176]	; (800668c <xPortStartScheduler+0x12c>)
 80065da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d0ef      	beq.n	80065d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065f2:	4b26      	ldr	r3, [pc, #152]	; (800668c <xPortStartScheduler+0x12c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f1c3 0307 	rsb	r3, r3, #7
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d009      	beq.n	8006612 <xPortStartScheduler+0xb2>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60bb      	str	r3, [r7, #8]
 8006610:	e7fe      	b.n	8006610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006612:	4b1e      	ldr	r3, [pc, #120]	; (800668c <xPortStartScheduler+0x12c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <xPortStartScheduler+0x12c>)
 800661a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <xPortStartScheduler+0x12c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006624:	4a19      	ldr	r2, [pc, #100]	; (800668c <xPortStartScheduler+0x12c>)
 8006626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	b2da      	uxtb	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <xPortStartScheduler+0x130>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <xPortStartScheduler+0x130>)
 8006636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800663a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800663c:	4b14      	ldr	r3, [pc, #80]	; (8006690 <xPortStartScheduler+0x130>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <xPortStartScheduler+0x130>)
 8006642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006648:	f000 f8d6 	bl	80067f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <xPortStartScheduler+0x134>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006652:	f000 f8f5 	bl	8006840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <xPortStartScheduler+0x138>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a0f      	ldr	r2, [pc, #60]	; (8006698 <xPortStartScheduler+0x138>)
 800665c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006662:	f7ff ff69 	bl	8006538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006666:	f7ff fa8b 	bl	8005b80 <vTaskSwitchContext>
	prvTaskExitError();
 800666a:	f7ff ff27 	bl	80064bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000ed00 	.word	0xe000ed00
 800667c:	410fc271 	.word	0x410fc271
 8006680:	410fc270 	.word	0x410fc270
 8006684:	e000e400 	.word	0xe000e400
 8006688:	20000158 	.word	0x20000158
 800668c:	2000015c 	.word	0x2000015c
 8006690:	e000ed20 	.word	0xe000ed20
 8006694:	20000008 	.word	0x20000008
 8006698:	e000ef34 	.word	0xe000ef34

0800669c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066b4:	4b0e      	ldr	r3, [pc, #56]	; (80066f0 <vPortEnterCritical+0x54>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a0d      	ldr	r2, [pc, #52]	; (80066f0 <vPortEnterCritical+0x54>)
 80066bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <vPortEnterCritical+0x54>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10e      	bne.n	80066e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <vPortEnterCritical+0x58>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <vPortEnterCritical+0x48>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	e7fe      	b.n	80066e2 <vPortEnterCritical+0x46>
	}
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000008 	.word	0x20000008
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <vPortExitCritical+0x4c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <vPortExitCritical+0x22>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	e7fe      	b.n	8006718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortExitCritical+0x4c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3b01      	subs	r3, #1
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <vPortExitCritical+0x4c>)
 8006722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <vPortExitCritical+0x4c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <vPortExitCritical+0x3e>
 800672c:	2300      	movs	r3, #0
 800672e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000008 	.word	0x20000008
	...

08006750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006774:	f380 8811 	msr	BASEPRI, r0
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f7ff f9fe 	bl	8005b80 <vTaskSwitchContext>
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f380 8811 	msr	BASEPRI, r0
 800678c:	bc09      	pop	{r0, r3}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006796:	f01e 0f10 	tst.w	lr, #16
 800679a:	bf08      	it	eq
 800679c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a0:	f380 8809 	msr	PSP, r0
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst>:
 80067b0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d0:	f7ff f91e 	bl	8005a10 <xTaskIncrementTick>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <SysTick_Handler+0x3c>)
 80067dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <vPortSetupTimerInterrupt+0x34>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vPortSetupTimerInterrupt+0x38>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <vPortSetupTimerInterrupt+0x3c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <vPortSetupTimerInterrupt+0x40>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	4a09      	ldr	r2, [pc, #36]	; (800683c <vPortSetupTimerInterrupt+0x44>)
 8006816:	3b01      	subs	r3, #1
 8006818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800681a:	4b04      	ldr	r3, [pc, #16]	; (800682c <vPortSetupTimerInterrupt+0x34>)
 800681c:	2207      	movs	r2, #7
 800681e:	601a      	str	r2, [r3, #0]
}
 8006820:	bf00      	nop
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	e000e010 	.word	0xe000e010
 8006830:	e000e018 	.word	0xe000e018
 8006834:	2000000c 	.word	0x2000000c
 8006838:	10624dd3 	.word	0x10624dd3
 800683c:	e000e014 	.word	0xe000e014

08006840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006850 <vPortEnableVFP+0x10>
 8006844:	6801      	ldr	r1, [r0, #0]
 8006846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800684a:	6001      	str	r1, [r0, #0]
 800684c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800684e:	bf00      	nop
 8006850:	e000ed88 	.word	0xe000ed88

08006854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800685a:	f3ef 8305 	mrs	r3, IPSR
 800685e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b0f      	cmp	r3, #15
 8006864:	d913      	bls.n	800688e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <vPortValidateInterruptPriority+0x6c>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006870:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <vPortValidateInterruptPriority+0x70>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	7afa      	ldrb	r2, [r7, #11]
 8006876:	429a      	cmp	r2, r3
 8006878:	d209      	bcs.n	800688e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e7fe      	b.n	800688c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800688e:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <vPortValidateInterruptPriority+0x74>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006896:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <vPortValidateInterruptPriority+0x78>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d909      	bls.n	80068b2 <vPortValidateInterruptPriority+0x5e>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	e7fe      	b.n	80068b0 <vPortValidateInterruptPriority+0x5c>
	}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e3f0 	.word	0xe000e3f0
 80068c4:	20000158 	.word	0x20000158
 80068c8:	e000ed0c 	.word	0xe000ed0c
 80068cc:	2000015c 	.word	0x2000015c

080068d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068dc:	f7fe ffee 	bl	80058bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068e0:	4b57      	ldr	r3, [pc, #348]	; (8006a40 <pvPortMalloc+0x170>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068e8:	f000 f90c 	bl	8006b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068ec:	4b55      	ldr	r3, [pc, #340]	; (8006a44 <pvPortMalloc+0x174>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 808c 	bne.w	8006a12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01c      	beq.n	800693a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006900:	2208      	movs	r2, #8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f023 0307 	bic.w	r3, r3, #7
 8006918:	3308      	adds	r3, #8
 800691a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <pvPortMalloc+0x6a>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e7fe      	b.n	8006938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d068      	beq.n	8006a12 <pvPortMalloc+0x142>
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <pvPortMalloc+0x178>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d863      	bhi.n	8006a12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800694a:	4b40      	ldr	r3, [pc, #256]	; (8006a4c <pvPortMalloc+0x17c>)
 800694c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800694e:	4b3f      	ldr	r3, [pc, #252]	; (8006a4c <pvPortMalloc+0x17c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006954:	e004      	b.n	8006960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <pvPortMalloc+0xa2>
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f1      	bne.n	8006956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006972:	4b33      	ldr	r3, [pc, #204]	; (8006a40 <pvPortMalloc+0x170>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006978:	429a      	cmp	r2, r3
 800697a:	d04a      	beq.n	8006a12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2208      	movs	r2, #8
 8006982:	4413      	add	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	2308      	movs	r3, #8
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	429a      	cmp	r2, r3
 800699c:	d91e      	bls.n	80069dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800699e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <pvPortMalloc+0xf4>
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e7fe      	b.n	80069c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069d6:	69b8      	ldr	r0, [r7, #24]
 80069d8:	f000 f8f6 	bl	8006bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <pvPortMalloc+0x178>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <pvPortMalloc+0x178>)
 80069e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <pvPortMalloc+0x178>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b18      	ldr	r3, [pc, #96]	; (8006a50 <pvPortMalloc+0x180>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d203      	bcs.n	80069fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <pvPortMalloc+0x178>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <pvPortMalloc+0x180>)
 80069fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <pvPortMalloc+0x174>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a12:	f7fe ff61 	bl	80058d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <pvPortMalloc+0x164>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e7fe      	b.n	8006a32 <pvPortMalloc+0x162>
	return pvReturn;
 8006a34:	69fb      	ldr	r3, [r7, #28]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3728      	adds	r7, #40	; 0x28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20003d68 	.word	0x20003d68
 8006a44:	20003d74 	.word	0x20003d74
 8006a48:	20003d6c 	.word	0x20003d6c
 8006a4c:	20003d60 	.word	0x20003d60
 8006a50:	20003d70 	.word	0x20003d70

08006a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d046      	beq.n	8006af4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a66:	2308      	movs	r3, #8
 8006a68:	425b      	negs	r3, r3
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <vPortFree+0xa8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <vPortFree+0x42>
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e7fe      	b.n	8006a94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <vPortFree+0x5e>
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	e7fe      	b.n	8006ab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b11      	ldr	r3, [pc, #68]	; (8006afc <vPortFree+0xa8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d019      	beq.n	8006af4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d115      	bne.n	8006af4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <vPortFree+0xa8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ad8:	f7fe fef0 	bl	80058bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <vPortFree+0xac>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4a06      	ldr	r2, [pc, #24]	; (8006b00 <vPortFree+0xac>)
 8006ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f000 f86c 	bl	8006bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006af0:	f7fe fef2 	bl	80058d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20003d74 	.word	0x20003d74
 8006b00:	20003d6c 	.word	0x20003d6c

08006b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <prvHeapInit+0xac>)
 8006b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3307      	adds	r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <prvHeapInit+0xac>)
 8006b34:	4413      	add	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <prvHeapInit+0xb0>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <prvHeapInit+0xb0>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b50:	2208      	movs	r2, #8
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0307 	bic.w	r3, r3, #7
 8006b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <prvHeapInit+0xb4>)
 8006b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <prvHeapInit+0xb4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <prvHeapInit+0xb4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <prvHeapInit+0xb4>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <prvHeapInit+0xb8>)
 8006b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <prvHeapInit+0xbc>)
 8006b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <prvHeapInit+0xc0>)
 8006b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ba2:	601a      	str	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000160 	.word	0x20000160
 8006bb4:	20003d60 	.word	0x20003d60
 8006bb8:	20003d68 	.word	0x20003d68
 8006bbc:	20003d70 	.word	0x20003d70
 8006bc0:	20003d6c 	.word	0x20003d6c
 8006bc4:	20003d74 	.word	0x20003d74

08006bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bd0:	4b28      	ldr	r3, [pc, #160]	; (8006c74 <prvInsertBlockIntoFreeList+0xac>)
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e002      	b.n	8006bdc <prvInsertBlockIntoFreeList+0x14>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d8f7      	bhi.n	8006bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d108      	bne.n	8006c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	441a      	add	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	441a      	add	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d118      	bne.n	8006c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <prvInsertBlockIntoFreeList+0xb0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d00d      	beq.n	8006c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e008      	b.n	8006c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <prvInsertBlockIntoFreeList+0xb0>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e003      	b.n	8006c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d002      	beq.n	8006c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c66:	bf00      	nop
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20003d60 	.word	0x20003d60
 8006c78:	20003d68 	.word	0x20003d68

08006c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b094      	sub	sp, #80	; 0x50
 8006c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c82:	f107 0320 	add.w	r3, r7, #32
 8006c86:	2230      	movs	r2, #48	; 0x30
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fa95 	bl	80081ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c90:	f107 030c 	add.w	r3, r7, #12
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	4b28      	ldr	r3, [pc, #160]	; (8006d48 <SystemClock_Config+0xcc>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <SystemClock_Config+0xcc>)
 8006caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cae:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb0:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <SystemClock_Config+0xcc>)
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	607b      	str	r3, [r7, #4]
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <SystemClock_Config+0xd0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <SystemClock_Config+0xd0>)
 8006cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <SystemClock_Config+0xd0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006cec:	2308      	movs	r3, #8
 8006cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006cf0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006cfa:	2307      	movs	r3, #7
 8006cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cfe:	f107 0320 	add.w	r3, r7, #32
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fb fa1c 	bl	8002140 <HAL_RCC_OscConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006d0e:	f000 fa16 	bl	800713e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d12:	230f      	movs	r3, #15
 8006d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d16:	2302      	movs	r3, #2
 8006d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006d2a:	f107 030c 	add.w	r3, r7, #12
 8006d2e:	2105      	movs	r1, #5
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fb fc75 	bl	8002620 <HAL_RCC_ClockConfig>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006d3c:	f000 f9ff 	bl	800713e <Error_Handler>
  }
}
 8006d40:	bf00      	nop
 8006d42:	3750      	adds	r7, #80	; 0x50
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	40007000 	.word	0x40007000

08006d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d56:	f107 031c 	add.w	r3, r7, #28
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	605a      	str	r2, [r3, #4]
 8006d60:	609a      	str	r2, [r3, #8]
 8006d62:	60da      	str	r2, [r3, #12]
 8006d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	4b65      	ldr	r3, [pc, #404]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4a64      	ldr	r2, [pc, #400]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d70:	f043 0310 	orr.w	r3, r3, #16
 8006d74:	6313      	str	r3, [r2, #48]	; 0x30
 8006d76:	4b62      	ldr	r3, [pc, #392]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	4a5d      	ldr	r2, [pc, #372]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d8c:	f043 0304 	orr.w	r3, r3, #4
 8006d90:	6313      	str	r3, [r2, #48]	; 0x30
 8006d92:	4b5b      	ldr	r3, [pc, #364]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	4b57      	ldr	r3, [pc, #348]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	4a56      	ldr	r2, [pc, #344]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	6313      	str	r3, [r2, #48]	; 0x30
 8006dae:	4b54      	ldr	r3, [pc, #336]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	4b50      	ldr	r3, [pc, #320]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	4a4f      	ldr	r2, [pc, #316]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dca:	4b4d      	ldr	r3, [pc, #308]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	4a48      	ldr	r2, [pc, #288]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	6313      	str	r3, [r2, #48]	; 0x30
 8006de6:	4b46      	ldr	r3, [pc, #280]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	4b42      	ldr	r3, [pc, #264]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	4a41      	ldr	r2, [pc, #260]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006dfc:	f043 0308 	orr.w	r3, r3, #8
 8006e00:	6313      	str	r3, [r2, #48]	; 0x30
 8006e02:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <MX_GPIO_Init+0x1b0>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|USART3_RT_Pin, GPIO_PIN_RESET);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f242 0108 	movw	r1, #8200	; 0x2008
 8006e14:	483b      	ldr	r0, [pc, #236]	; (8006f04 <MX_GPIO_Init+0x1b4>)
 8006e16:	f7f9 fe3b 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	483a      	ldr	r0, [pc, #232]	; (8006f08 <MX_GPIO_Init+0x1b8>)
 8006e20:	f7f9 fe36 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006e24:	2200      	movs	r2, #0
 8006e26:	f24f 0110 	movw	r1, #61456	; 0xf010
 8006e2a:	4838      	ldr	r0, [pc, #224]	; (8006f0c <MX_GPIO_Init+0x1bc>)
 8006e2c:	f7f9 fe30 	bl	8000a90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_RESET);
 8006e30:	2200      	movs	r2, #0
 8006e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e36:	4834      	ldr	r0, [pc, #208]	; (8006f08 <MX_GPIO_Init+0x1b8>)
 8006e38:	f7f9 fe2a 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin USART3_RT_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|USART3_RT_Pin;
 8006e3c:	f242 0308 	movw	r3, #8200	; 0x2008
 8006e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e42:	2301      	movs	r3, #1
 8006e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e4e:	f107 031c 	add.w	r3, r7, #28
 8006e52:	4619      	mov	r1, r3
 8006e54:	482b      	ldr	r0, [pc, #172]	; (8006f04 <MX_GPIO_Init+0x1b4>)
 8006e56:	f7f9 fc81 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin USART6_RT_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|USART6_RT_Pin;
 8006e5a:	f240 1301 	movw	r3, #257	; 0x101
 8006e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e60:	2301      	movs	r3, #1
 8006e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	4619      	mov	r1, r3
 8006e72:	4825      	ldr	r0, [pc, #148]	; (8006f08 <MX_GPIO_Init+0x1b8>)
 8006e74:	f7f9 fc72 	bl	800075c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
//  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006e7c:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <MX_GPIO_Init+0x1c0>)
 8006e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e84:	f107 031c 	add.w	r3, r7, #28
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4822      	ldr	r0, [pc, #136]	; (8006f14 <MX_GPIO_Init+0x1c4>)
 8006e8c:	f7f9 fc66 	bl	800075c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
//  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006e90:	2304      	movs	r3, #4
 8006e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e94:	2300      	movs	r3, #0
 8006e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006e9c:	f107 031c 	add.w	r3, r7, #28
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	481d      	ldr	r0, [pc, #116]	; (8006f18 <MX_GPIO_Init+0x1c8>)
 8006ea4:	f7f9 fc5a 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006ea8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8006eac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006eba:	f107 031c 	add.w	r3, r7, #28
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4812      	ldr	r0, [pc, #72]	; (8006f0c <MX_GPIO_Init+0x1bc>)
 8006ec2:	f7f9 fc4b 	bl	800075c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
//  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006ec6:	2320      	movs	r3, #32
 8006ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006ed2:	f107 031c 	add.w	r3, r7, #28
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	480c      	ldr	r0, [pc, #48]	; (8006f0c <MX_GPIO_Init+0x1bc>)
 8006eda:	f7f9 fc3f 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <MX_GPIO_Init+0x1c0>)
 8006ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006eea:	f107 031c 	add.w	r3, r7, #28
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4804      	ldr	r0, [pc, #16]	; (8006f04 <MX_GPIO_Init+0x1b4>)
 8006ef2:	f7f9 fc33 	bl	800075c <HAL_GPIO_Init>
}
 8006ef6:	bf00      	nop
 8006ef8:	3730      	adds	r7, #48	; 0x30
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40021000 	.word	0x40021000
 8006f08:	40020800 	.word	0x40020800
 8006f0c:	40020c00 	.word	0x40020c00
 8006f10:	10120000 	.word	0x10120000
 8006f14:	40020000 	.word	0x40020000
 8006f18:	40020400 	.word	0x40020400

08006f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <MX_I2C1_Init+0x54>)
 8006f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f28:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <MX_I2C1_Init+0x58>)
 8006f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f4c:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f58:	4804      	ldr	r0, [pc, #16]	; (8006f6c <MX_I2C1_Init+0x50>)
 8006f5a:	f7fa ffb9 	bl	8001ed0 <HAL_I2C_Init>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006f64:	f000 f8eb 	bl	800713e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8006f68:	bf00      	nop
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000407c 	.word	0x2000407c
 8006f70:	40005400 	.word	0x40005400
 8006f74:	000186a0 	.word	0x000186a0

08006f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006f7c:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f7e:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <MX_SPI1_Init+0x68>)
 8006f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006faa:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006fc8:	4804      	ldr	r0, [pc, #16]	; (8006fdc <MX_SPI1_Init+0x64>)
 8006fca:	f7fb fd4d 	bl	8002a68 <HAL_SPI_Init>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006fd4:	f000 f8b3 	bl	800713e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8006fd8:	bf00      	nop
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20004130 	.word	0x20004130
 8006fe0:	40013000 	.word	0x40013000

08006fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006fe8:	4b15      	ldr	r3, [pc, #84]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <MX_USART2_UART_Init+0x60>)
 8006fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006fee:	4b14      	ldr	r3, [pc, #80]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8006ff0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ff6:	4b12      	ldr	r3, [pc, #72]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ffc:	4b10      	ldr	r3, [pc, #64]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007002:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8007004:	2200      	movs	r2, #0
 8007006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 800700a:	220c      	movs	r2, #12
 800700c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8007010:	2200      	movs	r2, #0
 8007012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8007016:	2200      	movs	r2, #0
 8007018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800701a:	4809      	ldr	r0, [pc, #36]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 800701c:	f7fb ffc6 	bl	8002fac <HAL_UART_Init>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007026:	f000 f88a 	bl	800713e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <MX_USART2_UART_Init+0x5c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0220 	orr.w	r2, r2, #32
 8007038:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2000418c 	.word	0x2000418c
 8007044:	40004400 	.word	0x40004400

08007048 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800704c:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 800704e:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <MX_USART3_UART_Init+0x60>)
 8007050:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8007052:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007058:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 800705c:	2200      	movs	r2, #0
 800705e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007060:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007062:	2200      	movs	r2, #0
 8007064:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007068:	2200      	movs	r2, #0
 800706a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 800706e:	220c      	movs	r2, #12
 8007070:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007074:	2200      	movs	r2, #0
 8007076:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 800707a:	2200      	movs	r2, #0
 800707c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800707e:	4809      	ldr	r0, [pc, #36]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007080:	f7fb ff94 	bl	8002fac <HAL_UART_Init>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800708a:	f000 f858 	bl	800713e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* Enable Rx Interrupt */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <MX_USART3_UART_Init+0x5c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0220 	orr.w	r2, r2, #32
 800709c:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */
}
 800709e:	bf00      	nop
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20004038 	.word	0x20004038
 80070a8:	40004800 	.word	0x40004800

080070ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80070b0:	4b18      	ldr	r3, [pc, #96]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070b2:	4a19      	ldr	r2, [pc, #100]	; (8007118 <MX_USART6_UART_Init+0x6c>)
 80070b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80070b6:	4b17      	ldr	r3, [pc, #92]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80070bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070d2:	220c      	movs	r2, #12
 80070d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070d8:	2200      	movs	r2, #0
 80070da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070de:	2200      	movs	r2, #0
 80070e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80070e2:	480c      	ldr	r0, [pc, #48]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070e4:	f7fb ff62 	bl	8002fac <HAL_UART_Init>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80070ee:	f000 f826 	bl	800713e <Error_Handler>
  }

  /* Enable Rx Interrupt */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <MX_USART6_UART_Init+0x68>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0220 	orr.w	r2, r2, #32
 8007100:	60da      	str	r2, [r3, #12]
  HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_RESET);
 8007102:	2200      	movs	r2, #0
 8007104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007108:	4804      	ldr	r0, [pc, #16]	; (800711c <MX_USART6_UART_Init+0x70>)
 800710a:	f7f9 fcc1 	bl	8000a90 <HAL_GPIO_WritePin>
}
 800710e:	bf00      	nop
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200040ec 	.word	0x200040ec
 8007118:	40011400 	.word	0x40011400
 800711c:	40020800 	.word	0x40020800

08007120 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN Callback 0 */

 /* USER CODE END Callback 0 */
 if (htim->Instance == TIM2) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 8007132:	f7f9 f9ef 	bl	8000514 <HAL_IncTick>
 }
 /* USER CODE BEGIN Callback 1 */

 /* USER CODE END Callback 1 */
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800713e:	b480      	push	{r7}
 8007140:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */

 /* USER CODE END Error_Handler_Debug */
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <ComputeCRC16>:
extern	osMutexId CO2_Data_ProtectHandle;

/**************************************************************/

uint16_t ComputeCRC16 (uint8_t * buf, uint8_t len)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  uint8_t j;
  uint8_t i;

  uint16_t crc = 0xffff; //seed
 8007158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800715c:	81bb      	strh	r3, [r7, #12]
  for ( j = 0; j < len; j++)
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
 8007162:	e027      	b.n	80071b4 <ComputeCRC16+0x68>
  {
    uint8_t b = buf[j];
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	72fb      	strb	r3, [r7, #11]
    for ( i = 0; i < 8; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	73bb      	strb	r3, [r7, #14]
 8007172:	e019      	b.n	80071a8 <ComputeCRC16+0x5c>
    {
      crc = ((b ^ (uint8_t)crc) & 1) ? ((crc >> 1) ^ 0xA001) : (crc >> 1);
 8007174:	89bb      	ldrh	r3, [r7, #12]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	4053      	eors	r3, r2
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d006      	beq.n	8007194 <ComputeCRC16+0x48>
 8007186:	89bb      	ldrh	r3, [r7, #12]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <ComputeCRC16+0x80>)
 800718e:	4053      	eors	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	e002      	b.n	800719a <ComputeCRC16+0x4e>
 8007194:	89bb      	ldrh	r3, [r7, #12]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	81bb      	strh	r3, [r7, #12]
      b >>= 1;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
    for ( i = 0; i < 8; i++)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	3301      	adds	r3, #1
 80071a6:	73bb      	strb	r3, [r7, #14]
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b07      	cmp	r3, #7
 80071ac:	d9e2      	bls.n	8007174 <ComputeCRC16+0x28>
  for ( j = 0; j < len; j++)
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	3301      	adds	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d3d3      	bcc.n	8007164 <ComputeCRC16+0x18>
    }
  }
  return crc;
 80071bc:	89bb      	ldrh	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	ffffa001 	.word	0xffffa001

080071d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
#ifdef SOFTWARE_DEBUG
	  osDelay(2000);
	  freemem = xPortGetFreeHeapSize();
	  vTaskList (pcWriteBuffer);
#endif
    osDelay(1);
 80071d8:	2001      	movs	r0, #1
 80071da:	f7fd f9b0 	bl	800453e <osDelay>
 80071de:	e7fb      	b.n	80071d8 <StartDefaultTask+0x8>

080071e0 <Startcounter_1s_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton_Task */
void Startcounter_1s_Task(void const * argument)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_Task */
  /* Infinite loop */
  for(;;)
  {
//	  vTaskDelay(pdMS_TO_TICKS(1000));
	  osDelay(1000);
 80071e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071ec:	f7fd f9a7 	bl	800453e <osDelay>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80071f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <Startcounter_1s_Task+0x1c>)
 80071f6:	f7f9 fc64 	bl	8000ac2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80071fa:	e7f5      	b.n	80071e8 <Startcounter_1s_Task+0x8>
 80071fc:	40020c00 	.word	0x40020c00

08007200 <Start_uart2_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart2_Rx_handle */
void Start_uart2_Rx_handle(void const * argument)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart2_Rx_handle */

  /* Infinite loop */
  for(;;)
  {
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <Start_uart2_Rx_handle+0x2c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f04f 31ff 	mov.w	r1, #4294967295
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd ff01 	bl	8005018 <xQueueSemaphoreTake>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d1f5      	bne.n	8007208 <Start_uart2_Rx_handle+0x8>
	  {
		  xSemaphoreTake(usart2_semHandle, portMAX_DELAY);
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <Start_uart2_Rx_handle+0x2c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f04f 31ff 	mov.w	r1, #4294967295
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fef7 	bl	8005018 <xQueueSemaphoreTake>
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800722a:	e7ed      	b.n	8007208 <Start_uart2_Rx_handle+0x8>
 800722c:	200040e4 	.word	0x200040e4

08007230 <Start_uart3_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart3_Rx_handle */
void Start_uart3_Rx_handle(void const * argument)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_uart3_Rx_handle */
	static uint8_t	usart3_counter = 0x00;
	static uint8_t	Modbus_Rx_status =  MB_FRAME_RX_IDLE;
	const portTickType xTicksToWait = 500 / portTICK_RATE_MS;
 8007238:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800723c:	60fb      	str	r3, [r7, #12]
	/* Request: 	01 04 00 00 00 01 31 CA		*/
	/* Response:	01 04 02 00 19 78 FA		*/

	for(;;)
	{
		if(pdPASS == xQueueReceive(HMI_ISR_usart3_Q1Handle, &Rx_buffer_from_ISR, xTicksToWait )) /* portMAX_DELAY */
 800723e:	4b48      	ldr	r3, [pc, #288]	; (8007360 <Start_uart3_Rx_handle+0x130>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f107 010b 	add.w	r1, r7, #11
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd fe09 	bl	8004e60 <xQueueReceive>
 800724e:	4603      	mov	r3, r0
 8007250:	2b01      	cmp	r3, #1
 8007252:	d173      	bne.n	800733c <Start_uart3_Rx_handle+0x10c>
		{
			usart3_counter++;
 8007254:	4b43      	ldr	r3, [pc, #268]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	4b41      	ldr	r3, [pc, #260]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 800725e:	701a      	strb	r2, [r3, #0]

			switch (Modbus_Rx_status)
 8007260:	4b41      	ldr	r3, [pc, #260]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d862      	bhi.n	800732e <Start_uart3_Rx_handle+0xfe>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <Start_uart3_Rx_handle+0x40>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007281 	.word	0x08007281
 8007274:	0800729f 	.word	0x0800729f
 8007278:	080072db 	.word	0x080072db
 800727c:	08007305 	.word	0x08007305
			{

			case MB_FRAME_RX_IDLE:
				if ((HMI_SLAVE_ADDR_U3 == Rx_buffer_from_ISR) && (0x01 == usart3_counter))
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d107      	bne.n	8007296 <Start_uart3_Rx_handle+0x66>
 8007286:	4b37      	ldr	r3, [pc, #220]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d103      	bne.n	8007296 <Start_uart3_Rx_handle+0x66>
				{
					Modbus_Rx_status = MB_FRAME_RX_STARTED;
 800728e:	4b36      	ldr	r3, [pc, #216]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					usart3_counter = 0x00;
				}
				break;
 8007294:	e062      	b.n	800735c <Start_uart3_Rx_handle+0x12c>
					usart3_counter = 0x00;
 8007296:	4b33      	ldr	r3, [pc, #204]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
				break;
 800729c:	e05e      	b.n	800735c <Start_uart3_Rx_handle+0x12c>
			case MB_FRAME_RX_STARTED:
				if ((0x01 == Rx_buffer_from_ISR) && (0x02 == usart3_counter))
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <Start_uart3_Rx_handle+0x84>
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d103      	bne.n	80072b4 <Start_uart3_Rx_handle+0x84>
				{
					Modbus_Rx_status = MB_FRAME_RX_READ_COILS_FRAME;
 80072ac:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 80072ae:	2202      	movs	r2, #2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e011      	b.n	80072d8 <Start_uart3_Rx_handle+0xa8>
				}
				else if ((0x04 == Rx_buffer_from_ISR) && (0x02 == usart3_counter))
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d107      	bne.n	80072ca <Start_uart3_Rx_handle+0x9a>
 80072ba:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d103      	bne.n	80072ca <Start_uart3_Rx_handle+0x9a>
				{
					Modbus_Rx_status = MB_FRAME_RX_READ_INREG_FRAME;
 80072c2:	4b29      	ldr	r3, [pc, #164]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 80072c4:	2203      	movs	r2, #3
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	e006      	b.n	80072d8 <Start_uart3_Rx_handle+0xa8>
				}
				else
				{
					usart3_counter = 0x00;
 80072ca:	4b26      	ldr	r3, [pc, #152]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
					Modbus_Rx_status = MB_FRAME_RX_IDLE;
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80072d6:	e041      	b.n	800735c <Start_uart3_Rx_handle+0x12c>
 80072d8:	e040      	b.n	800735c <Start_uart3_Rx_handle+0x12c>
			case MB_FRAME_RX_READ_COILS_FRAME:
				if(0x08 == usart3_counter)
 80072da:	4b22      	ldr	r3, [pc, #136]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d139      	bne.n	8007356 <Start_uart3_Rx_handle+0x126>
				{
					/* Check CRC, if Ok */
					if( xSemaphoreGive( usart3_Tx1_semHandle ) == pdPASS )
 80072e2:	4b22      	ldr	r3, [pc, #136]	; (800736c <Start_uart3_Rx_handle+0x13c>)
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	f7fd fc2a 	bl	8004b44 <xQueueGenericSend>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d12f      	bne.n	8007356 <Start_uart3_Rx_handle+0x126>
					{
						usart3_counter = 0x00;
 80072f6:	4b1b      	ldr	r3, [pc, #108]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
						Modbus_Rx_status = MB_FRAME_RX_IDLE;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007302:	e028      	b.n	8007356 <Start_uart3_Rx_handle+0x126>
			case MB_FRAME_RX_READ_INREG_FRAME:
				if(0x08 == usart3_counter)
 8007304:	4b17      	ldr	r3, [pc, #92]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d126      	bne.n	800735a <Start_uart3_Rx_handle+0x12a>
//					{
//						usart3_counter = 0x00;
//						Modbus_Rx_status = MB_FRAME_RX_IDLE;
//					}

					if( xSemaphoreGive( usart3_Tx2_semHandle ) == pdPASS )
 800730c:	4b18      	ldr	r3, [pc, #96]	; (8007370 <Start_uart3_Rx_handle+0x140>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	f7fd fc15 	bl	8004b44 <xQueueGenericSend>
 800731a:	4603      	mov	r3, r0
 800731c:	2b01      	cmp	r3, #1
 800731e:	d11c      	bne.n	800735a <Start_uart3_Rx_handle+0x12a>
					{
						usart3_counter = 0x00;
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
						Modbus_Rx_status = MB_FRAME_RX_IDLE;
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
					}
				}

				break;
 800732c:	e015      	b.n	800735a <Start_uart3_Rx_handle+0x12a>
			default:
				Modbus_Rx_status = MB_FRAME_RX_IDLE;
 800732e:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
				usart3_counter = 0x00;
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	e780      	b.n	800723e <Start_uart3_Rx_handle+0xe>

			}
		}
		else
		{
			usart3_counter = 0x00;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <Start_uart3_Rx_handle+0x134>)
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
			Modbus_Rx_status = MB_FRAME_RX_IDLE;
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <Start_uart3_Rx_handle+0x138>)
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8007348:	2201      	movs	r2, #1
 800734a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800734e:	4809      	ldr	r0, [pc, #36]	; (8007374 <Start_uart3_Rx_handle+0x144>)
 8007350:	f7f9 fb9e 	bl	8000a90 <HAL_GPIO_WritePin>
 8007354:	e773      	b.n	800723e <Start_uart3_Rx_handle+0xe>
				break;
 8007356:	bf00      	nop
 8007358:	e771      	b.n	800723e <Start_uart3_Rx_handle+0xe>
				break;
 800735a:	bf00      	nop
		if(pdPASS == xQueueReceive(HMI_ISR_usart3_Q1Handle, &Rx_buffer_from_ISR, xTicksToWait )) /* portMAX_DELAY */
 800735c:	e76f      	b.n	800723e <Start_uart3_Rx_handle+0xe>
 800735e:	bf00      	nop
 8007360:	200041d4 	.word	0x200041d4
 8007364:	20003d78 	.word	0x20003d78
 8007368:	20003d79 	.word	0x20003d79
 800736c:	200040d0 	.word	0x200040d0
 8007370:	200041d0 	.word	0x200041d0
 8007374:	40020c00 	.word	0x40020c00

08007378 <Start_uart3_Tx1_handle>:
  /* USER CODE END Start_uart3_Rx_handle */
}

/**************************************************************/
void Start_uart3_Tx1_handle(void const * argument)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	static uint8_t	HMI_LAMP_blinking_counter = 0x00;
//	const portTickType xTicksToWait = 500 / portTICK_RATE_MS;

	uint8_t Tx_buf_1 [] = {0x01, 0x01, 0x02, 0x00, 0x04, 0xB8, 0x3F};
 8007380:	4a49      	ldr	r2, [pc, #292]	; (80074a8 <Start_uart3_Tx1_handle+0x130>)
 8007382:	f107 0310 	add.w	r3, r7, #16
 8007386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800738a:	6018      	str	r0, [r3, #0]
 800738c:	3304      	adds	r3, #4
 800738e:	8019      	strh	r1, [r3, #0]
 8007390:	3302      	adds	r3, #2
 8007392:	0c0a      	lsrs	r2, r1, #16
 8007394:	701a      	strb	r2, [r3, #0]
	uint8_t Tx_buf_2 [] = {0x01, 0x01, 0x02, 0x00, 0x00, 0xB9, 0xFC};
 8007396:	4a45      	ldr	r2, [pc, #276]	; (80074ac <Start_uart3_Tx1_handle+0x134>)
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073a0:	6018      	str	r0, [r3, #0]
 80073a2:	3304      	adds	r3, #4
 80073a4:	8019      	strh	r1, [r3, #0]
 80073a6:	3302      	adds	r3, #2
 80073a8:	0c0a      	lsrs	r2, r1, #16
 80073aa:	701a      	strb	r2, [r3, #0]
	uint8_t uart3_Tx_result = 0x00;
 80073ac:	2300      	movs	r3, #0
 80073ae:	75fb      	strb	r3, [r7, #23]

	for(;;)
	{
		if(pdPASS == xSemaphoreTake( usart3_Tx1_semHandle, portMAX_DELAY ))
 80073b0:	4b3f      	ldr	r3, [pc, #252]	; (80074b0 <Start_uart3_Tx1_handle+0x138>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f04f 31ff 	mov.w	r1, #4294967295
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd fe2d 	bl	8005018 <xQueueSemaphoreTake>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d1f5      	bne.n	80073b0 <Start_uart3_Tx1_handle+0x38>
		{

			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80073c4:	2201      	movs	r2, #1
 80073c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80073ca:	483a      	ldr	r0, [pc, #232]	; (80074b4 <Start_uart3_Tx1_handle+0x13c>)
 80073cc:	f7f9 fb60 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_SET);
 80073d0:	2201      	movs	r2, #1
 80073d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073d6:	4838      	ldr	r0, [pc, #224]	; (80074b8 <Start_uart3_Tx1_handle+0x140>)
 80073d8:	f7f9 fb5a 	bl	8000a90 <HAL_GPIO_WritePin>

			if (0x04 > HMI_LAMP_blinking_counter)
 80073dc:	4b37      	ldr	r3, [pc, #220]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d815      	bhi.n	8007410 <Start_uart3_Tx1_handle+0x98>
			{
				HMI_LAMP_blinking_counter++;
 80073e4:	4b35      	ldr	r3, [pc, #212]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	4b33      	ldr	r3, [pc, #204]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 80073ee:	701a      	strb	r2, [r3, #0]
				uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_1, (uint16_t)(sizeof(Tx_buf_1)/sizeof(Tx_buf_1[0])), 1000);
 80073f0:	f107 0110 	add.w	r1, r7, #16
 80073f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073f8:	2207      	movs	r2, #7
 80073fa:	4831      	ldr	r0, [pc, #196]	; (80074c0 <Start_uart3_Tx1_handle+0x148>)
 80073fc:	f7fb fe23 	bl	8003046 <HAL_UART_Transmit>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]
				if (HAL_OK != uart3_Tx_result)
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d03a      	beq.n	8007480 <Start_uart3_Tx1_handle+0x108>
				{
					uart3_Tx_result = 0x00;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
 800740e:	e037      	b.n	8007480 <Start_uart3_Tx1_handle+0x108>
				}
			}
			else if ((HMI_LAMP_blinking_counter < 0x07) && (HMI_LAMP_blinking_counter >= 0x04))
 8007410:	4b2a      	ldr	r3, [pc, #168]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b06      	cmp	r3, #6
 8007416:	d819      	bhi.n	800744c <Start_uart3_Tx1_handle+0xd4>
 8007418:	4b28      	ldr	r3, [pc, #160]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d915      	bls.n	800744c <Start_uart3_Tx1_handle+0xd4>
			{
				HMI_LAMP_blinking_counter++;
 8007420:	4b26      	ldr	r3, [pc, #152]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	4b24      	ldr	r3, [pc, #144]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 800742a:	701a      	strb	r2, [r3, #0]
				uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_2, (uint16_t)(sizeof(Tx_buf_2)/sizeof(Tx_buf_2[0])), 1000);
 800742c:	f107 0108 	add.w	r1, r7, #8
 8007430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007434:	2207      	movs	r2, #7
 8007436:	4822      	ldr	r0, [pc, #136]	; (80074c0 <Start_uart3_Tx1_handle+0x148>)
 8007438:	f7fb fe05 	bl	8003046 <HAL_UART_Transmit>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
				if (HAL_OK != uart3_Tx_result)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01c      	beq.n	8007480 <Start_uart3_Tx1_handle+0x108>
				{
					uart3_Tx_result = 0x00;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
				if (HAL_OK != uart3_Tx_result)
 800744a:	e019      	b.n	8007480 <Start_uart3_Tx1_handle+0x108>
				}
			}
			else if ((0x07 == HMI_LAMP_blinking_counter) && (0x07 <= HMI_LAMP_blinking_counter))
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b07      	cmp	r3, #7
 8007452:	d115      	bne.n	8007480 <Start_uart3_Tx1_handle+0x108>
 8007454:	4b19      	ldr	r3, [pc, #100]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b06      	cmp	r3, #6
 800745a:	d911      	bls.n	8007480 <Start_uart3_Tx1_handle+0x108>
			{
				HMI_LAMP_blinking_counter = 0x00;
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <Start_uart3_Tx1_handle+0x144>)
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
				uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_2, (uint16_t)(sizeof(Tx_buf_2)/sizeof(Tx_buf_2[0])), 1000);
 8007462:	f107 0108 	add.w	r1, r7, #8
 8007466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800746a:	2207      	movs	r2, #7
 800746c:	4814      	ldr	r0, [pc, #80]	; (80074c0 <Start_uart3_Tx1_handle+0x148>)
 800746e:	f7fb fdea 	bl	8003046 <HAL_UART_Transmit>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]
				if (HAL_OK != uart3_Tx_result)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <Start_uart3_Tx1_handle+0x108>
				{
					uart3_Tx_result = 0x00;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
			}
			else
			{

			}
			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_RESET);
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007486:	480c      	ldr	r0, [pc, #48]	; (80074b8 <Start_uart3_Tx1_handle+0x140>)
 8007488:	f7f9 fb02 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800748c:	2200      	movs	r2, #0
 800748e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007492:	4808      	ldr	r0, [pc, #32]	; (80074b4 <Start_uart3_Tx1_handle+0x13c>)
 8007494:	f7f9 fafc 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8007498:	2200      	movs	r2, #0
 800749a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800749e:	4805      	ldr	r0, [pc, #20]	; (80074b4 <Start_uart3_Tx1_handle+0x13c>)
 80074a0:	f7f9 faf6 	bl	8000a90 <HAL_GPIO_WritePin>
		if(pdPASS == xSemaphoreTake( usart3_Tx1_semHandle, portMAX_DELAY ))
 80074a4:	e784      	b.n	80073b0 <Start_uart3_Tx1_handle+0x38>
 80074a6:	bf00      	nop
 80074a8:	080081ec 	.word	0x080081ec
 80074ac:	080081f4 	.word	0x080081f4
 80074b0:	200040d0 	.word	0x200040d0
 80074b4:	40020c00 	.word	0x40020c00
 80074b8:	40021000 	.word	0x40021000
 80074bc:	20003d7a 	.word	0x20003d7a
 80074c0:	20004038 	.word	0x20004038

080074c4 <Start_uart3_Tx2_handle>:
	}
}

/**************************************************************/
void Start_uart3_Tx2_handle(void const * argument)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	uint8_t Tx_buf_1 [] = {0x01, 0x04, 0x02, 0x00, 0x19, 0x78, 0xFA};
 80074cc:	4a3b      	ldr	r2, [pc, #236]	; (80075bc <Start_uart3_Tx2_handle+0xf8>)
 80074ce:	f107 0310 	add.w	r3, r7, #16
 80074d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074d6:	6018      	str	r0, [r3, #0]
 80074d8:	3304      	adds	r3, #4
 80074da:	8019      	strh	r1, [r3, #0]
 80074dc:	3302      	adds	r3, #2
 80074de:	0c0a      	lsrs	r2, r1, #16
 80074e0:	701a      	strb	r2, [r3, #0]
	uint8_t uart3_Tx_result = 0x00;
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]
	uint16_t Data_to_be_sent;
	const portTickType xTicksToWait = 200 / portTICK_RATE_MS;
 80074e6:	23c8      	movs	r3, #200	; 0xc8
 80074e8:	61bb      	str	r3, [r7, #24]

	for(;;)
	{
		if(pdPASS == xSemaphoreTake( usart3_Tx2_semHandle, portMAX_DELAY ))
 80074ea:	4b35      	ldr	r3, [pc, #212]	; (80075c0 <Start_uart3_Tx2_handle+0xfc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 31ff 	mov.w	r1, #4294967295
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fd90 	bl	8005018 <xQueueSemaphoreTake>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d1f5      	bne.n	80074ea <Start_uart3_Tx2_handle+0x26>
		{

			xSemaphoreTake (CO2_Data_ProtectHandle, portMAX_DELAY);
 80074fe:	4b31      	ldr	r3, [pc, #196]	; (80075c4 <Start_uart3_Tx2_handle+0x100>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f04f 31ff 	mov.w	r1, #4294967295
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd fd86 	bl	8005018 <xQueueSemaphoreTake>

			if(pdPASS == xQueueReceive(Data_for_HMI_Q1Handle, &Data_to_be_sent, xTicksToWait ))
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <Start_uart3_Tx2_handle+0x104>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f107 010e 	add.w	r1, r7, #14
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4618      	mov	r0, r3
 8007518:	f7fd fca2 	bl	8004e60 <xQueueReceive>
 800751c:	4603      	mov	r3, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	d107      	bne.n	8007532 <Start_uart3_Tx2_handle+0x6e>
			{
				Tx_buf_1[3] = (uint8_t)(Data_to_be_sent >> 8);
 8007522:	89fb      	ldrh	r3, [r7, #14]
 8007524:	0a1b      	lsrs	r3, r3, #8
 8007526:	b29b      	uxth	r3, r3
 8007528:	b2db      	uxtb	r3, r3
 800752a:	74fb      	strb	r3, [r7, #19]
				Tx_buf_1[4] = (uint8_t)Data_to_be_sent;
 800752c:	89fb      	ldrh	r3, [r7, #14]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	753b      	strb	r3, [r7, #20]
			}

			xSemaphoreGive(CO2_Data_ProtectHandle);
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <Start_uart3_Tx2_handle+0x100>)
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	2200      	movs	r2, #0
 800753a:	2100      	movs	r1, #0
 800753c:	f7fd fb02 	bl	8004b44 <xQueueGenericSend>

			Data_to_be_sent = ComputeCRC16 (Tx_buf_1, 5);
 8007540:	f107 0310 	add.w	r3, r7, #16
 8007544:	2105      	movs	r1, #5
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fe00 	bl	800714c <ComputeCRC16>
 800754c:	4603      	mov	r3, r0
 800754e:	81fb      	strh	r3, [r7, #14]
			Tx_buf_1[5] = (uint8_t)Data_to_be_sent;
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	757b      	strb	r3, [r7, #21]
			Tx_buf_1[6] = (uint8_t)(Data_to_be_sent >> 8);
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	0a1b      	lsrs	r3, r3, #8
 800755a:	b29b      	uxth	r3, r3
 800755c:	b2db      	uxtb	r3, r3
 800755e:	75bb      	strb	r3, [r7, #22]


			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8007560:	2201      	movs	r2, #1
 8007562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007566:	4819      	ldr	r0, [pc, #100]	; (80075cc <Start_uart3_Tx2_handle+0x108>)
 8007568:	f7f9 fa92 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_SET);
 800756c:	2201      	movs	r2, #1
 800756e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007572:	4817      	ldr	r0, [pc, #92]	; (80075d0 <Start_uart3_Tx2_handle+0x10c>)
 8007574:	f7f9 fa8c 	bl	8000a90 <HAL_GPIO_WritePin>


			uart3_Tx_result = HAL_UART_Transmit(&huart3, Tx_buf_1, (uint16_t)(sizeof(Tx_buf_1)/sizeof(Tx_buf_1[0])), 1000);
 8007578:	f107 0110 	add.w	r1, r7, #16
 800757c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007580:	2207      	movs	r2, #7
 8007582:	4814      	ldr	r0, [pc, #80]	; (80075d4 <Start_uart3_Tx2_handle+0x110>)
 8007584:	f7fb fd5f 	bl	8003046 <HAL_UART_Transmit>
 8007588:	4603      	mov	r3, r0
 800758a:	77fb      	strb	r3, [r7, #31]
			if (HAL_OK == uart3_Tx_result)
 800758c:	7ffb      	ldrb	r3, [r7, #31]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <Start_uart3_Tx2_handle+0xd2>
			{
				uart3_Tx_result = 0x00;
 8007592:	2300      	movs	r3, #0
 8007594:	77fb      	strb	r3, [r7, #31]
			}

			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_RESET);
 8007596:	2200      	movs	r2, #0
 8007598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800759c:	480c      	ldr	r0, [pc, #48]	; (80075d0 <Start_uart3_Tx2_handle+0x10c>)
 800759e:	f7f9 fa77 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80075a2:	2200      	movs	r2, #0
 80075a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075a8:	4808      	ldr	r0, [pc, #32]	; (80075cc <Start_uart3_Tx2_handle+0x108>)
 80075aa:	f7f9 fa71 	bl	8000a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80075ae:	2200      	movs	r2, #0
 80075b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075b4:	4805      	ldr	r0, [pc, #20]	; (80075cc <Start_uart3_Tx2_handle+0x108>)
 80075b6:	f7f9 fa6b 	bl	8000a90 <HAL_GPIO_WritePin>
		if(pdPASS == xSemaphoreTake( usart3_Tx2_semHandle, portMAX_DELAY ))
 80075ba:	e796      	b.n	80074ea <Start_uart3_Tx2_handle+0x26>
 80075bc:	080081fc 	.word	0x080081fc
 80075c0:	200041d0 	.word	0x200041d0
 80075c4:	20004034 	.word	0x20004034
 80075c8:	200041d8 	.word	0x200041d8
 80075cc:	40020c00 	.word	0x40020c00
 80075d0:	40021000 	.word	0x40021000
 80075d4:	20004038 	.word	0x20004038

080075d8 <Start_CO2_Tx_handle>:
	}
}

/**************************************************************/
void Start_CO2_Tx_handle(void const * argument)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	uint8_t Tx_buf_1 [] = {0xFE, 0x04, 0x00, 0x03, 0x00, 0x01, 0xD5, 0xC5};
 80075e0:	4a13      	ldr	r2, [pc, #76]	; (8007630 <Start_CO2_Tx_handle+0x58>)
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t uart6_Tx_result;
	for(;;)
	{

		  osDelay(2000);
 80075ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075f2:	f7fc ffa4 	bl	800453e <osDelay>
//		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);

		  HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_SET);
 80075f6:	2201      	movs	r2, #1
 80075f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075fc:	480d      	ldr	r0, [pc, #52]	; (8007634 <Start_CO2_Tx_handle+0x5c>)
 80075fe:	f7f9 fa47 	bl	8000a90 <HAL_GPIO_WritePin>
//		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
		  uart6_Tx_result = HAL_UART_Transmit(&huart6, Tx_buf_1, (uint16_t)(sizeof(Tx_buf_1)/sizeof(Tx_buf_1[0])), 500);
 8007602:	f107 010c 	add.w	r1, r7, #12
 8007606:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800760a:	2208      	movs	r2, #8
 800760c:	480a      	ldr	r0, [pc, #40]	; (8007638 <Start_CO2_Tx_handle+0x60>)
 800760e:	f7fb fd1a 	bl	8003046 <HAL_UART_Transmit>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
		  if (HAL_OK != uart6_Tx_result)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <Start_CO2_Tx_handle+0x48>
		  {
			  uart6_Tx_result = 0x00;
 800761c:	2300      	movs	r3, #0
 800761e:	75fb      	strb	r3, [r7, #23]

		  }

		  HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_RESET);
 8007620:	2200      	movs	r2, #0
 8007622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007626:	4803      	ldr	r0, [pc, #12]	; (8007634 <Start_CO2_Tx_handle+0x5c>)
 8007628:	f7f9 fa32 	bl	8000a90 <HAL_GPIO_WritePin>
		  osDelay(2000);
 800762c:	e7df      	b.n	80075ee <Start_CO2_Tx_handle+0x16>
 800762e:	bf00      	nop
 8007630:	08008204 	.word	0x08008204
 8007634:	40020800 	.word	0x40020800
 8007638:	200040ec 	.word	0x200040ec

0800763c <Start_CO2_Rx_handle>:
//* @param argument: Not used
//* @retval None
//*/
///* USER CODE END Header_Start_CO2_Rx_handle */
void Start_CO2_Rx_handle(void const * argument)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_CO2_Rx_handle */

	static uint16_t CO2_value;
	static uint8_t	usart6_counter = 0x00;
	static uint8_t	Modbus_Rx_status =  MB_FRAME_RX_IDLE;
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8007644:	2364      	movs	r3, #100	; 0x64
 8007646:	60fb      	str	r3, [r7, #12]
	uint8_t Rx_buffer_from_ISR;

	/* Infinite loop */
	for(;;)
	{
		if(pdPASS == xQueueReceive(CO2_ISR_usart6_Q1Handle, &Rx_buffer_from_ISR, xTicksToWait)) /* portMAX_DELAY */
 8007648:	4b42      	ldr	r3, [pc, #264]	; (8007754 <Start_CO2_Rx_handle+0x118>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f107 010b 	add.w	r1, r7, #11
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4618      	mov	r0, r3
 8007654:	f7fd fc04 	bl	8004e60 <xQueueReceive>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d171      	bne.n	8007742 <Start_CO2_Rx_handle+0x106>
		{
			usart6_counter++;
 800765e:	4b3e      	ldr	r3, [pc, #248]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 8007668:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007670:	483a      	ldr	r0, [pc, #232]	; (800775c <Start_CO2_Rx_handle+0x120>)
 8007672:	f7f9 fa0d 	bl	8000a90 <HAL_GPIO_WritePin>

			switch (Modbus_Rx_status)
 8007676:	4b3a      	ldr	r3, [pc, #232]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d012      	beq.n	80076a4 <Start_CO2_Rx_handle+0x68>
 800767e:	2b02      	cmp	r3, #2
 8007680:	d022      	beq.n	80076c8 <Start_CO2_Rx_handle+0x8c>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d156      	bne.n	8007734 <Start_CO2_Rx_handle+0xf8>
			{

			case MB_FRAME_RX_IDLE:
				if ((HMI_SLAVE_ADDR_U6 == Rx_buffer_from_ISR) && (0x01 == usart6_counter))
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2bfe      	cmp	r3, #254	; 0xfe
 800768a:	d107      	bne.n	800769c <Start_CO2_Rx_handle+0x60>
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d103      	bne.n	800769c <Start_CO2_Rx_handle+0x60>
				{
					Modbus_Rx_status = MB_FRAME_RX_STARTED;
 8007694:	4b32      	ldr	r3, [pc, #200]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					usart6_counter = 0x00;
				}
				break;
 800769a:	e05a      	b.n	8007752 <Start_CO2_Rx_handle+0x116>
					usart6_counter = 0x00;
 800769c:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
				break;
 80076a2:	e056      	b.n	8007752 <Start_CO2_Rx_handle+0x116>
			case MB_FRAME_RX_STARTED:
				if ((0x04 == Rx_buffer_from_ISR) && (0x02 == usart6_counter))
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d107      	bne.n	80076ba <Start_CO2_Rx_handle+0x7e>
 80076aa:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d103      	bne.n	80076ba <Start_CO2_Rx_handle+0x7e>
				{
					Modbus_Rx_status = MB_FRAME_RX_READ_CO2_FRAME;
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 80076b4:	2202      	movs	r2, #2
 80076b6:	701a      	strb	r2, [r3, #0]
				else
				{
					usart6_counter = 0x00;
					Modbus_Rx_status = MB_FRAME_RX_IDLE;
				}
				break;
 80076b8:	e04b      	b.n	8007752 <Start_CO2_Rx_handle+0x116>
					usart6_counter = 0x00;
 80076ba:	4b27      	ldr	r3, [pc, #156]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
					Modbus_Rx_status = MB_FRAME_RX_IDLE;
 80076c0:	4b27      	ldr	r3, [pc, #156]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
				break;
 80076c6:	e044      	b.n	8007752 <Start_CO2_Rx_handle+0x116>
			case MB_FRAME_RX_READ_CO2_FRAME:
				if(0x04 == usart6_counter)
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d105      	bne.n	80076dc <Start_CO2_Rx_handle+0xa0>
				{
					CO2_value = (uint16_t)(Rx_buffer_from_ISR<<8);
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	4b22      	ldr	r3, [pc, #136]	; (8007764 <Start_CO2_Rx_handle+0x128>)
 80076da:	801a      	strh	r2, [r3, #0]
				}
				if(0x05 == usart6_counter)
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b05      	cmp	r3, #5
 80076e2:	d107      	bne.n	80076f4 <Start_CO2_Rx_handle+0xb8>
				{
					CO2_value |= (uint16_t)Rx_buffer_from_ISR;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <Start_CO2_Rx_handle+0x128>)
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <Start_CO2_Rx_handle+0x128>)
 80076f2:	801a      	strh	r2, [r3, #0]
				}
				if(0x07 == usart6_counter)
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b07      	cmp	r3, #7
 80076fa:	d129      	bne.n	8007750 <Start_CO2_Rx_handle+0x114>
				{
					/* Check CRC, if Ok */
					xSemaphoreTake (CO2_Data_ProtectHandle, portMAX_DELAY);
 80076fc:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <Start_CO2_Rx_handle+0x12c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f04f 31ff 	mov.w	r1, #4294967295
 8007704:	4618      	mov	r0, r3
 8007706:	f7fd fc87 	bl	8005018 <xQueueSemaphoreTake>
					if (pdPASS == xQueueSendToBack(Data_for_HMI_Q1Handle, &CO2_value, xTicksToWait))
 800770a:	4b18      	ldr	r3, [pc, #96]	; (800776c <Start_CO2_Rx_handle+0x130>)
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4914      	ldr	r1, [pc, #80]	; (8007764 <Start_CO2_Rx_handle+0x128>)
 8007714:	f7fd fa16 	bl	8004b44 <xQueueGenericSend>
					{
						/* Clear queue */
					}
					xSemaphoreGive(CO2_Data_ProtectHandle);
 8007718:	4b13      	ldr	r3, [pc, #76]	; (8007768 <Start_CO2_Rx_handle+0x12c>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	f7fd fa0f 	bl	8004b44 <xQueueGenericSend>
					HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8007726:	2200      	movs	r2, #0
 8007728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800772c:	480b      	ldr	r0, [pc, #44]	; (800775c <Start_CO2_Rx_handle+0x120>)
 800772e:	f7f9 f9af 	bl	8000a90 <HAL_GPIO_WritePin>
//					{
//						Modbus_Rx_status = MB_FRAME_RX_IDLE;
//						usart6_counter = 0x00;
//					}
				}
				break;
 8007732:	e00d      	b.n	8007750 <Start_CO2_Rx_handle+0x114>
			default:
				Modbus_Rx_status = MB_FRAME_RX_IDLE;
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
				usart6_counter = 0x00;
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e782      	b.n	8007648 <Start_CO2_Rx_handle+0xc>
			}
		}
		else
		{
			usart6_counter = 0x00;
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <Start_CO2_Rx_handle+0x11c>)
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
			Modbus_Rx_status = MB_FRAME_RX_IDLE;
 8007748:	4b05      	ldr	r3, [pc, #20]	; (8007760 <Start_CO2_Rx_handle+0x124>)
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e77b      	b.n	8007648 <Start_CO2_Rx_handle+0xc>
				break;
 8007750:	bf00      	nop
		if(pdPASS == xQueueReceive(CO2_ISR_usart6_Q1Handle, &Rx_buffer_from_ISR, xTicksToWait)) /* portMAX_DELAY */
 8007752:	e779      	b.n	8007648 <Start_CO2_Rx_handle+0xc>
 8007754:	2000412c 	.word	0x2000412c
 8007758:	20003d7b 	.word	0x20003d7b
 800775c:	40020c00 	.word	0x40020c00
 8007760:	20003d7c 	.word	0x20003d7c
 8007764:	20003d7e 	.word	0x20003d7e
 8007768:	20004034 	.word	0x20004034
 800776c:	200041d8 	.word	0x200041d8

08007770 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a07      	ldr	r2, [pc, #28]	; (80077ac <vApplicationGetIdleTaskMemory+0x2c>)
 8007790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4a06      	ldr	r2, [pc, #24]	; (80077b0 <vApplicationGetIdleTaskMemory+0x30>)
 8007796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20003d80 	.word	0x20003d80
 80077b0:	20003dd4 	.word	0x20003dd4

080077b4 <main>:
#include "usb_host.h"
#include "CO2_helper.h"

/**************************************************************/
int main(void)
{
 80077b4:	b5b0      	push	{r4, r5, r7, lr}
 80077b6:	b0d2      	sub	sp, #328	; 0x148
 80077b8:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80077ba:	f7f8 fe89 	bl	80004d0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80077be:	f7ff fa5d 	bl	8006c7c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077c2:	f7ff fac5 	bl	8006d50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80077c6:	f7ff fba9 	bl	8006f1c <MX_I2C1_Init>
  MX_SPI1_Init();
 80077ca:	f7ff fbd5 	bl	8006f78 <MX_SPI1_Init>

  MX_USART2_UART_Init();
 80077ce:	f7ff fc09 	bl	8006fe4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80077d2:	f7ff fc39 	bl	8007048 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80077d6:	f7ff fc69 	bl	80070ac <MX_USART6_UART_Init>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  osMutexDef(CO2_Data_Protect);
 80077da:	2300      	movs	r3, #0
 80077dc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80077e0:	2300      	movs	r3, #0
 80077e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  CO2_Data_ProtectHandle = osMutexCreate(osMutex(CO2_Data_Protect));
 80077e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fc febb 	bl	8004566 <osMutexCreate>
 80077f0:	4602      	mov	r2, r0
 80077f2:	4b8b      	ldr	r3, [pc, #556]	; (8007a20 <main+0x26c>)
 80077f4:	601a      	str	r2, [r3, #0]

  /* Create the semaphores(s) */
  osSemaphoreDef(usart2_sem);
 80077f6:	2300      	movs	r3, #0
 80077f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80077fc:	2300      	movs	r3, #0
 80077fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  usart2_semHandle = osSemaphoreCreate(osSemaphore(usart2_sem), 1);
 8007802:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007806:	2101      	movs	r1, #1
 8007808:	4618      	mov	r0, r3
 800780a:	f7fc fec4 	bl	8004596 <osSemaphoreCreate>
 800780e:	4602      	mov	r2, r0
 8007810:	4b84      	ldr	r3, [pc, #528]	; (8007a24 <main+0x270>)
 8007812:	601a      	str	r2, [r3, #0]
//  osSemaphoreDef(usart3_sem);
//  usart3_semHandle = osSemaphoreCreate(osSemaphore(usart3_sem), 1);
  osSemaphoreDef(usart3_Tx1_sem);
 8007814:	2300      	movs	r3, #0
 8007816:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800781a:	2300      	movs	r3, #0
 800781c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  usart3_Tx1_semHandle = osSemaphoreCreate(osSemaphore(usart3_Tx1_sem), 1);
 8007820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007824:	2101      	movs	r1, #1
 8007826:	4618      	mov	r0, r3
 8007828:	f7fc feb5 	bl	8004596 <osSemaphoreCreate>
 800782c:	4602      	mov	r2, r0
 800782e:	4b7e      	ldr	r3, [pc, #504]	; (8007a28 <main+0x274>)
 8007830:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(usart3_Tx2_sem);
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007838:	2300      	movs	r3, #0
 800783a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  usart3_Tx2_semHandle = osSemaphoreCreate(osSemaphore(usart3_Tx2_sem), 1);
 800783e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f7fc fea6 	bl	8004596 <osSemaphoreCreate>
 800784a:	4602      	mov	r2, r0
 800784c:	4b77      	ldr	r3, [pc, #476]	; (8007a2c <main+0x278>)
 800784e:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(usart6_TxReq_sem);
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  usart6_TxReq_semHandle = osSemaphoreCreate(osSemaphore(usart6_TxReq_sem), 1);
 800785c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007860:	2101      	movs	r1, #1
 8007862:	4618      	mov	r0, r3
 8007864:	f7fc fe97 	bl	8004596 <osSemaphoreCreate>
 8007868:	4602      	mov	r2, r0
 800786a:	4b71      	ldr	r3, [pc, #452]	; (8007a30 <main+0x27c>)
 800786c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of HMI_ISR_usart3_Q1 */
  osMessageQDef(HMI_ISR_usart3_Q1, 1, uint8_t);
 800786e:	4b71      	ldr	r3, [pc, #452]	; (8007a34 <main+0x280>)
 8007870:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8007874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HMI_ISR_usart3_Q1Handle = osMessageCreate(osMessageQ(HMI_ISR_usart3_Q1), NULL);
 800787a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f7fc febb 	bl	80045fc <osMessageCreate>
 8007886:	4602      	mov	r2, r0
 8007888:	4b6b      	ldr	r3, [pc, #428]	; (8007a38 <main+0x284>)
 800788a:	601a      	str	r2, [r3, #0]

  /* definition and creation of CO2_ISR_usart6_Q1 */
  osMessageQDef(CO2_ISR_usart6_Q1, 1, uint8_t);
 800788c:	4b69      	ldr	r3, [pc, #420]	; (8007a34 <main+0x280>)
 800788e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8007892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CO2_ISR_usart6_Q1Handle = osMessageCreate(osMessageQ(CO2_ISR_usart6_Q1), NULL);
 8007898:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fc feac 	bl	80045fc <osMessageCreate>
 80078a4:	4602      	mov	r2, r0
 80078a6:	4b65      	ldr	r3, [pc, #404]	; (8007a3c <main+0x288>)
 80078a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Data_for_HMI_Q1 */
  osMessageQDef(Data_for_HMI_Q1, 1, uint16_t);
 80078aa:	4b65      	ldr	r3, [pc, #404]	; (8007a40 <main+0x28c>)
 80078ac:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80078b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Data_for_HMI_Q1Handle = osMessageCreate(osMessageQ(Data_for_HMI_Q1), NULL);
 80078b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fc fe9d 	bl	80045fc <osMessageCreate>
 80078c2:	4602      	mov	r2, r0
 80078c4:	4b5f      	ldr	r3, [pc, #380]	; (8007a44 <main+0x290>)
 80078c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of Data_for_HMI_Q1 */
  osMessageQDef(HMI_response_type_Q1, 1, uint8_t);
 80078c8:	4b5a      	ldr	r3, [pc, #360]	; (8007a34 <main+0x280>)
 80078ca:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80078ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HMI_response_type_Q1Handle = osMessageCreate(osMessageQ(HMI_response_type_Q1), NULL);
 80078d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fc fe8e 	bl	80045fc <osMessageCreate>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <main+0x294>)
 80078e4:	601a      	str	r2, [r3, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80078e6:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <main+0x298>)
 80078e8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80078ec:	461d      	mov	r5, r3
 80078ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80078fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f7fc fdd0 	bl	80044a6 <osThreadCreate>
 8007906:	4602      	mov	r2, r0
 8007908:	4b51      	ldr	r3, [pc, #324]	; (8007a50 <main+0x29c>)
 800790a:	601a      	str	r2, [r3, #0]
//  /* definition and creation of myButton_Task */
//  osThreadDef(myButton_Task, StartButton_Task, osPriorityLow, 0, 128);
//  myButton_TaskHandle = osThreadCreate(osThread(myButton_Task), NULL);

  /* definition and creation of counter_1s_Task */
  osThreadDef(counter_1s_Task, Startcounter_1s_Task, osPriorityLow, 0, 128);
 800790c:	4b51      	ldr	r3, [pc, #324]	; (8007a54 <main+0x2a0>)
 800790e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8007912:	461d      	mov	r5, r3
 8007914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800791c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  counter_1s_TaskHandle = osThreadCreate(osThread(counter_1s_Task), NULL);
 8007920:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f7fc fdbd 	bl	80044a6 <osThreadCreate>
 800792c:	4602      	mov	r2, r0
 800792e:	4b4a      	ldr	r3, [pc, #296]	; (8007a58 <main+0x2a4>)
 8007930:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart2_Rx_handle */
  osThreadDef(uart2_Rx_handle, Start_uart2_Rx_handle, osPriorityNormal, 0, 128);
 8007932:	4b4a      	ldr	r3, [pc, #296]	; (8007a5c <main+0x2a8>)
 8007934:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007938:	461d      	mov	r5, r3
 800793a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800793c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800793e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2_Rx_handleHandle = osThreadCreate(osThread(uart2_Rx_handle), NULL);
 8007946:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f7fc fdaa 	bl	80044a6 <osThreadCreate>
 8007952:	4602      	mov	r2, r0
 8007954:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <main+0x2ac>)
 8007956:	601a      	str	r2, [r3, #0]

//  /* definition and creation of uart3_Rx_handle */
  osThreadDef(uart3_Rx_handle, Start_uart3_Rx_handle, osPriorityNormal, 0, 128);
 8007958:	4b42      	ldr	r3, [pc, #264]	; (8007a64 <main+0x2b0>)
 800795a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800795e:	461d      	mov	r5, r3
 8007960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Rx_handleHandle = osThreadCreate(osThread(uart3_Rx_handle), NULL);
 800796c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f7fc fd97 	bl	80044a6 <osThreadCreate>
 8007978:	4602      	mov	r2, r0
 800797a:	4b3b      	ldr	r3, [pc, #236]	; (8007a68 <main+0x2b4>)
 800797c:	601a      	str	r2, [r3, #0]

//  /* definition and creation of uart3_Tx1_handle */
  osThreadDef(uart3_Tx1_handle, Start_uart3_Tx1_handle, osPriorityBelowNormal, 0, 128);
 800797e:	4b3b      	ldr	r3, [pc, #236]	; (8007a6c <main+0x2b8>)
 8007980:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8007984:	461d      	mov	r5, r3
 8007986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800798e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Tx1_handleHandle = osThreadCreate(osThread(uart3_Tx1_handle), NULL);
 8007992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f7fc fd84 	bl	80044a6 <osThreadCreate>
 800799e:	4602      	mov	r2, r0
 80079a0:	4b33      	ldr	r3, [pc, #204]	; (8007a70 <main+0x2bc>)
 80079a2:	601a      	str	r2, [r3, #0]
//
//  /* definition and creation of uart3_Tx2_handle */
  osThreadDef(uart3_Tx2_handle, Start_uart3_Tx2_handle, osPriorityBelowNormal, 0, 128);
 80079a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079a8:	4a32      	ldr	r2, [pc, #200]	; (8007a74 <main+0x2c0>)
 80079aa:	461c      	mov	r4, r3
 80079ac:	4615      	mov	r5, r2
 80079ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Tx2_handleHandle = osThreadCreate(osThread(uart3_Tx2_handle), NULL);
 80079ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fc fd70 	bl	80044a6 <osThreadCreate>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <main+0x2c4>)
 80079ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of CO2_Tx_handle */
  osThreadDef(CO2_Tx_handle, Start_CO2_Tx_handle, osPriorityBelowNormal, 0, 128);
 80079cc:	f107 031c 	add.w	r3, r7, #28
 80079d0:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <main+0x2c8>)
 80079d2:	461c      	mov	r4, r3
 80079d4:	4615      	mov	r5, r2
 80079d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO2_Tx_handleHandle = osThreadCreate(osThread(CO2_Tx_handle), NULL);
 80079e2:	f107 031c 	add.w	r3, r7, #28
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fc fd5c 	bl	80044a6 <osThreadCreate>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <main+0x2cc>)
 80079f2:	601a      	str	r2, [r3, #0]

//  /* definition and creation of CO2_u6_Rx_handl */
  osThreadDef(CO2_Rx_handle, Start_CO2_Rx_handle, osPriorityNormal, 0, 128);
 80079f4:	463b      	mov	r3, r7
 80079f6:	4a23      	ldr	r2, [pc, #140]	; (8007a84 <main+0x2d0>)
 80079f8:	461c      	mov	r4, r3
 80079fa:	4615      	mov	r5, r2
 80079fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO2_Rx_handleHandle = osThreadCreate(osThread(CO2_Rx_handle), NULL);
 8007a08:	463b      	mov	r3, r7
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fc fd4a 	bl	80044a6 <osThreadCreate>
 8007a12:	4602      	mov	r2, r0
 8007a14:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <main+0x2d4>)
 8007a16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007a18:	f7fc fd3e 	bl	8004498 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007a1c:	e7fe      	b.n	8007a1c <main+0x268>
 8007a1e:	bf00      	nop
 8007a20:	20004034 	.word	0x20004034
 8007a24:	200040e4 	.word	0x200040e4
 8007a28:	200040d0 	.word	0x200040d0
 8007a2c:	200041d0 	.word	0x200041d0
 8007a30:	200040e8 	.word	0x200040e8
 8007a34:	0800820c 	.word	0x0800820c
 8007a38:	200041d4 	.word	0x200041d4
 8007a3c:	2000412c 	.word	0x2000412c
 8007a40:	0800821c 	.word	0x0800821c
 8007a44:	200041d8 	.word	0x200041d8
 8007a48:	20004078 	.word	0x20004078
 8007a4c:	08008238 	.word	0x08008238
 8007a50:	20003fd8 	.word	0x20003fd8
 8007a54:	08008264 	.word	0x08008264
 8007a58:	200040d4 	.word	0x200040d4
 8007a5c:	08008290 	.word	0x08008290
 8007a60:	200041cc 	.word	0x200041cc
 8007a64:	080082bc 	.word	0x080082bc
 8007a68:	20004188 	.word	0x20004188
 8007a6c:	080082ec 	.word	0x080082ec
 8007a70:	20004030 	.word	0x20004030
 8007a74:	0800831c 	.word	0x0800831c
 8007a78:	200040dc 	.word	0x200040dc
 8007a7c:	08008348 	.word	0x08008348
 8007a80:	200040e0 	.word	0x200040e0
 8007a84:	08008374 	.word	0x08008374
 8007a88:	200040d8 	.word	0x200040d8

08007a8c <USART2_IRQHandler>:
  /* USER CODE END 3 */
}

/**************************************************************/
void USART2_IRQHandler(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
//	if (pdPASS == xQueueSendToBackFromISR(CO2_ISR_usart6_Q1Handle, &usart2_Rx_data, &xHigherPriorityTaskWoken))
//	{
////		HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_SET);
////		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
//	}
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <USART3_IRQHandler>:

/**************************************************************/
void USART3_IRQHandler(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
	uint8_t usart3_Rx_data = 0x00;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	70fb      	strb	r3, [r7, #3]

	HAL_UART_IRQHandler(&huart3);
 8007aaa:	480e      	ldr	r0, [pc, #56]	; (8007ae4 <USART3_IRQHandler+0x48>)
 8007aac:	f7fb fb64 	bl	8003178 <HAL_UART_IRQHandler>
	usart3_Rx_data = (uint8_t) huart3.Instance->DR;
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <USART3_IRQHandler+0x48>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	70fb      	strb	r3, [r7, #3]
	if (pdPASS == xQueueSendToBackFromISR(HMI_ISR_usart3_Q1Handle, &usart3_Rx_data, &xHigherPriorityTaskWoken))
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <USART3_IRQHandler+0x4c>)
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	1d3a      	adds	r2, r7, #4
 8007ac0:	1cf9      	adds	r1, r7, #3
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f7fd f938 	bl	8004d38 <xQueueGenericSendFromISR>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <USART3_IRQHandler+0x3e>
	{
//		HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ad4:	4805      	ldr	r0, [pc, #20]	; (8007aec <USART3_IRQHandler+0x50>)
 8007ad6:	f7f8 ffdb 	bl	8000a90 <HAL_GPIO_WritePin>
	}
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20004038 	.word	0x20004038
 8007ae8:	200041d4 	.word	0x200041d4
 8007aec:	40020c00 	.word	0x40020c00

08007af0 <USART6_IRQHandler>:

/**************************************************************/
void USART6_IRQHandler(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
	uint8_t usart6_Rx_data = 0x00;
 8007afa:	2300      	movs	r3, #0
 8007afc:	70fb      	strb	r3, [r7, #3]

	HAL_UART_IRQHandler(&huart6);
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <USART6_IRQHandler+0x40>)
 8007b00:	f7fb fb3a 	bl	8003178 <HAL_UART_IRQHandler>
	usart6_Rx_data = (uint8_t) huart6.Instance->DR;
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <USART6_IRQHandler+0x40>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b14:	4807      	ldr	r0, [pc, #28]	; (8007b34 <USART6_IRQHandler+0x44>)
 8007b16:	f7f8 ffbb 	bl	8000a90 <HAL_GPIO_WritePin>

	if (pdPASS == xQueueSendToBackFromISR(CO2_ISR_usart6_Q1Handle, &usart6_Rx_data, &xHigherPriorityTaskWoken))
 8007b1a:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <USART6_IRQHandler+0x48>)
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	1d3a      	adds	r2, r7, #4
 8007b20:	1cf9      	adds	r1, r7, #3
 8007b22:	2300      	movs	r3, #0
 8007b24:	f7fd f908 	bl	8004d38 <xQueueGenericSendFromISR>
	{
//		HAL_GPIO_WritePin(GPIOC, USART6_RT_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
	}
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200040ec 	.word	0x200040ec
 8007b34:	40020c00 	.word	0x40020c00
 8007b38:	2000412c 	.word	0x2000412c

08007b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <HAL_MspInit+0x54>)
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <HAL_MspInit+0x54>)
 8007b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b50:	6453      	str	r3, [r2, #68]	; 0x44
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <HAL_MspInit+0x54>)
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5a:	607b      	str	r3, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b5e:	2300      	movs	r3, #0
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <HAL_MspInit+0x54>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	4a0a      	ldr	r2, [pc, #40]	; (8007b90 <HAL_MspInit+0x54>)
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b6e:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <HAL_MspInit+0x54>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	210f      	movs	r1, #15
 8007b7e:	f06f 0001 	mvn.w	r0, #1
 8007b82:	f7f8 fd9f 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40023800 	.word	0x40023800

08007b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	; 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b9c:	f107 0314 	add.w	r3, r7, #20
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	60da      	str	r2, [r3, #12]
 8007baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_I2C_MspInit+0x84>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d12c      	bne.n	8007c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	4a17      	ldr	r2, [pc, #92]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007bd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007bd8:	2312      	movs	r3, #18
 8007bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be0:	2300      	movs	r3, #0
 8007be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007be4:	2304      	movs	r3, #4
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	4619      	mov	r1, r3
 8007bee:	480c      	ldr	r0, [pc, #48]	; (8007c20 <HAL_I2C_MspInit+0x8c>)
 8007bf0:	f7f8 fdb4 	bl	800075c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c02:	6413      	str	r3, [r2, #64]	; 0x40
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <HAL_I2C_MspInit+0x88>)
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007c10:	bf00      	nop
 8007c12:	3728      	adds	r7, #40	; 0x28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40005400 	.word	0x40005400
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	40020400 	.word	0x40020400

08007c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08a      	sub	sp, #40	; 0x28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2c:	f107 0314 	add.w	r3, r7, #20
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a19      	ldr	r2, [pc, #100]	; (8007ca8 <HAL_SPI_MspInit+0x84>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d12b      	bne.n	8007c9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c54:	6453      	str	r3, [r2, #68]	; 0x44
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	4b11      	ldr	r3, [pc, #68]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	4a10      	ldr	r2, [pc, #64]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	6313      	str	r3, [r2, #48]	; 0x30
 8007c72:	4b0e      	ldr	r3, [pc, #56]	; (8007cac <HAL_SPI_MspInit+0x88>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007c7e:	23e0      	movs	r3, #224	; 0xe0
 8007c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c82:	2302      	movs	r3, #2
 8007c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007c8e:	2305      	movs	r3, #5
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4619      	mov	r1, r3
 8007c98:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <HAL_SPI_MspInit+0x8c>)
 8007c9a:	f7f8 fd5f 	bl	800075c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007c9e:	bf00      	nop
 8007ca0:	3728      	adds	r7, #40	; 0x28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40013000 	.word	0x40013000
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	40020000 	.word	0x40020000

08007cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	; 0x38
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a57      	ldr	r2, [pc, #348]	; (8007e30 <HAL_UART_MspInit+0x17c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d134      	bne.n	8007d40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	623b      	str	r3, [r7, #32]
 8007cda:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	4a55      	ldr	r2, [pc, #340]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce6:	4b53      	ldr	r3, [pc, #332]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cee:	623b      	str	r3, [r7, #32]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	4a4e      	ldr	r2, [pc, #312]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30
 8007d02:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007d0e:	230c      	movs	r3, #12
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d12:	2302      	movs	r3, #2
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d1e:	2307      	movs	r3, #7
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d26:	4619      	mov	r1, r3
 8007d28:	4843      	ldr	r0, [pc, #268]	; (8007e38 <HAL_UART_MspInit+0x184>)
 8007d2a:	f7f8 fd17 	bl	800075c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2105      	movs	r1, #5
 8007d32:	2026      	movs	r0, #38	; 0x26
 8007d34:	f7f8 fcc6 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007d38:	2026      	movs	r0, #38	; 0x26
 8007d3a:	f7f8 fcdf 	bl	80006fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007d3e:	e073      	b.n	8007e28 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a3d      	ldr	r2, [pc, #244]	; (8007e3c <HAL_UART_MspInit+0x188>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d135      	bne.n	8007db6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d58:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	4a31      	ldr	r2, [pc, #196]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	6313      	str	r3, [r2, #48]	; 0x30
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d90:	2303      	movs	r3, #3
 8007d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007d94:	2307      	movs	r3, #7
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4828      	ldr	r0, [pc, #160]	; (8007e40 <HAL_UART_MspInit+0x18c>)
 8007da0:	f7f8 fcdc 	bl	800075c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8007da4:	2200      	movs	r2, #0
 8007da6:	2105      	movs	r1, #5
 8007da8:	2027      	movs	r0, #39	; 0x27
 8007daa:	f7f8 fc8b 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007dae:	2027      	movs	r0, #39	; 0x27
 8007db0:	f7f8 fca4 	bl	80006fc <HAL_NVIC_EnableIRQ>
}
 8007db4:	e038      	b.n	8007e28 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <HAL_UART_MspInit+0x190>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d133      	bne.n	8007e28 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc8:	4a1a      	ldr	r2, [pc, #104]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007dca:	f043 0320 	orr.w	r3, r3, #32
 8007dce:	6453      	str	r3, [r2, #68]	; 0x44
 8007dd0:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007de6:	f043 0304 	orr.w	r3, r3, #4
 8007dea:	6313      	str	r3, [r2, #48]	; 0x30
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_UART_MspInit+0x180>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007df8:	23c0      	movs	r3, #192	; 0xc0
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e04:	2303      	movs	r3, #3
 8007e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e08:	2308      	movs	r3, #8
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e10:	4619      	mov	r1, r3
 8007e12:	480d      	ldr	r0, [pc, #52]	; (8007e48 <HAL_UART_MspInit+0x194>)
 8007e14:	f7f8 fca2 	bl	800075c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2105      	movs	r1, #5
 8007e1c:	2047      	movs	r0, #71	; 0x47
 8007e1e:	f7f8 fc51 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007e22:	2047      	movs	r0, #71	; 0x47
 8007e24:	f7f8 fc6a 	bl	80006fc <HAL_NVIC_EnableIRQ>
}
 8007e28:	bf00      	nop
 8007e2a:	3738      	adds	r7, #56	; 0x38
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40004400 	.word	0x40004400
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40020000 	.word	0x40020000
 8007e3c:	40004800 	.word	0x40004800
 8007e40:	40020400 	.word	0x40020400
 8007e44:	40011400 	.word	0x40011400
 8007e48:	40020800 	.word	0x40020800

08007e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08c      	sub	sp, #48	; 0x30
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	201c      	movs	r0, #28
 8007e62:	f7f8 fc2f 	bl	80006c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8007e66:	201c      	movs	r0, #28
 8007e68:	f7f8 fc48 	bl	80006fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	4b20      	ldr	r3, [pc, #128]	; (8007ef4 <HAL_InitTick+0xa8>)
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <HAL_InitTick+0xa8>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <HAL_InitTick+0xa8>)
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e88:	f107 0210 	add.w	r2, r7, #16
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fa fdb6 	bl	8002a04 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007e98:	f7fa fd8c 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <HAL_InitTick+0xac>)
 8007ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eaa:	0c9b      	lsrs	r3, r3, #18
 8007eac:	3b01      	subs	r3, #1
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8007eb0:	4b12      	ldr	r3, [pc, #72]	; (8007efc <HAL_InitTick+0xb0>)
 8007eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007eb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8007eb8:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_InitTick+0xb0>)
 8007eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8007ec0:	4a0e      	ldr	r2, [pc, #56]	; (8007efc <HAL_InitTick+0xb0>)
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_InitTick+0xb0>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <HAL_InitTick+0xb0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8007ed2:	480a      	ldr	r0, [pc, #40]	; (8007efc <HAL_InitTick+0xb0>)
 8007ed4:	f7fa fe2c 	bl	8002b30 <HAL_TIM_Base_Init>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8007ede:	4807      	ldr	r0, [pc, #28]	; (8007efc <HAL_InitTick+0xb0>)
 8007ee0:	f7fa fe5b 	bl	8002b9a <HAL_TIM_Base_Start_IT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	e000      	b.n	8007eea <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3730      	adds	r7, #48	; 0x30
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	431bde83 	.word	0x431bde83
 8007efc:	200041dc 	.word	0x200041dc

08007f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f12:	e7fe      	b.n	8007f12 <HardFault_Handler+0x4>

08007f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f18:	e7fe      	b.n	8007f18 <MemManage_Handler+0x4>

08007f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f1e:	e7fe      	b.n	8007f1e <BusFault_Handler+0x4>

08007f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f24:	e7fe      	b.n	8007f24 <UsageFault_Handler+0x4>

08007f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f26:	b480      	push	{r7}
 8007f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f2a:	bf00      	nop
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007f38:	4802      	ldr	r0, [pc, #8]	; (8007f44 <TIM2_IRQHandler+0x10>)
 8007f3a:	f7fa fe52 	bl	8002be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007f3e:	bf00      	nop
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200041dc 	.word	0x200041dc

08007f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007f4c:	4802      	ldr	r0, [pc, #8]	; (8007f58 <OTG_FS_IRQHandler+0x10>)
 8007f4e:	f7f8 fdd3 	bl	8000af8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	2000421c 	.word	0x2000421c

08007f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f60:	4b16      	ldr	r3, [pc, #88]	; (8007fbc <SystemInit+0x60>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <SystemInit+0x60>)
 8007f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007f70:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <SystemInit+0x64>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <SystemInit+0x64>)
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <SystemInit+0x64>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007f82:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <SystemInit+0x64>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a0e      	ldr	r2, [pc, #56]	; (8007fc0 <SystemInit+0x64>)
 8007f88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <SystemInit+0x64>)
 8007f94:	4a0b      	ldr	r2, [pc, #44]	; (8007fc4 <SystemInit+0x68>)
 8007f96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <SystemInit+0x64>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a08      	ldr	r2, [pc, #32]	; (8007fc0 <SystemInit+0x64>)
 8007f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <SystemInit+0x64>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <SystemInit+0x60>)
 8007fac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fb0:	609a      	str	r2, [r3, #8]
#endif
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	e000ed00 	.word	0xe000ed00
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	24003010 	.word	0x24003010

08007fc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fc f958 	bl	800428c <USBH_LL_IncTimer>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fc f99c 	bl	8004330 <USBH_LL_Connect>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800e:	4618      	mov	r0, r3
 8008010:	f7fc f9b1 	bl	8004376 <USBH_LL_Disconnect>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
 8008028:	4613      	mov	r3, r2
 800802a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008032:	4618      	mov	r0, r3
 8008034:	f7fc f9d1 	bl	80043da <USBH_LL_NotifyURBChange>
#endif
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800804e:	4618      	mov	r0, r3
 8008050:	f7fc f946 	bl	80042e0 <USBH_LL_PortEnabled>
} 
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800806a:	4618      	mov	r0, r3
 800806c:	f7fc f952 	bl	8004314 <USBH_LL_PortDisabled>
} 
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 fe36 	bl	8000d00 <HAL_HCD_Stop>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f808 	bl	80080b0 <USBH_Get_USB_Status>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d817      	bhi.n	80080f4 <USBH_Get_USB_Status+0x44>
 80080c4:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBH_Get_USB_Status+0x1c>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080e3 	.word	0x080080e3
 80080d4:	080080e9 	.word	0x080080e9
 80080d8:	080080ef 	.word	0x080080ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e00b      	b.n	80080fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080e2:	2302      	movs	r3, #2
 80080e4:	73fb      	strb	r3, [r7, #15]
    break;
 80080e6:	e008      	b.n	80080fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
    break;
 80080ec:	e005      	b.n	80080fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080ee:	2302      	movs	r3, #2
 80080f0:	73fb      	strb	r3, [r7, #15]
    break;
 80080f2:	e002      	b.n	80080fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80080f4:	2302      	movs	r3, #2
 80080f6:	73fb      	strb	r3, [r7, #15]
    break;
 80080f8:	bf00      	nop
  }
  return usb_status;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008140 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800810c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800810e:	e003      	b.n	8008118 <LoopCopyDataInit>

08008110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008116:	3104      	adds	r1, #4

08008118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008118:	480b      	ldr	r0, [pc, #44]	; (8008148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800811c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800811e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008120:	d3f6      	bcc.n	8008110 <CopyDataInit>
  ldr  r2, =_sbss
 8008122:	4a0b      	ldr	r2, [pc, #44]	; (8008150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008124:	e002      	b.n	800812c <LoopFillZerobss>

08008126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008128:	f842 3b04 	str.w	r3, [r2], #4

0800812c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800812e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008130:	d3f9      	bcc.n	8008126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008132:	f7ff ff13 	bl	8007f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008136:	f000 f811 	bl	800815c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800813a:	f7ff fb3b 	bl	80077b4 <main>
  bx  lr    
 800813e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008140:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008144:	080083b8 	.word	0x080083b8
  ldr  r0, =_sdata
 8008148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800814c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8008150:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8008154:	200044e0 	.word	0x200044e0

08008158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008158:	e7fe      	b.n	8008158 <ADC_IRQHandler>
	...

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0d      	ldr	r6, [pc, #52]	; (8008194 <__libc_init_array+0x38>)
 8008160:	4c0d      	ldr	r4, [pc, #52]	; (8008198 <__libc_init_array+0x3c>)
 8008162:	1ba4      	subs	r4, r4, r6
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	2500      	movs	r5, #0
 8008168:	42a5      	cmp	r5, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	4e0b      	ldr	r6, [pc, #44]	; (800819c <__libc_init_array+0x40>)
 800816e:	4c0c      	ldr	r4, [pc, #48]	; (80081a0 <__libc_init_array+0x44>)
 8008170:	f000 f82c 	bl	80081cc <_init>
 8008174:	1ba4      	subs	r4, r4, r6
 8008176:	10a4      	asrs	r4, r4, #2
 8008178:	2500      	movs	r5, #0
 800817a:	42a5      	cmp	r5, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008184:	4798      	blx	r3
 8008186:	3501      	adds	r5, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800818e:	4798      	blx	r3
 8008190:	3501      	adds	r5, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	080083b0 	.word	0x080083b0
 8008198:	080083b0 	.word	0x080083b0
 800819c:	080083b0 	.word	0x080083b0
 80081a0:	080083b4 	.word	0x080083b4

080081a4 <memcpy>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	1e43      	subs	r3, r0, #1
 80081a8:	440a      	add	r2, r1
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b8:	e7f7      	b.n	80081aa <memcpy+0x6>

080081ba <memset>:
 80081ba:	4402      	add	r2, r0
 80081bc:	4603      	mov	r3, r0
 80081be:	4293      	cmp	r3, r2
 80081c0:	d100      	bne.n	80081c4 <memset+0xa>
 80081c2:	4770      	bx	lr
 80081c4:	f803 1b01 	strb.w	r1, [r3], #1
 80081c8:	e7f9      	b.n	80081be <memset+0x4>
	...

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
