
My_30072019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c370  0800c370  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c370  0800c370  0001c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c378  0800c378  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c378  0800c378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c37c  0800c37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004858  20000094  0800c414  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048ec  0800c414  000248ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028692  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052de  00000000  00000000  00048756  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e98  00000000  00000000  0004da38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c70  00000000  00000000  0004f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f6f  00000000  00000000  00051540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b6a2  00000000  00000000  000794af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd940  00000000  00000000  00094b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008250  00000000  00000000  0017250c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c210 	.word	0x0800c210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c210 	.word	0x0800c210

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8fa 	bl	80006f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f00b f968 	bl	800b7d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f00a ff94 	bl	800b430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	20004068 	.word	0x20004068

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20004068 	.word	0x20004068

08000554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff ffee 	bl	800053c <HAL_GetTick>
 8000560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056c:	d005      	beq.n	800057a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_Delay+0x40>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4413      	add	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057a:	bf00      	nop
 800057c:	f7ff ffde 	bl	800053c <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <HAL_Delay+0x28>
  {
  }
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000004 	.word	0x20000004

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	; (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff4c 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800071a:	f7ff ff61 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 800071e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f7ff ffb1 	bl	800068c <NVIC_EncodePriority>
 800072a:	4602      	mov	r2, r0
 800072c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff80 	bl	8000638 <__NVIC_SetPriority>
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff54 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b02      	cmp	r3, #2
 800076e:	d004      	beq.n	800077a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00c      	b.n	8000794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e16b      	b.n	8000a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007bc:	2201      	movs	r2, #1
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f040 815a 	bne.w	8000a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d00b      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d007      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	2b11      	cmp	r3, #17
 80007f0:	d003      	beq.n	80007fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d130      	bne.n	800085c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2203      	movs	r2, #3
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4013      	ands	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	4313      	orrs	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	091b      	lsrs	r3, r3, #4
 8000846:	f003 0201 	and.w	r2, r3, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4313      	orrs	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4313      	orrs	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0xfc>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b12      	cmp	r3, #18
 800089a:	d123      	bne.n	80008e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	220f      	movs	r2, #15
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	691a      	ldr	r2, [r3, #16]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	08da      	lsrs	r2, r3, #3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3208      	adds	r2, #8
 80008de:	69b9      	ldr	r1, [r7, #24]
 80008e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	2203      	movs	r2, #3
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0203 	and.w	r2, r3, #3
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 80b4 	beq.w	8000a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a5e      	ldr	r2, [pc, #376]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <HAL_GPIO_Init+0x308>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000942:	4a5a      	ldr	r2, [pc, #360]	; (8000aac <HAL_GPIO_Init+0x30c>)
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	3302      	adds	r3, #2
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <HAL_GPIO_Init+0x310>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d02b      	beq.n	80009c6 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <HAL_GPIO_Init+0x314>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d025      	beq.n	80009c2 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_GPIO_Init+0x318>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d01f      	beq.n	80009be <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_GPIO_Init+0x31c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d019      	beq.n	80009ba <HAL_GPIO_Init+0x21a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4d      	ldr	r2, [pc, #308]	; (8000ac0 <HAL_GPIO_Init+0x320>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x216>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_GPIO_Init+0x324>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x212>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <HAL_GPIO_Init+0x328>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x20e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <HAL_GPIO_Init+0x32c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x20a>
 80009a6:	2307      	movs	r3, #7
 80009a8:	e00e      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009aa:	2308      	movs	r3, #8
 80009ac:	e00c      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e00a      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b2:	2305      	movs	r3, #5
 80009b4:	e008      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009b6:	2304      	movs	r3, #4
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009ba:	2303      	movs	r3, #3
 80009bc:	e004      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009be:	2302      	movs	r3, #2
 80009c0:	e002      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <HAL_GPIO_Init+0x228>
 80009c6:	2300      	movs	r3, #0
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	f002 0203 	and.w	r2, r2, #3
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	4093      	lsls	r3, r2
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d8:	4934      	ldr	r1, [pc, #208]	; (8000aac <HAL_GPIO_Init+0x30c>)
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a0a:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a88:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_GPIO_Init+0x330>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f67f ae90 	bls.w	80007bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40021400 	.word	0x40021400
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40021c00 	.word	0x40021c00
 8000ad0:	40013c00 	.word	0x40013c00

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	401a      	ands	r2, r3
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d104      	bne.n	8000b2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	041a      	lsls	r2, r3, #16
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	b08f      	sub	sp, #60	; 0x3c
 8000b40:	af0a      	add	r7, sp, #40	; 0x28
 8000b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e054      	b.n	8000bf8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d106      	bne.n	8000b6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f00a ff71 	bl	800ba50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fa71 	bl	8005074 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	687e      	ldr	r6, [r7, #4]
 8000b9a:	466d      	mov	r5, sp
 8000b9c:	f106 0410 	add.w	r4, r6, #16
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bb0:	1d33      	adds	r3, r6, #4
 8000bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f004 f9eb 	bl	8004f90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fa68 	bl	8005096 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	687e      	ldr	r6, [r7, #4]
 8000bce:	466d      	mov	r5, sp
 8000bd0:	f106 0410 	add.w	r4, r6, #16
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000be4:	1d33      	adds	r3, r6, #4
 8000be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f004 fb7b 	bl	80052e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c00 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70bb      	strb	r3, [r7, #2]
 8000c16:	4613      	mov	r3, r2
 8000c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_HCD_HC_Init+0x28>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e07f      	b.n	8000d28 <HAL_HCD_HC_Init+0x128>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	333d      	adds	r3, #61	; 0x3d
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3338      	adds	r3, #56	; 0x38
 8000c54:	787a      	ldrb	r2, [r7, #1]
 8000c56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c6a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3339      	adds	r3, #57	; 0x39
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333f      	adds	r3, #63	; 0x3f
 8000c90:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c9e:	b2d8      	uxtb	r0, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	333a      	adds	r3, #58	; 0x3a
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da0a      	bge.n	8000cd0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	333b      	adds	r3, #59	; 0x3b
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e009      	b.n	8000ce4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	333b      	adds	r3, #59	; 0x3b
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333c      	adds	r3, #60	; 0x3c
 8000cf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cf8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	787c      	ldrb	r4, [r7, #1]
 8000d00:	78ba      	ldrb	r2, [r7, #2]
 8000d02:	78f9      	ldrb	r1, [r7, #3]
 8000d04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f004 fc67 	bl	80055e8 <USB_HC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_HCD_HC_Halt+0x1e>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e00f      	b.n	8000d6e <HAL_HCD_HC_Halt+0x3e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fea1 	bl	8005aa6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70bb      	strb	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d92:	78fa      	ldrb	r2, [r7, #3]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	333b      	adds	r3, #59	; 0x3b
 8000da2:	78ba      	ldrb	r2, [r7, #2]
 8000da4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	333f      	adds	r3, #63	; 0x3f
 8000db6:	787a      	ldrb	r2, [r7, #1]
 8000db8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000dba:	7c3b      	ldrb	r3, [r7, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d114      	bne.n	8000dea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	3342      	adds	r3, #66	; 0x42
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	333d      	adds	r3, #61	; 0x3d
 8000de4:	7f3a      	ldrb	r2, [r7, #28]
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e009      	b.n	8000dfe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3342      	adds	r3, #66	; 0x42
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	f200 80d6 	bhi.w	8000fb2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_HCD_HC_SubmitRequest+0x94>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000f9d 	.word	0x08000f9d
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	08000f13 	.word	0x08000f13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e1c:	7c3b      	ldrb	r3, [r7, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 80c9 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 80c5 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8000e2c:	8b3b      	ldrh	r3, [r7, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d109      	bne.n	8000e46 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3351      	adds	r3, #81	; 0x51
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3351      	adds	r3, #81	; 0x51
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3342      	adds	r3, #66	; 0x42
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e70:	e0a1      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3342      	adds	r3, #66	; 0x42
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
      break;
 8000e86:	e096      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d120      	bne.n	8000ed0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3351      	adds	r3, #81	; 0x51
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000eb8:	e07e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
      break;
 8000ece:	e073      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3350      	adds	r3, #80	; 0x50
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3342      	adds	r3, #66	; 0x42
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
      break;
 8000efa:	e05d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
      break;
 8000f10:	e052      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d120      	bne.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3351      	adds	r3, #81	; 0x51
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3342      	adds	r3, #66	; 0x42
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f42:	e039      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3342      	adds	r3, #66	; 0x42
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
      break;
 8000f58:	e02e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3342      	adds	r3, #66	; 0x42
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
      break;
 8000f84:	e018      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3342      	adds	r3, #66	; 0x42
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
      break;
 8000f9a:	e00d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3342      	adds	r3, #66	; 0x42
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
      break;
 8000fb0:	e002      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8000fb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	8b39      	ldrh	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4403      	add	r3, r0
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	335c      	adds	r3, #92	; 0x5c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	334c      	adds	r3, #76	; 0x4c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3339      	adds	r3, #57	; 0x39
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	335d      	adds	r3, #93	; 0x5d
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3338      	adds	r3, #56	; 0x38
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	18d1      	adds	r1, r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f004 fbd6 	bl	80057fc <USB_HC_StartXfer>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop

0800105c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f004 f8f3 	bl	800525e <USB_GetMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 80ef 	bne.w	800125e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f8d7 	bl	8005238 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80e5 	beq.w	800125c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f004 f8ce 	bl	8005238 <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010a6:	d104      	bne.n	80010b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f8be 	bl	8005238 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010c6:	d104      	bne.n	80010d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f8ae 	bl	8005238 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010e6:	d104      	bne.n	80010f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f89e 	bl	8005238 <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b02      	cmp	r3, #2
 8001104:	d103      	bne.n	800110e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2202      	movs	r2, #2
 800110c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 f890 	bl	8005238 <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001122:	d115      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800112c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f00a fd04 	bl	800bb4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f004 f986 	bl	800545c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f86f 	bl	8005238 <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d102      	bne.n	800116c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f001 f966 	bl	8002438 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f004 f861 	bl	8005238 <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b08      	cmp	r3, #8
 800117e:	d106      	bne.n	800118e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f00a fcc7 	bl	800bb14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f004 f850 	bl	8005238 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a2:	d138      	bne.n	8001216 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fc6b 	bl	8005a84 <USB_HC_ReadInterrupt>
 80011ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e025      	b.n	8001202 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d018      	beq.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e0:	d106      	bne.n	80011f0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8cf 	bl	800138c <HCD_HC_IN_IRQHandler>
 80011ee:	e005      	b.n	80011fc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fcfd 	bl	8001bf6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3d4      	bcc.n	80011b6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f80c 	bl	8005238 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b10      	cmp	r3, #16
 8001228:	d101      	bne.n	800122e <HAL_HCD_IRQHandler+0x1d2>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_HCD_IRQHandler+0x1d4>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d014      	beq.n	800125e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0210 	bic.w	r2, r2, #16
 8001242:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 f84b 	bl	80022e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0210 	orr.w	r2, r2, #16
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e000      	b.n	800125e <HAL_HCD_IRQHandler+0x202>
      return;
 800125c:	bf00      	nop
    }
  }
}
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_HCD_Start+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e013      	b.n	80012a2 <HAL_HCD_Start+0x3e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fee3 	bl	8005052 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f004 f946 	bl	8005524 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_HCD_Stop+0x16>
 80012bc:	2302      	movs	r3, #2
 80012be:	e00d      	b.n	80012dc <HAL_HCD_Stop+0x32>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fd25 	bl	8005d1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 f8ed 	bl	80054d0 <USB_ResetPort>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	335c      	adds	r3, #92	; 0x5c
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	334c      	adds	r3, #76	; 0x4c
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f004 f92f 	bl	80055c4 <USB_GetCurrentFrame>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f004 f90a 	bl	8005596 <USB_GetHostSpeed>
 8001382:	4603      	mov	r3, r0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d119      	bne.n	80013f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c8:	461a      	mov	r2, r3
 80013ca:	2304      	movs	r3, #4
 80013cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	0151      	lsls	r1, r2, #5
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	440a      	add	r2, r1
 80013e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	60d3      	str	r3, [r2, #12]
 80013ee:	e0ce      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d12c      	bne.n	8001462 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	015a      	lsls	r2, r3, #5
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4413      	add	r3, r2
 8001410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001414:	461a      	mov	r2, r3
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	335d      	adds	r3, #93	; 0x5d
 800142c:	2207      	movs	r2, #7
 800142e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	0151      	lsls	r1, r2, #5
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	440a      	add	r2, r1
 8001446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fb23 	bl	8005aa6 <USB_HC_Halt>
 8001460:	e095      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4413      	add	r3, r2
 800146a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b20      	cmp	r3, #32
 8001476:	d109      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001484:	461a      	mov	r2, r3
 8001486:	2320      	movs	r3, #32
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	e080      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d134      	bne.n	800150c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	0151      	lsls	r1, r2, #5
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	440a      	add	r2, r1
 80014b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	335d      	adds	r3, #93	; 0x5d
 80014d2:	2205      	movs	r2, #5
 80014d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f4:	461a      	mov	r2, r3
 80014f6:	2308      	movs	r3, #8
 80014f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f004 face 	bl	8005aa6 <USB_HC_Halt>
 800150a:	e040      	b.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d134      	bne.n	800158e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	0151      	lsls	r1, r2, #5
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	440a      	add	r2, r1
 800153a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f004 faa9 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	461a      	mov	r2, r3
 8001562:	2310      	movs	r3, #16
 8001564:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	335d      	adds	r3, #93	; 0x5d
 8001576:	2208      	movs	r2, #8
 8001578:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d122      	bne.n	80015ec <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	0151      	lsls	r1, r2, #5
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	440a      	add	r2, r1
 80015bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fa68 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	461a      	mov	r2, r3
 80015e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015ea:	e300      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 80fd 	bne.w	80017fe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01b      	beq.n	8001644 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3348      	adds	r3, #72	; 0x48
 800161c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	0159      	lsls	r1, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	440b      	add	r3, r1
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001630:	1ad1      	subs	r1, r2, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4403      	add	r3, r0
 8001640:	334c      	adds	r3, #76	; 0x4c
 8001642:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	335d      	adds	r3, #93	; 0x5d
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3358      	adds	r3, #88	; 0x58
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4413      	add	r3, r2
 8001674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001678:	461a      	mov	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	333f      	adds	r3, #63	; 0x3f
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	333f      	adds	r3, #63	; 0x3f
 80016a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d121      	bne.n	80016ee <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	0151      	lsls	r1, r2, #5
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	440a      	add	r2, r1
 80016c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 f9e6 	bl	8005aa6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	461a      	mov	r2, r3
 80016e8:	2310      	movs	r3, #16
 80016ea:	6093      	str	r3, [r2, #8]
 80016ec:	e070      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	333f      	adds	r3, #63	; 0x3f
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d12a      	bne.n	800175a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	0151      	lsls	r1, r2, #5
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	440a      	add	r2, r1
 800171a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800171e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001722:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	335c      	adds	r3, #92	; 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	335c      	adds	r3, #92	; 0x5c
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4601      	mov	r1, r0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f00a fa08 	bl	800bb68 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001758:	e03a      	b.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	333f      	adds	r3, #63	; 0x3f
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12f      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335c      	adds	r3, #92	; 0x5c
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3350      	adds	r3, #80	; 0x50
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3350      	adds	r3, #80	; 0x50
 80017ac:	4602      	mov	r2, r0
 80017ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	335c      	adds	r3, #92	; 0x5c
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4601      	mov	r1, r0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f00a f9cc 	bl	800bb68 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3350      	adds	r3, #80	; 0x50
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f083 0301 	eor.w	r3, r3, #1
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3350      	adds	r3, #80	; 0x50
 80017f8:	4602      	mov	r2, r0
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	e1f7      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b02      	cmp	r3, #2
 8001812:	f040 811a 	bne.w	8001a4a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	0151      	lsls	r1, r2, #5
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	440a      	add	r2, r1
 800182c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001830:	f023 0302 	bic.w	r3, r3, #2
 8001834:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	335d      	adds	r3, #93	; 0x5d
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10a      	bne.n	8001862 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	335c      	adds	r3, #92	; 0x5c
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e0d9      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335d      	adds	r3, #93	; 0x5d
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10a      	bne.n	800188e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	335c      	adds	r3, #92	; 0x5c
 8001888:	2205      	movs	r2, #5
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e0c3      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	335d      	adds	r3, #93	; 0x5d
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d00a      	beq.n	80018ba <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	335d      	adds	r3, #93	; 0x5d
 80018b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d156      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3358      	adds	r3, #88	; 0x58
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4403      	add	r3, r0
 80018dc:	3358      	adds	r3, #88	; 0x58
 80018de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3358      	adds	r3, #88	; 0x58
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d914      	bls.n	8001920 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3358      	adds	r3, #88	; 0x58
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	335c      	adds	r3, #92	; 0x5c
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e009      	b.n	8001934 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	335c      	adds	r3, #92	; 0x5c
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800194a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e056      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	335d      	adds	r3, #93	; 0x5d
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d123      	bne.n	80019c6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335c      	adds	r3, #92	; 0x5c
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e027      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	335d      	adds	r3, #93	; 0x5d
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d11c      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3358      	adds	r3, #88	; 0x58
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4403      	add	r3, r0
 80019fe:	3358      	adds	r3, #88	; 0x58
 8001a00:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	335c      	adds	r3, #92	; 0x5c
 8001a12:	2204      	movs	r2, #4
 8001a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	2302      	movs	r3, #2
 8001a26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	335c      	adds	r3, #92	; 0x5c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4601      	mov	r1, r0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f00a f890 	bl	800bb68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a48:	e0d1      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d13e      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3358      	adds	r3, #88	; 0x58
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3358      	adds	r3, #88	; 0x58
 8001aa4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	335d      	adds	r3, #93	; 0x5d
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 ffee 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	6093      	str	r3, [r2, #8]
}
 8001adc:	e087      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d17c      	bne.n	8001bee <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	333f      	adds	r3, #63	; 0x3f
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d122      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3358      	adds	r3, #88	; 0x58
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 ffac 	bl	8005aa6 <USB_HC_Halt>
 8001b4e:	e045      	b.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333f      	adds	r3, #63	; 0x3f
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d12f      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3358      	adds	r3, #88	; 0x58
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	335d      	adds	r3, #93	; 0x5d
 8001ba8:	2203      	movs	r2, #3
 8001baa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 ff65 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	6093      	str	r3, [r2, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d119      	bne.n	8001c5a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2304      	movs	r3, #4
 8001c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	0151      	lsls	r1, r2, #5
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	440a      	add	r2, r1
 8001c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c58:	e33e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d141      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2320      	movs	r3, #32
 8001c80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	333d      	adds	r3, #61	; 0x3d
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 831f 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333d      	adds	r3, #61	; 0x3d
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	335c      	adds	r3, #92	; 0x5c
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 feda 	bl	8005aa6 <USB_HC_Halt>
}
 8001cf2:	e2f1      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d13f      	bne.n	8001d8a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	335d      	adds	r3, #93	; 0x5d
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333d      	adds	r3, #61	; 0x3d
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	0151      	lsls	r1, r2, #5
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fe98 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2340      	movs	r3, #64	; 0x40
 8001d86:	6093      	str	r3, [r2, #8]
}
 8001d88:	e2a6      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d122      	bne.n	8001de8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe6a 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	6093      	str	r3, [r2, #8]
}
 8001de6:	e277      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d135      	bne.n	8001e6a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3358      	adds	r3, #88	; 0x58
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	0151      	lsls	r1, r2, #5
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	440a      	add	r2, r1
 8001e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fe32 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	335d      	adds	r3, #93	; 0x5d
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
}
 8001e68:	e236      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d12b      	bne.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fdf2 	bl	8005aa6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335d      	adds	r3, #93	; 0x5d
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	e1ff      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d155      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3358      	adds	r3, #88	; 0x58
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	335d      	adds	r3, #93	; 0x5d
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	; 0x3d
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d114      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333d      	adds	r3, #61	; 0x3d
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fd90 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	e19e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d12b      	bne.n	8002008 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fd63 	bl	8005aa6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335d      	adds	r3, #93	; 0x5d
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	6093      	str	r3, [r2, #8]
}
 8002006:	e167      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d135      	bne.n	800208c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fd2b 	bl	8005aa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	e125      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 811a 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d137      	bne.n	800214a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	333f      	adds	r3, #63	; 0x3f
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d00b      	beq.n	800211c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	333f      	adds	r3, #63	; 0x3f
 8002114:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	f040 80c5 	bne.w	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3351      	adds	r3, #81	; 0x51
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3351      	adds	r3, #81	; 0x51
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e0ad      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335d      	adds	r3, #93	; 0x5d
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d10a      	bne.n	8002176 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e097      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	335d      	adds	r3, #93	; 0x5d
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d10a      	bne.n	80021a2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e081      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335d      	adds	r3, #93	; 0x5d
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10a      	bne.n	80021ce <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2205      	movs	r2, #5
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e06b      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	335d      	adds	r3, #93	; 0x5d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d00a      	beq.n	80021fa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335d      	adds	r3, #93	; 0x5d
 80021f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d155      	bne.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3358      	adds	r3, #88	; 0x58
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4403      	add	r3, r0
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d914      	bls.n	8002260 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	3358      	adds	r3, #88	; 0x58
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e009      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002292:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4601      	mov	r1, r0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f009 fc48 	bl	800bb68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HCD_RXQLVL_IRQHandler+0x44>
 800231c:	2b05      	cmp	r3, #5
 800231e:	f000 8082 	beq.w	8002426 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002322:	e083      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07f      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	; 0x44
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d074      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3344      	adds	r3, #68	; 0x44
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	b292      	uxth	r2, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f002 ff43 	bl	80051e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3344      	adds	r3, #68	; 0x44
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	18d1      	adds	r1, r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4403      	add	r3, r0
 8002384:	3344      	adds	r3, #68	; 0x44
 8002386:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	18d1      	adds	r1, r2, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4403      	add	r3, r0
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HCD_RXQLVL_IRQHandler+0x154>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d031      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	4602      	mov	r2, r0
 8002422:	701a      	strb	r2, [r3, #0]
      break;
 8002424:	e001      	b.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800242a:	bf00      	nop
  }
}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	1ff80000 	.word	0x1ff80000

08002438 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002464:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d10b      	bne.n	8002488 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f009 fb58 	bl	800bb30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d132      	bne.n	80024f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d126      	bne.n	80024f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d113      	bne.n	80024d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b6:	d106      	bne.n	80024c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 ffcc 	bl	800545c <USB_InitFSLSPClkSel>
 80024c4:	e011      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 ffc5 	bl	800545c <USB_InitFSLSPClkSel>
 80024d2:	e00a      	b.n	80024ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	461a      	mov	r2, r3
 80024e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f009 fb4e 	bl	800bb8c <HAL_HCD_PortEnabled_Callback>
 80024f0:	e002      	b.n	80024f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f009 fb58 	bl	800bba8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d103      	bne.n	800250a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e11f      	b.n	8002772 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f008 ff9e 	bl	800b488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f001 f9de 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_I2C_Init+0x25c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_I2C_Init+0x260>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_I2C_Init+0x264>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0db      	b.n	8002772 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_I2C_Init+0x268>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_I2C_Init+0x25c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_I2C_Init+0x26c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4956      	ldr	r1, [pc, #344]	; (800277c <HAL_I2C_Init+0x25c>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d80d      	bhi.n	8002644 <HAL_I2C_Init+0x124>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	bf38      	it	cc
 8002640:	2304      	movcc	r3, #4
 8002642:	e04f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_I2C_Init+0x150>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_I2C_Init+0x176>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x17e>
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_Init+0x1a4>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e58      	subs	r0, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Init+0x1c4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6911      	ldr	r1, [r2, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	000186a0 	.word	0x000186a0
 8002780:	001e847f 	.word	0x001e847f
 8002784:	003d08ff 	.word	0x003d08ff
 8002788:	431bde83 	.word	0x431bde83
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e128      	b.n	80029f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a90      	ldr	r2, [pc, #576]	; (80029fc <HAL_I2S_Init+0x26c>)
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f008 feab 	bl	800b518 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027d8:	f023 030f 	bic.w	r3, r3, #15
 80027dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2202      	movs	r2, #2
 80027e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d060      	beq.n	80028b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027f6:	2310      	movs	r3, #16
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e001      	b.n	8002800 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b20      	cmp	r3, #32
 8002806:	d802      	bhi.n	800280e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800280e:	2001      	movs	r0, #1
 8002810:	f001 f9d4 	bl	8003bbc <HAL_RCCEx_GetPeriphCLKFreq>
 8002814:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d125      	bne.n	800286c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d010      	beq.n	800284a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	3305      	adds	r3, #5
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e01f      	b.n	800288a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	fbb2 f2f3 	udiv	r2, r2, r3
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	3305      	adds	r3, #5
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e00e      	b.n	800288a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fbb2 f2f3 	udiv	r2, r2, r3
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	3305      	adds	r3, #5
 8002888:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_I2S_Init+0x270>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e003      	b.n	80028b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d902      	bls.n	80028c4 <HAL_I2S_Init+0x134>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	d907      	bls.n	80028d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0210 	orr.w	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e08f      	b.n	80029f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	ea42 0103 	orr.w	r1, r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028f2:	f023 030f 	bic.w	r3, r3, #15
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6851      	ldr	r1, [r2, #4]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6892      	ldr	r2, [r2, #8]
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6992      	ldr	r2, [r2, #24]
 800290a:	430a      	orrs	r2, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002916:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d161      	bne.n	80029e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_I2S_Init+0x274>)
 8002924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a37      	ldr	r2, [pc, #220]	; (8002a08 <HAL_I2S_Init+0x278>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_I2S_Init+0x1a4>
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_I2S_Init+0x27c>)
 8002932:	e001      	b.n	8002938 <HAL_I2S_Init+0x1a8>
 8002934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4932      	ldr	r1, [pc, #200]	; (8002a08 <HAL_I2S_Init+0x278>)
 8002940:	428a      	cmp	r2, r1
 8002942:	d101      	bne.n	8002948 <HAL_I2S_Init+0x1b8>
 8002944:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_I2S_Init+0x27c>)
 8002946:	e001      	b.n	800294c <HAL_I2S_Init+0x1bc>
 8002948:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800294c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002950:	f023 030f 	bic.w	r3, r3, #15
 8002954:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <HAL_I2S_Init+0x278>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_I2S_Init+0x1d4>
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_I2S_Init+0x27c>)
 8002962:	e001      	b.n	8002968 <HAL_I2S_Init+0x1d8>
 8002964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002968:	2202      	movs	r2, #2
 800296a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_I2S_Init+0x278>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_I2S_Init+0x1ea>
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_I2S_Init+0x27c>)
 8002978:	e001      	b.n	800297e <HAL_I2S_Init+0x1ee>
 800297a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298a:	d003      	beq.n	8002994 <HAL_I2S_Init+0x204>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e001      	b.n	80029a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	b299      	uxth	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029b6:	4303      	orrs	r3, r0
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	430b      	orrs	r3, r1
 80029bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029be:	4313      	orrs	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_I2S_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_I2S_Init+0x24c>
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_I2S_Init+0x27c>)
 80029da:	e001      	b.n	80029e0 <HAL_I2S_Init+0x250>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	897a      	ldrh	r2, [r7, #10]
 80029e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08002b07 	.word	0x08002b07
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	08002c1d 	.word	0x08002c1d
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40003400 	.word	0x40003400

08002a10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10e      	bne.n	8002aa0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ffb8 	bl	8002a10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	b292      	uxth	r2, r2
 8002abc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	1c9a      	adds	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10e      	bne.n	8002afe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff93 	bl	8002a24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d13a      	bne.n	8002b98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d109      	bne.n	8002b40 <I2S_IRQHandler+0x3a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d102      	bne.n	8002b40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffb4 	bl	8002aa8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d126      	bne.n	8002b98 <I2S_IRQHandler+0x92>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d11f      	bne.n	8002b98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff50 	bl	8002a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d136      	bne.n	8002c12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d109      	bne.n	8002bc2 <I2S_IRQHandler+0xbc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d102      	bne.n	8002bc2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff45 	bl	8002a4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d122      	bne.n	8002c12 <I2S_IRQHandler+0x10c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d11b      	bne.n	8002c12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002be8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff13 	bl	8002a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c36:	4ba2      	ldr	r3, [pc, #648]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c38:	e001      	b.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a9b      	ldr	r2, [pc, #620]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c56:	e001      	b.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c68:	d004      	beq.n	8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8099 	bne.w	8002da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d107      	bne.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f925 	bl	8002ed8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9c8 	bl	8003038 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d13a      	bne.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d035      	beq.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7e      	ldr	r2, [pc, #504]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cc6:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc8:	e001      	b.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4979      	ldr	r1, [pc, #484]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cd6:	428b      	cmp	r3, r1
 8002cd8:	d101      	bne.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cda:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cdc:	e001      	b.n	8002ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ce6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f043 0202 	orr.w	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fe88 	bl	8002a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	f040 80be 	bne.w	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80b8 	beq.w	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a59      	ldr	r2, [pc, #356]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d5a:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d5c:	e001      	b.n	8002d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4954      	ldr	r1, [pc, #336]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d6a:	428b      	cmp	r3, r1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d6e:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d70:	e001      	b.n	8002d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d7a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0204 	orr.w	r2, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fe4a 	bl	8002a38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002da4:	e084      	b.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8be 	bl	8002f3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8fd 	bl	8002fd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d12f      	bne.n	8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d02a      	beq.n	8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dfc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e0a:	e001      	b.n	8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4929      	ldr	r1, [pc, #164]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e1e:	e001      	b.n	8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fdfa 	bl	8002a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d131      	bne.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02c      	beq.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e64:	e001      	b.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4912      	ldr	r1, [pc, #72]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e72:	428b      	cmp	r3, r1
 8002e74:	d101      	bne.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e78:	e001      	b.n	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fdc5 	bl	8002a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eae:	e000      	b.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eb0:	bf00      	nop
}
 8002eb2:	bf00      	nop
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40003800 	.word	0x40003800
 8002ec0:	40003400 	.word	0x40003400

08002ec4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	1c99      	adds	r1, r3, #2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6251      	str	r1, [r2, #36]	; 0x24
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ffc9 	bl	8002ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c99      	adds	r1, r3, #2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6251      	str	r1, [r2, #36]	; 0x24
 8002f4e:	8819      	ldrh	r1, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <I2SEx_TxISR_I2SExt+0x90>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <I2SEx_TxISR_I2SExt+0x22>
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f5c:	e001      	b.n	8002f62 <I2SEx_TxISR_I2SExt+0x26>
 8002f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f62:	460a      	mov	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d121      	bne.n	8002fc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <I2SEx_TxISR_I2SExt+0x90>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <I2SEx_TxISR_I2SExt+0x50>
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f8a:	e001      	b.n	8002f90 <I2SEx_TxISR_I2SExt+0x54>
 8002f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <I2SEx_TxISR_I2SExt+0x90>)
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d101      	bne.n	8002fa0 <I2SEx_TxISR_I2SExt+0x64>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f9e:	e001      	b.n	8002fa4 <I2SEx_TxISR_I2SExt+0x68>
 8002fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff81 	bl	8002ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40003800 	.word	0x40003800
 8002fd0:	40003400 	.word	0x40003400

08002fd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68d8      	ldr	r0, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	1c99      	adds	r1, r3, #2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fec:	b282      	uxth	r2, r0
 8002fee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d113      	bne.n	8003030 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003016:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff4a 	bl	8002ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <I2SEx_RxISR_I2SExt+0x16>
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <I2SEx_RxISR_I2SExt+0x94>)
 800304c:	e001      	b.n	8003052 <I2SEx_RxISR_I2SExt+0x1a>
 800304e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003052:	68d8      	ldr	r0, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	1c99      	adds	r1, r3, #2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800305e:	b282      	uxth	r2, r0
 8003060:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d121      	bne.n	80030be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <I2SEx_RxISR_I2SExt+0x50>
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <I2SEx_RxISR_I2SExt+0x94>)
 8003086:	e001      	b.n	800308c <I2SEx_RxISR_I2SExt+0x54>
 8003088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	490d      	ldr	r1, [pc, #52]	; (80030c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d101      	bne.n	800309c <I2SEx_RxISR_I2SExt+0x64>
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <I2SEx_RxISR_I2SExt+0x94>)
 800309a:	e001      	b.n	80030a0 <I2SEx_RxISR_I2SExt+0x68>
 800309c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff03 	bl	8002ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40003800 	.word	0x40003800
 80030cc:	40003400 	.word	0x40003400

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e25b      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	4ba3      	ldr	r3, [pc, #652]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4ba0      	ldr	r3, [pc, #640]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b9d      	ldr	r3, [pc, #628]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b99      	ldr	r3, [pc, #612]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e236      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b8b      	ldr	r3, [pc, #556]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8a      	ldr	r2, [pc, #552]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a87      	ldr	r2, [pc, #540]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a80      	ldr	r2, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd f9d8 	bl	800053c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd f9d4 	bl	800053c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1fb      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b76      	ldr	r3, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd f9c4 	bl	800053c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd f9c0 	bl	800053c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1e7      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b6c      	ldr	r3, [pc, #432]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b62      	ldr	r3, [pc, #392]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b5c      	ldr	r3, [pc, #368]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1bb      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4952      	ldr	r1, [pc, #328]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd f979 	bl	800053c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd f975 	bl	800053c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e19c      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4940      	ldr	r1, [pc, #256]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd f958 	bl	800053c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fd f954 	bl	800053c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e17b      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d030      	beq.n	800331c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd f938 	bl	800053c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd f934 	bl	800053c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e15b      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fd f921 	bl	800053c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fd f91d 	bl	800053c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e144      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a0 	beq.w	800346a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d121      	bne.n	80033aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fd f8e3 	bl	800053c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e011      	b.n	800339e <HAL_RCC_OscConfig+0x2ce>
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
 8003388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd f8d6 	bl	800053c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0fd      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_OscConfig+0x4d4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
 80033b2:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x312>
 80033c8:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a76      	ldr	r2, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b74      	ldr	r3, [pc, #464]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a73      	ldr	r2, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033e2:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a70      	ldr	r2, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a6d      	ldr	r2, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd f89b 	bl	800053c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd f897 	bl	800053c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0bc      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x33a>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fd f885 	bl	800053c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd f881 	bl	800053c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0a6      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8092 	beq.w	8003598 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d05c      	beq.n	800353a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d141      	bne.n	800350c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_RCC_OscConfig+0x4dc>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd f855 	bl	800053c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd f851 	bl	800053c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e078      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4933      	ldr	r1, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd f82a 	bl	800053c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd f826 	bl	800053c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04d      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x41c>
 800350a:	e045      	b.n	8003598 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x4dc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd f813 	bl	800053c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd f80f 	bl	800053c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e036      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
 8003538:	e02e      	b.n	8003598 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e029      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_RCC_OscConfig+0x4d8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	429a      	cmp	r2, r3
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d115      	bne.n	8003594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003574:	4293      	cmp	r3, r2
 8003576:	d10d      	bne.n	8003594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470060 	.word	0x42470060

080035b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0cc      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d90c      	bls.n	80035ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0b8      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003604:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800360e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	494d      	ldr	r1, [pc, #308]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d044      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d119      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e07f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d003      	beq.n	800366e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	2b03      	cmp	r3, #3
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e067      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fc ff4c 	bl	800053c <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fc ff48 	bl	800053c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d20c      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e032      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4916      	ldr	r1, [pc, #88]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	490e      	ldr	r1, [pc, #56]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003736:	f000 f821 	bl	800377c <HAL_RCC_GetSysClockFreq>
 800373a:	4601      	mov	r1, r0
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	fa21 f303 	lsr.w	r3, r1, r3
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f008 f83c 	bl	800b7d4 <HAL_InitTick>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00
 800376c:	40023800 	.word	0x40023800
 8003770:	0800c358 	.word	0x0800c358
 8003774:	2000002c 	.word	0x2000002c
 8003778:	20000000 	.word	0x20000000

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	2300      	movs	r3, #0
 800378c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d007      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x32>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d008      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x38>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80b4 	bne.w	8003910 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b5e      	ldr	r3, [pc, #376]	; (8003924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037aa:	60bb      	str	r3, [r7, #8]
       break;
 80037ac:	e0b3      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ae:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037b0:	60bb      	str	r3, [r7, #8]
      break;
 80037b2:	e0b0      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04a      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	ea03 0501 	and.w	r5, r3, r1
 80037e0:	ea04 0602 	and.w	r6, r4, r2
 80037e4:	4629      	mov	r1, r5
 80037e6:	4632      	mov	r2, r6
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f04f 0400 	mov.w	r4, #0
 80037f0:	0154      	lsls	r4, r2, #5
 80037f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f6:	014b      	lsls	r3, r1, #5
 80037f8:	4619      	mov	r1, r3
 80037fa:	4622      	mov	r2, r4
 80037fc:	1b49      	subs	r1, r1, r5
 80037fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	0194      	lsls	r4, r2, #6
 800380c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003810:	018b      	lsls	r3, r1, #6
 8003812:	1a5b      	subs	r3, r3, r1
 8003814:	eb64 0402 	sbc.w	r4, r4, r2
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	00e2      	lsls	r2, r4, #3
 8003822:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003826:	00d9      	lsls	r1, r3, #3
 8003828:	460b      	mov	r3, r1
 800382a:	4614      	mov	r4, r2
 800382c:	195b      	adds	r3, r3, r5
 800382e:	eb44 0406 	adc.w	r4, r4, r6
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	0262      	lsls	r2, r4, #9
 800383c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003840:	0259      	lsls	r1, r3, #9
 8003842:	460b      	mov	r3, r1
 8003844:	4614      	mov	r4, r2
 8003846:	4618      	mov	r0, r3
 8003848:	4621      	mov	r1, r4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	461a      	mov	r2, r3
 8003852:	4623      	mov	r3, r4
 8003854:	f7fc fcbc 	bl	80001d0 <__aeabi_uldivmod>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e049      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	ea03 0501 	and.w	r5, r3, r1
 8003876:	ea04 0602 	and.w	r6, r4, r2
 800387a:	4629      	mov	r1, r5
 800387c:	4632      	mov	r2, r6
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	0154      	lsls	r4, r2, #5
 8003888:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800388c:	014b      	lsls	r3, r1, #5
 800388e:	4619      	mov	r1, r3
 8003890:	4622      	mov	r2, r4
 8003892:	1b49      	subs	r1, r1, r5
 8003894:	eb62 0206 	sbc.w	r2, r2, r6
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	0194      	lsls	r4, r2, #6
 80038a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	1a5b      	subs	r3, r3, r1
 80038aa:	eb64 0402 	sbc.w	r4, r4, r2
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	00e2      	lsls	r2, r4, #3
 80038b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038bc:	00d9      	lsls	r1, r3, #3
 80038be:	460b      	mov	r3, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	195b      	adds	r3, r3, r5
 80038c4:	eb44 0406 	adc.w	r4, r4, r6
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	02a2      	lsls	r2, r4, #10
 80038d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038d6:	0299      	lsls	r1, r3, #10
 80038d8:	460b      	mov	r3, r1
 80038da:	4614      	mov	r4, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	4621      	mov	r1, r4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	f7fc fc71 	bl	80001d0 <__aeabi_uldivmod>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	60bb      	str	r3, [r7, #8]
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003912:	60bb      	str	r3, [r7, #8]
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	68bb      	ldr	r3, [r7, #8]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	00f42400 	.word	0x00f42400
 8003928:	007a1200 	.word	0x007a1200

0800392c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_RCC_GetHCLKFreq+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2000002c 	.word	0x2000002c

08003944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003948:	f7ff fff0 	bl	800392c <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0a9b      	lsrs	r3, r3, #10
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	0800c368 	.word	0x0800c368

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003970:	f7ff ffdc 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003974:	4601      	mov	r1, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0b5b      	lsrs	r3, r3, #13
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4a03      	ldr	r2, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	0800c368 	.word	0x0800c368

08003994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	220f      	movs	r2, #15
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_GetClockConfig+0x5c>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0203 	and.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_RCC_GetClockConfig+0x5c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_RCC_GetClockConfig+0x60>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40023c00 	.word	0x40023c00

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d035      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a20:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a26:	f7fc fd89 	bl	800053c <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a2e:	f7fc fd85 	bl	800053c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0b0      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a40:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	019a      	lsls	r2, r3, #6
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	071b      	lsls	r3, r3, #28
 8003a58:	4955      	ldr	r1, [pc, #340]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a60:	4b52      	ldr	r3, [pc, #328]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a66:	f7fc fd69 	bl	800053c <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a6e:	f7fc fd65 	bl	800053c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e090      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8083 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a43      	ldr	r2, [pc, #268]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3e      	ldr	r2, [pc, #248]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac2:	f7fc fd3b 	bl	800053c <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fc fd37 	bl	800053c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e062      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d028      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b06:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fc fd05 	bl	800053c <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fc fd01 	bl	800053c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e02a      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b64:	d10d      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b8c:	6093      	str	r3, [r2, #8]
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	4905      	ldr	r1, [pc, #20]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	42470068 	.word	0x42470068
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	42470e40 	.word	0x42470e40

08003bbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d13d      	bne.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d12f      	bne.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003bf0:	617b      	str	r3, [r7, #20]
          break;
 8003bf2:	e02f      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d108      	bne.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e007      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3e:	0f1b      	lsrs	r3, r3, #28
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
          break;
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
          break;
 8003c52:	bf00      	nop
        }
      }
      break;
 8003c54:	bf00      	nop
    }
  }
  return frequency;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40023800 	.word	0x40023800
 8003c68:	00bb8000 	.word	0x00bb8000
 8003c6c:	007a1200 	.word	0x007a1200
 8003c70:	00f42400 	.word	0x00f42400

08003c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e056      	b.n	8003d34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f007 fca1 	bl	800b5e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	f003 0104 	and.w	r1, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e01d      	b.n	8003d8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f815 	bl	8003d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f968 	bl	8004050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d007      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d122      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d11b      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f06f 0202 	mvn.w	r2, #2
 8003e1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8ee 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003e36:	e005      	b.n	8003e44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8e0 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8f1 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d122      	bne.n	8003e9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d11b      	bne.n	8003e9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0204 	mvn.w	r2, #4
 8003e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8c4 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003e8a:	e005      	b.n	8003e98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8b6 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8c7 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d122      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0208 	mvn.w	r2, #8
 8003ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f89a 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003ede:	e005      	b.n	8003eec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f88c 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f89d 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d122      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d11b      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f06f 0210 	mvn.w	r2, #16
 8003f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f870 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003f32:	e005      	b.n	8003f40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f862 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f873 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0201 	mvn.w	r2, #1
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f007 fa49 	bl	800b404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f903 	bl	80041a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f838 	bl	800403a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0220 	mvn.w	r2, #32
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8cd 	bl	8004190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a40      	ldr	r2, [pc, #256]	; (8004164 <TIM_Base_SetConfig+0x114>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3d      	ldr	r2, [pc, #244]	; (8004168 <TIM_Base_SetConfig+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3c      	ldr	r2, [pc, #240]	; (800416c <TIM_Base_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3b      	ldr	r2, [pc, #236]	; (8004170 <TIM_Base_SetConfig+0x120>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <TIM_Base_SetConfig+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <TIM_Base_SetConfig+0x114>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d027      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <TIM_Base_SetConfig+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d023      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2b      	ldr	r2, [pc, #172]	; (800416c <TIM_Base_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <TIM_Base_SetConfig+0x120>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <TIM_Base_SetConfig+0x124>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <TIM_Base_SetConfig+0x128>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <TIM_Base_SetConfig+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <TIM_Base_SetConfig+0x134>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <TIM_Base_SetConfig+0x138>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <TIM_Base_SetConfig+0x13c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800
 8004184:	40001800 	.word	0x40001800
 8004188:	40001c00 	.word	0x40001c00
 800418c:	40002000 	.word	0x40002000

08004190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e03f      	b.n	800424a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f007 fa4a 	bl	800b678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb4b 	bl	8004898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b088      	sub	sp, #32
 8004256:	af02      	add	r7, sp, #8
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 8083 	bne.w	800437a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Transmit+0x2e>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e07b      	b.n	800437c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UART_Transmit+0x40>
 800428e:	2302      	movs	r3, #2
 8004290:	e074      	b.n	800437c <HAL_UART_Transmit+0x12a>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2221      	movs	r2, #33	; 0x21
 80042a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042a8:	f7fc f948 	bl	800053c <HAL_GetTick>
 80042ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042c2:	e042      	b.n	800434a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d122      	bne.n	8004322 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f96a 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e042      	b.n	800437c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004308:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3302      	adds	r3, #2
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e017      	b.n	800434a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3301      	adds	r3, #1
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	e013      	b.n	800434a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2200      	movs	r2, #0
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f947 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e01f      	b.n	800437c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	60ba      	str	r2, [r7, #8]
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1b7      	bne.n	80042c4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f92e 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e006      	b.n	800437c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_UART_IRQHandler+0x52>
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9e0 	bl	8004794 <UART_Receive_IT>
      return;
 80043d4:	e0d1      	b.n	800457a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80b0 	beq.w	800453e <HAL_UART_IRQHandler+0x1ba>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_UART_IRQHandler+0x70>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a5 	beq.w	800453e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_UART_IRQHandler+0x90>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_UART_IRQHandler+0xb0>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	f043 0202 	orr.w	r2, r3, #2
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_UART_IRQHandler+0xd0>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00f      	beq.n	800447e <HAL_UART_IRQHandler+0xfa>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_UART_IRQHandler+0xee>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d078      	beq.n	8004578 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_UART_IRQHandler+0x11c>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f97a 	bl	8004794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_UART_IRQHandler+0x144>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d031      	beq.n	800452c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8c3 	bl	8004654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d123      	bne.n	8004524 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <HAL_UART_IRQHandler+0x1fc>)
 80044fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc f92b 	bl	800075c <HAL_DMA_Abort_IT>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004516:	4610      	mov	r0, r2
 8004518:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451a:	e00e      	b.n	800453a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f845 	bl	80045ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004522:	e00a      	b.n	800453a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f841 	bl	80045ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452a:	e006      	b.n	800453a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f83d 	bl	80045ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004538:	e01e      	b.n	8004578 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453a:	bf00      	nop
    return;
 800453c:	e01c      	b.n	8004578 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_UART_IRQHandler+0x1d6>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8b0 	bl	80046b8 <UART_Transmit_IT>
    return;
 8004558:	e00f      	b.n	800457a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_UART_IRQHandler+0x1f6>
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8f8 	bl	8004764 <UART_EndTransmit_IT>
    return;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004578:	bf00      	nop
  }
}
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08004691 	.word	0x08004691

08004584 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	e02c      	b.n	800462c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d028      	beq.n	800462c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045e0:	f7fb ffac 	bl	800053c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21d      	bcs.n	800462c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e00f      	b.n	800464c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4013      	ands	r3, r2
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	429a      	cmp	r2, r3
 8004648:	d0c3      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800466a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff7e 	bl	80045ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b21      	cmp	r3, #33	; 0x21
 80046ca:	d144      	bne.n	8004756 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d11a      	bne.n	800470c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]
 80046fe:	e00e      	b.n	800471e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]
 800470a:	e008      	b.n	800471e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	1c59      	adds	r1, r3, #1
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6211      	str	r1, [r2, #32]
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4619      	mov	r1, r3
 800472c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004740:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004750:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
  }
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fefd 	bl	8004584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b22      	cmp	r3, #34	; 0x22
 80047a6:	d171      	bne.n	800488c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d123      	bne.n	80047fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10e      	bne.n	80047de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	e029      	b.n	8004832 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
 80047f8:	e01b      	b.n	8004832 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6858      	ldr	r0, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	1c59      	adds	r1, r3, #1
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6291      	str	r1, [r2, #40]	; 0x28
 8004812:	b2c2      	uxtb	r2, r0
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e00c      	b.n	8004832 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	1c58      	adds	r0, r3, #1
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	6288      	str	r0, [r1, #40]	; 0x28
 800482a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004842:	2b00      	cmp	r3, #0
 8004844:	d120      	bne.n	8004888 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0220 	bic.w	r2, r2, #32
 8004854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe8a 	bl	8004598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e002      	b.n	800488e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048da:	f023 030c 	bic.w	r3, r3, #12
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004906:	f040 818b 	bne.w	8004c20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4ac1      	ldr	r2, [pc, #772]	; (8004c14 <UART_SetConfig+0x37c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d005      	beq.n	8004920 <UART_SetConfig+0x88>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4abf      	ldr	r2, [pc, #764]	; (8004c18 <UART_SetConfig+0x380>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f040 80bd 	bne.w	8004a9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004920:	f7ff f824 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 8004924:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	461d      	mov	r5, r3
 800492a:	f04f 0600 	mov.w	r6, #0
 800492e:	46a8      	mov	r8, r5
 8004930:	46b1      	mov	r9, r6
 8004932:	eb18 0308 	adds.w	r3, r8, r8
 8004936:	eb49 0409 	adc.w	r4, r9, r9
 800493a:	4698      	mov	r8, r3
 800493c:	46a1      	mov	r9, r4
 800493e:	eb18 0805 	adds.w	r8, r8, r5
 8004942:	eb49 0906 	adc.w	r9, r9, r6
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004952:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004956:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800495a:	4688      	mov	r8, r1
 800495c:	4691      	mov	r9, r2
 800495e:	eb18 0005 	adds.w	r0, r8, r5
 8004962:	eb49 0106 	adc.w	r1, r9, r6
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	461d      	mov	r5, r3
 800496c:	f04f 0600 	mov.w	r6, #0
 8004970:	196b      	adds	r3, r5, r5
 8004972:	eb46 0406 	adc.w	r4, r6, r6
 8004976:	461a      	mov	r2, r3
 8004978:	4623      	mov	r3, r4
 800497a:	f7fb fc29 	bl	80001d0 <__aeabi_uldivmod>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	461a      	mov	r2, r3
 8004984:	4ba5      	ldr	r3, [pc, #660]	; (8004c1c <UART_SetConfig+0x384>)
 8004986:	fba3 2302 	umull	r2, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	461d      	mov	r5, r3
 8004994:	f04f 0600 	mov.w	r6, #0
 8004998:	46a9      	mov	r9, r5
 800499a:	46b2      	mov	sl, r6
 800499c:	eb19 0309 	adds.w	r3, r9, r9
 80049a0:	eb4a 040a 	adc.w	r4, sl, sl
 80049a4:	4699      	mov	r9, r3
 80049a6:	46a2      	mov	sl, r4
 80049a8:	eb19 0905 	adds.w	r9, r9, r5
 80049ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c4:	4689      	mov	r9, r1
 80049c6:	4692      	mov	sl, r2
 80049c8:	eb19 0005 	adds.w	r0, r9, r5
 80049cc:	eb4a 0106 	adc.w	r1, sl, r6
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	461d      	mov	r5, r3
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	196b      	adds	r3, r5, r5
 80049dc:	eb46 0406 	adc.w	r4, r6, r6
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	f7fb fbf4 	bl	80001d0 <__aeabi_uldivmod>
 80049e8:	4603      	mov	r3, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <UART_SetConfig+0x384>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	; 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	3332      	adds	r3, #50	; 0x32
 8004a02:	4a86      	ldr	r2, [pc, #536]	; (8004c1c <UART_SetConfig+0x384>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a10:	4498      	add	r8, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	461d      	mov	r5, r3
 8004a16:	f04f 0600 	mov.w	r6, #0
 8004a1a:	46a9      	mov	r9, r5
 8004a1c:	46b2      	mov	sl, r6
 8004a1e:	eb19 0309 	adds.w	r3, r9, r9
 8004a22:	eb4a 040a 	adc.w	r4, sl, sl
 8004a26:	4699      	mov	r9, r3
 8004a28:	46a2      	mov	sl, r4
 8004a2a:	eb19 0905 	adds.w	r9, r9, r5
 8004a2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a46:	4689      	mov	r9, r1
 8004a48:	4692      	mov	sl, r2
 8004a4a:	eb19 0005 	adds.w	r0, r9, r5
 8004a4e:	eb4a 0106 	adc.w	r1, sl, r6
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	461d      	mov	r5, r3
 8004a58:	f04f 0600 	mov.w	r6, #0
 8004a5c:	196b      	adds	r3, r5, r5
 8004a5e:	eb46 0406 	adc.w	r4, r6, r6
 8004a62:	461a      	mov	r2, r3
 8004a64:	4623      	mov	r3, r4
 8004a66:	f7fb fbb3 	bl	80001d0 <__aeabi_uldivmod>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <UART_SetConfig+0x384>)
 8004a72:	fba3 1302 	umull	r1, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2164      	movs	r1, #100	; 0x64
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	3332      	adds	r3, #50	; 0x32
 8004a84:	4a65      	ldr	r2, [pc, #404]	; (8004c1c <UART_SetConfig+0x384>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 0207 	and.w	r2, r3, #7
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4442      	add	r2, r8
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	e26f      	b.n	8004f7a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7fe ff53 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8004a9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	f04f 0600 	mov.w	r6, #0
 8004aa8:	46a8      	mov	r8, r5
 8004aaa:	46b1      	mov	r9, r6
 8004aac:	eb18 0308 	adds.w	r3, r8, r8
 8004ab0:	eb49 0409 	adc.w	r4, r9, r9
 8004ab4:	4698      	mov	r8, r3
 8004ab6:	46a1      	mov	r9, r4
 8004ab8:	eb18 0805 	adds.w	r8, r8, r5
 8004abc:	eb49 0906 	adc.w	r9, r9, r6
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004acc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ad0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad4:	4688      	mov	r8, r1
 8004ad6:	4691      	mov	r9, r2
 8004ad8:	eb18 0005 	adds.w	r0, r8, r5
 8004adc:	eb49 0106 	adc.w	r1, r9, r6
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	f04f 0600 	mov.w	r6, #0
 8004aea:	196b      	adds	r3, r5, r5
 8004aec:	eb46 0406 	adc.w	r4, r6, r6
 8004af0:	461a      	mov	r2, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	f7fb fb6c 	bl	80001d0 <__aeabi_uldivmod>
 8004af8:	4603      	mov	r3, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <UART_SetConfig+0x384>)
 8004b00:	fba3 2302 	umull	r2, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	461d      	mov	r5, r3
 8004b0e:	f04f 0600 	mov.w	r6, #0
 8004b12:	46a9      	mov	r9, r5
 8004b14:	46b2      	mov	sl, r6
 8004b16:	eb19 0309 	adds.w	r3, r9, r9
 8004b1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b1e:	4699      	mov	r9, r3
 8004b20:	46a2      	mov	sl, r4
 8004b22:	eb19 0905 	adds.w	r9, r9, r5
 8004b26:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b3e:	4689      	mov	r9, r1
 8004b40:	4692      	mov	sl, r2
 8004b42:	eb19 0005 	adds.w	r0, r9, r5
 8004b46:	eb4a 0106 	adc.w	r1, sl, r6
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	461d      	mov	r5, r3
 8004b50:	f04f 0600 	mov.w	r6, #0
 8004b54:	196b      	adds	r3, r5, r5
 8004b56:	eb46 0406 	adc.w	r4, r6, r6
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	f7fb fb37 	bl	80001d0 <__aeabi_uldivmod>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <UART_SetConfig+0x384>)
 8004b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2164      	movs	r1, #100	; 0x64
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	3332      	adds	r3, #50	; 0x32
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <UART_SetConfig+0x384>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b8a:	4498      	add	r8, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	461d      	mov	r5, r3
 8004b90:	f04f 0600 	mov.w	r6, #0
 8004b94:	46a9      	mov	r9, r5
 8004b96:	46b2      	mov	sl, r6
 8004b98:	eb19 0309 	adds.w	r3, r9, r9
 8004b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	46a2      	mov	sl, r4
 8004ba4:	eb19 0905 	adds.w	r9, r9, r5
 8004ba8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bc0:	4689      	mov	r9, r1
 8004bc2:	4692      	mov	sl, r2
 8004bc4:	eb19 0005 	adds.w	r0, r9, r5
 8004bc8:	eb4a 0106 	adc.w	r1, sl, r6
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	461d      	mov	r5, r3
 8004bd2:	f04f 0600 	mov.w	r6, #0
 8004bd6:	196b      	adds	r3, r5, r5
 8004bd8:	eb46 0406 	adc.w	r4, r6, r6
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	f7fb faf6 	bl	80001d0 <__aeabi_uldivmod>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <UART_SetConfig+0x384>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <UART_SetConfig+0x384>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 0207 	and.w	r2, r3, #7
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4442      	add	r2, r8
 8004c10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c12:	e1b2      	b.n	8004f7a <UART_SetConfig+0x6e2>
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4ad7      	ldr	r2, [pc, #860]	; (8004f84 <UART_SetConfig+0x6ec>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d005      	beq.n	8004c36 <UART_SetConfig+0x39e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4ad6      	ldr	r2, [pc, #856]	; (8004f88 <UART_SetConfig+0x6f0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f040 80d1 	bne.w	8004dd8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c36:	f7fe fe99 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 8004c3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	469a      	mov	sl, r3
 8004c40:	f04f 0b00 	mov.w	fp, #0
 8004c44:	46d0      	mov	r8, sl
 8004c46:	46d9      	mov	r9, fp
 8004c48:	eb18 0308 	adds.w	r3, r8, r8
 8004c4c:	eb49 0409 	adc.w	r4, r9, r9
 8004c50:	4698      	mov	r8, r3
 8004c52:	46a1      	mov	r9, r4
 8004c54:	eb18 080a 	adds.w	r8, r8, sl
 8004c58:	eb49 090b 	adc.w	r9, r9, fp
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c70:	4688      	mov	r8, r1
 8004c72:	4691      	mov	r9, r2
 8004c74:	eb1a 0508 	adds.w	r5, sl, r8
 8004c78:	eb4b 0609 	adc.w	r6, fp, r9
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4619      	mov	r1, r3
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	f04f 0400 	mov.w	r4, #0
 8004c8e:	0094      	lsls	r4, r2, #2
 8004c90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c94:	008b      	lsls	r3, r1, #2
 8004c96:	461a      	mov	r2, r3
 8004c98:	4623      	mov	r3, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	f7fb fa97 	bl	80001d0 <__aeabi_uldivmod>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4bb8      	ldr	r3, [pc, #736]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004caa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	469b      	mov	fp, r3
 8004cb8:	f04f 0c00 	mov.w	ip, #0
 8004cbc:	46d9      	mov	r9, fp
 8004cbe:	46e2      	mov	sl, ip
 8004cc0:	eb19 0309 	adds.w	r3, r9, r9
 8004cc4:	eb4a 040a 	adc.w	r4, sl, sl
 8004cc8:	4699      	mov	r9, r3
 8004cca:	46a2      	mov	sl, r4
 8004ccc:	eb19 090b 	adds.w	r9, r9, fp
 8004cd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ce8:	4689      	mov	r9, r1
 8004cea:	4692      	mov	sl, r2
 8004cec:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf0:	eb4c 060a 	adc.w	r6, ip, sl
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	0094      	lsls	r4, r2, #2
 8004d08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	4628      	mov	r0, r5
 8004d14:	4631      	mov	r1, r6
 8004d16:	f7fb fa5b 	bl	80001d0 <__aeabi_uldivmod>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4b9a      	ldr	r3, [pc, #616]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004d22:	fba3 1302 	umull	r1, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2164      	movs	r1, #100	; 0x64
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a95      	ldr	r2, [pc, #596]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	4498      	add	r8, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	469b      	mov	fp, r3
 8004d46:	f04f 0c00 	mov.w	ip, #0
 8004d4a:	46d9      	mov	r9, fp
 8004d4c:	46e2      	mov	sl, ip
 8004d4e:	eb19 0309 	adds.w	r3, r9, r9
 8004d52:	eb4a 040a 	adc.w	r4, sl, sl
 8004d56:	4699      	mov	r9, r3
 8004d58:	46a2      	mov	sl, r4
 8004d5a:	eb19 090b 	adds.w	r9, r9, fp
 8004d5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d76:	4689      	mov	r9, r1
 8004d78:	4692      	mov	sl, r2
 8004d7a:	eb1b 0509 	adds.w	r5, fp, r9
 8004d7e:	eb4c 060a 	adc.w	r6, ip, sl
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	0094      	lsls	r4, r2, #2
 8004d96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d9a:	008b      	lsls	r3, r1, #2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	4631      	mov	r1, r6
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_uldivmod>
 8004da8:	4603      	mov	r3, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b77      	ldr	r3, [pc, #476]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a72      	ldr	r2, [pc, #456]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4442      	add	r2, r8
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	e0d0      	b.n	8004f7a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd8:	f7fe fdb4 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8004ddc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	469a      	mov	sl, r3
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	46d0      	mov	r8, sl
 8004de8:	46d9      	mov	r9, fp
 8004dea:	eb18 0308 	adds.w	r3, r8, r8
 8004dee:	eb49 0409 	adc.w	r4, r9, r9
 8004df2:	4698      	mov	r8, r3
 8004df4:	46a1      	mov	r9, r4
 8004df6:	eb18 080a 	adds.w	r8, r8, sl
 8004dfa:	eb49 090b 	adc.w	r9, r9, fp
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e12:	4688      	mov	r8, r1
 8004e14:	4691      	mov	r9, r2
 8004e16:	eb1a 0508 	adds.w	r5, sl, r8
 8004e1a:	eb4b 0609 	adc.w	r6, fp, r9
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4619      	mov	r1, r3
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	0094      	lsls	r4, r2, #2
 8004e32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e36:	008b      	lsls	r3, r1, #2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	4631      	mov	r1, r6
 8004e40:	f7fb f9c6 	bl	80001d0 <__aeabi_uldivmod>
 8004e44:	4603      	mov	r3, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	469b      	mov	fp, r3
 8004e5a:	f04f 0c00 	mov.w	ip, #0
 8004e5e:	46d9      	mov	r9, fp
 8004e60:	46e2      	mov	sl, ip
 8004e62:	eb19 0309 	adds.w	r3, r9, r9
 8004e66:	eb4a 040a 	adc.w	r4, sl, sl
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	46a2      	mov	sl, r4
 8004e6e:	eb19 090b 	adds.w	r9, r9, fp
 8004e72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e8a:	4689      	mov	r9, r1
 8004e8c:	4692      	mov	sl, r2
 8004e8e:	eb1b 0509 	adds.w	r5, fp, r9
 8004e92:	eb4c 060a 	adc.w	r6, ip, sl
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f04f 0400 	mov.w	r4, #0
 8004ea8:	0094      	lsls	r4, r2, #2
 8004eaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	f7fb f98a 	bl	80001d0 <__aeabi_uldivmod>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	2164      	movs	r1, #100	; 0x64
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	3332      	adds	r3, #50	; 0x32
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee2:	4498      	add	r8, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	469b      	mov	fp, r3
 8004ee8:	f04f 0c00 	mov.w	ip, #0
 8004eec:	46d9      	mov	r9, fp
 8004eee:	46e2      	mov	sl, ip
 8004ef0:	eb19 0309 	adds.w	r3, r9, r9
 8004ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef8:	4699      	mov	r9, r3
 8004efa:	46a2      	mov	sl, r4
 8004efc:	eb19 090b 	adds.w	r9, r9, fp
 8004f00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f18:	4689      	mov	r9, r1
 8004f1a:	4692      	mov	sl, r2
 8004f1c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f20:	eb4c 060a 	adc.w	r6, ip, sl
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 0400 	mov.w	r4, #0
 8004f36:	0094      	lsls	r4, r2, #2
 8004f38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f3c:	008b      	lsls	r3, r1, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4623      	mov	r3, r4
 8004f42:	4628      	mov	r0, r5
 8004f44:	4631      	mov	r1, r6
 8004f46:	f7fb f943 	bl	80001d0 <__aeabi_uldivmod>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004f52:	fba3 1302 	umull	r1, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2164      	movs	r1, #100	; 0x64
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	3332      	adds	r3, #50	; 0x32
 8004f64:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <UART_SetConfig+0x6f4>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4442      	add	r2, r8
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	e7ff      	b.n	8004f7a <UART_SetConfig+0x6e2>
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	51eb851f 	.word	0x51eb851f

08004f90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f90:	b084      	sub	sp, #16
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	f107 001c 	add.w	r0, r7, #28
 8004f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d122      	bne.n	8004fee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f94a 	bl	800527c <USB_CoreReset>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	e01a      	b.n	8005024 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f93e 	bl	800527c <USB_CoreReset>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
 8005016:	e005      	b.n	8005024 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10b      	bne.n	8005042 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f043 0206 	orr.w	r2, r3, #6
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504e:	b004      	add	sp, #16
 8005050:	4770      	bx	lr

08005052 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 0201 	bic.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e00b      	b.n	80050da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
 80050d4:	e001      	b.n	80050da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e003      	b.n	80050e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050da:	2032      	movs	r0, #50	; 0x32
 80050dc:	f7fb fa3a 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <USB_FlushTxFifo+0x48>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d0f0      	beq.n	8005106 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	00030d40 	.word	0x00030d40

08005138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2210      	movs	r2, #16
 8005148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <USB_FlushRxFifo+0x40>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e006      	b.n	800516a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b10      	cmp	r3, #16
 8005166:	d0f0      	beq.n	800514a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	00030d40 	.word	0x00030d40

0800517c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	460b      	mov	r3, r1
 800518c:	71fb      	strb	r3, [r7, #7]
 800518e:	4613      	mov	r3, r2
 8005190:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800519a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11a      	bne.n	80051d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051a2:	88bb      	ldrh	r3, [r7, #4]
 80051a4:	3303      	adds	r3, #3
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e00f      	b.n	80051d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	031a      	lsls	r2, r3, #12
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	461a      	mov	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3304      	adds	r3, #4
 80051c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	3301      	adds	r3, #1
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3eb      	bcc.n	80051b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b089      	sub	sp, #36	; 0x24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	3303      	adds	r3, #3
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e00b      	b.n	8005222 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	601a      	str	r2, [r3, #0]
    pDest++;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3304      	adds	r3, #4
 800521a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	3301      	adds	r3, #1
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	429a      	cmp	r2, r3
 8005228:	d3ef      	bcc.n	800520a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3724      	adds	r7, #36	; 0x24
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0301 	and.w	r3, r3, #1
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <USB_CoreReset+0x64>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e01b      	b.n	80052d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	daf2      	bge.n	8005288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <USB_CoreReset+0x64>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d0f0      	beq.n	80052b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	00030d40 	.word	0x00030d40

080052e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e4:	b084      	sub	sp, #16
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	f107 001c 	add.w	r0, r7, #28
 80052f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d018      	beq.n	8005368 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10a      	bne.n	8005352 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e014      	b.n	800537c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005360:	f023 0304 	bic.w	r3, r3, #4
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e009      	b.n	800537c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005376:	f023 0304 	bic.w	r3, r3, #4
 800537a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800537c:	2110      	movs	r1, #16
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff feb4 	bl	80050ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fed7 	bl	8005138 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e015      	b.n	80053bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b0:	461a      	mov	r2, r3
 80053b2:	2300      	movs	r3, #0
 80053b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3e5      	bcc.n	8005390 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80053c4:	2101      	movs	r1, #1
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8ac 	bl	8005524 <USB_DriveVbus>

  HAL_Delay(200U);
 80053cc:	20c8      	movs	r0, #200	; 0xc8
 80053ce:	f7fb f8c1 	bl	8000554 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a14      	ldr	r2, [pc, #80]	; (8005448 <USB_HostInit+0x164>)
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <USB_HostInit+0x168>)
 80053fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005402:	e009      	b.n	8005418 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a10      	ldr	r2, [pc, #64]	; (8005450 <USB_HostInit+0x16c>)
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <USB_HostInit+0x170>)
 8005414:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f043 0210 	orr.w	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <USB_HostInit+0x174>)
 8005430:	4313      	orrs	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005442:	b004      	add	sp, #16
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	01000200 	.word	0x01000200
 800544c:	00e00300 	.word	0x00e00300
 8005450:	00600080 	.word	0x00600080
 8005454:	004000e0 	.word	0x004000e0
 8005458:	a3200008 	.word	0xa3200008

0800545c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a4:	461a      	mov	r2, r3
 80054a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e009      	b.n	80054c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d106      	bne.n	80054c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	461a      	mov	r2, r3
 80054bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80054c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005500:	2064      	movs	r0, #100	; 0x64
 8005502:	f7fb f827 	bl	8000554 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800550e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005512:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005514:	200a      	movs	r0, #10
 8005516:	f7fb f81d 	bl	8000554 <HAL_Delay>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005548:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <USB_DriveVbus+0x44>
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d106      	bne.n	8005568 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005566:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d109      	bne.n	8005588 <USB_DriveVbus+0x64>
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005586:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	0c5b      	lsrs	r3, r3, #17
 80055b4:	f003 0303 	and.w	r3, r3, #3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	b29b      	uxth	r3, r3
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	70fb      	strb	r3, [r7, #3]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70bb      	strb	r3, [r7, #2]
 80055fe:	4613      	mov	r3, r2
 8005600:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	f04f 33ff 	mov.w	r3, #4294967295
 800561c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800561e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005622:	2b03      	cmp	r3, #3
 8005624:	d87e      	bhi.n	8005724 <USB_HC_Init+0x13c>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <USB_HC_Init+0x44>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800563d 	.word	0x0800563d
 8005630:	080056e7 	.word	0x080056e7
 8005634:	0800563d 	.word	0x0800563d
 8005638:	080056a9 	.word	0x080056a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	461a      	mov	r2, r3
 800564a:	f240 439d 	movw	r3, #1181	; 0x49d
 800564e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	da10      	bge.n	800567a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005676:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005678:	e057      	b.n	800572a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d051      	beq.n	800572a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056a4:	60d3      	str	r3, [r2, #12]
      break;
 80056a6:	e040      	b.n	800572a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	461a      	mov	r2, r3
 80056b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80056ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da34      	bge.n	800572e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056e4:	e023      	b.n	800572e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	f240 2325 	movw	r3, #549	; 0x225
 80056f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	da17      	bge.n	8005732 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	440a      	add	r2, r1
 8005718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005720:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005722:	e006      	b.n	8005732 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
      break;
 8005728:	e004      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 8005732:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800574e:	4313      	orrs	r3, r2
 8005750:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800575e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005762:	2b00      	cmp	r3, #0
 8005764:	da03      	bge.n	800576e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	e001      	b.n	8005772 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d103      	bne.n	8005782 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800577a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e001      	b.n	8005786 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005786:	787b      	ldrb	r3, [r7, #1]
 8005788:	059b      	lsls	r3, r3, #22
 800578a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800578e:	78bb      	ldrb	r3, [r7, #2]
 8005790:	02db      	lsls	r3, r3, #11
 8005792:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005796:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800579c:	049b      	lsls	r3, r3, #18
 800579e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	440b      	add	r3, r1
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057c2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80057c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d10f      	bne.n	80057ec <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005818:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d028      	beq.n	8005878 <USB_HC_StartXfer+0x7c>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d124      	bne.n	8005878 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <USB_HC_StartXfer+0x50>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	795b      	ldrb	r3, [r3, #5]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	4619      	mov	r1, r3
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa2e 	bl	8005ca4 <USB_DoPing>
      return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e112      	b.n	8005a72 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d112      	bne.n	8005878 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	440a      	add	r2, r1
 8005868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005870:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d018      	beq.n	80058b2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	8912      	ldrh	r2, [r2, #8]
 8005888:	4413      	add	r3, r2
 800588a:	3b01      	subs	r3, #1
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	8912      	ldrh	r2, [r2, #8]
 8005890:	fbb3 f3f2 	udiv	r3, r3, r2
 8005894:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005898:	8b7b      	ldrh	r3, [r7, #26]
 800589a:	429a      	cmp	r2, r3
 800589c:	d90b      	bls.n	80058b6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800589e:	8b7b      	ldrh	r3, [r7, #26]
 80058a0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80058a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	8912      	ldrh	r2, [r2, #8]
 80058a8:	fb02 f203 	mul.w	r2, r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	e001      	b.n	80058b6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80058b2:	2301      	movs	r3, #1
 80058b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	78db      	ldrb	r3, [r3, #3]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80058be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	8912      	ldrh	r2, [r2, #8]
 80058c4:	fb02 f203 	mul.w	r2, r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058d6:	04d9      	lsls	r1, r3, #19
 80058d8:	4b68      	ldr	r3, [pc, #416]	; (8005a7c <USB_HC_StartXfer+0x280>)
 80058da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	7a9b      	ldrb	r3, [r3, #10]
 80058e2:	075b      	lsls	r3, r3, #29
 80058e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	0148      	lsls	r0, r1, #5
 80058ec:	6a39      	ldr	r1, [r7, #32]
 80058ee:	4401      	add	r1, r0
 80058f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68d9      	ldr	r1, [r3, #12]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	460a      	mov	r2, r1
 8005910:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005948:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	7e7b      	ldrb	r3, [r7, #25]
 800595a:	075b      	lsls	r3, r3, #29
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	0148      	lsls	r0, r1, #5
 8005960:	6a39      	ldr	r1, [r7, #32]
 8005962:	4401      	add	r1, r0
 8005964:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <USB_HC_StartXfer+0x284>)
 800597c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800597e:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <USB_HC_StartXfer+0x284>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005986:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <USB_HC_StartXfer+0x284>)
 8005988:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	78db      	ldrb	r3, [r3, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005992:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <USB_HC_StartXfer+0x284>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	4a39      	ldr	r2, [pc, #228]	; (8005a80 <USB_HC_StartXfer+0x284>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e005      	b.n	80059ac <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059a0:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <USB_HC_StartXfer+0x284>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059a8:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <USB_HC_StartXfer+0x284>)
 80059aa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <USB_HC_StartXfer+0x284>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <USB_HC_StartXfer+0x284>)
 80059b6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <USB_HC_StartXfer+0x284>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d14e      	bne.n	8005a70 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d14a      	bne.n	8005a70 <USB_HC_StartXfer+0x274>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d046      	beq.n	8005a70 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	79db      	ldrb	r3, [r3, #7]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d830      	bhi.n	8005a4c <USB_HC_StartXfer+0x250>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USB_HC_StartXfer+0x1f4>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a01 	.word	0x08005a01
 80059fc:	08005a25 	.word	0x08005a25
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	3303      	adds	r3, #3
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a0a:	8afa      	ldrh	r2, [r7, #22]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d91c      	bls.n	8005a50 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	619a      	str	r2, [r3, #24]
          }
          break;
 8005a22:	e015      	b.n	8005a50 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	3303      	adds	r3, #3
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a2e:	8afa      	ldrh	r2, [r7, #22]
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d90a      	bls.n	8005a54 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	619a      	str	r2, [r3, #24]
          }
          break;
 8005a4a:	e003      	b.n	8005a54 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <USB_HC_StartXfer+0x25a>
          break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <USB_HC_StartXfer+0x25a>
          break;
 8005a54:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68d9      	ldr	r1, [r3, #12]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	785a      	ldrb	r2, [r3, #1]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	b298      	uxth	r0, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	4603      	mov	r3, r0
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff fb86 	bl	800517c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3728      	adds	r7, #40	; 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	1ff80000 	.word	0x1ff80000
 8005a80:	200000b0 	.word	0x200000b0

08005a84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	b29b      	uxth	r3, r3
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0c9b      	lsrs	r3, r3, #18
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <USB_HC_Halt+0x3a>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d16c      	bne.n	8005bba <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d143      	bne.n	8005b94 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b6a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b78:	d81d      	bhi.n	8005bb6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b90:	d0ec      	beq.n	8005b6c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b92:	e080      	b.n	8005c96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bb4:	e06f      	b.n	8005c96 <USB_HC_Halt+0x1f0>
          break;
 8005bb6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bb8:	e06d      	b.n	8005c96 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d143      	bne.n	8005c72 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c08:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c48:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c56:	d81d      	bhi.n	8005c94 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6e:	d0ec      	beq.n	8005c4a <USB_HC_Halt+0x1a4>
 8005c70:	e011      	b.n	8005c96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e000      	b.n	8005c96 <USB_HC_Halt+0x1f0>
          break;
 8005c94:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	04da      	lsls	r2, r3, #19
 8005cc0:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <USB_DoPing+0x74>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	1ff80000 	.word	0x1ff80000

08005d1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff f9a1 	bl	8005074 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005d32:	2110      	movs	r1, #16
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff f9d9 	bl	80050ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff f9fc 	bl	8005138 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	e01f      	b.n	8005d86 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b0f      	cmp	r3, #15
 8005d8a:	d9dc      	bls.n	8005d46 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e034      	b.n	8005dfc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005db8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd8:	d80c      	bhi.n	8005df4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d0ec      	beq.n	8005dcc <USB_StopHost+0xb0>
 8005df2:	e000      	b.n	8005df6 <USB_StopHost+0xda>
        break;
 8005df4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b0f      	cmp	r3, #15
 8005e00:	d9c7      	bls.n	8005d92 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f04f 32ff 	mov.w	r2, #4294967295
 8005e16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff f91a 	bl	8005052 <USB_EnableGlobalInt>

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e30:	2301      	movs	r3, #1
 8005e32:	2202      	movs	r2, #2
 8005e34:	2102      	movs	r1, #2
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fcba 	bl	80067b0 <USBH_FindInterface>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	d002      	beq.n	8005e4c <USBH_CDC_InterfaceInit+0x24>
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d901      	bls.n	8005e50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e13d      	b.n	80060cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fc8f 	bl	8006778 <USBH_SelectInterface>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e64:	2302      	movs	r3, #2
 8005e66:	e131      	b.n	80060cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e6e:	2050      	movs	r0, #80	; 0x50
 8005e70:	f006 f8f0 	bl	800c054 <malloc>
 8005e74:	4603      	mov	r3, r0
 8005e76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e11f      	b.n	80060cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e8c:	2250      	movs	r2, #80	; 0x50
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68b8      	ldr	r0, [r7, #8]
 8005e92:	f006 f8fa 	bl	800c08a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	211a      	movs	r1, #26
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da15      	bge.n	8005eda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	211a      	movs	r1, #26
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	211a      	movs	r1, #26
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 f894 	bl	800800e <USBH_AllocPipe>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	7819      	ldrb	r1, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	7858      	ldrb	r0, [r3, #1]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	8952      	ldrh	r2, [r2, #10]
 8005f06:	9202      	str	r2, [sp, #8]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4623      	mov	r3, r4
 8005f10:	4602      	mov	r2, r0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f002 f84c 	bl	8007fb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f005 ffbd 	bl	800bea0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f26:	2300      	movs	r3, #0
 8005f28:	2200      	movs	r2, #0
 8005f2a:	210a      	movs	r1, #10
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fc3f 	bl	80067b0 <USBH_FindInterface>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2bff      	cmp	r3, #255	; 0xff
 8005f3a:	d002      	beq.n	8005f42 <USBH_CDC_InterfaceInit+0x11a>
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d901      	bls.n	8005f46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0c2      	b.n	80060cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	211a      	movs	r1, #26
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da16      	bge.n	8005f8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	211a      	movs	r1, #26
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	211a      	movs	r1, #26
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	835a      	strh	r2, [r3, #26]
 8005f8a:	e015      	b.n	8005fb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	211a      	movs	r1, #26
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	211a      	movs	r1, #26
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	211a      	movs	r1, #26
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da16      	bge.n	8005ffe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	211a      	movs	r1, #26
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	211a      	movs	r1, #26
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	835a      	strh	r2, [r3, #26]
 8005ffc:	e015      	b.n	800602a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	211a      	movs	r1, #26
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	4413      	add	r3, r2
 800600a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	211a      	movs	r1, #26
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006024:	881a      	ldrh	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	7b9b      	ldrb	r3, [r3, #14]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 ffec 	bl	800800e <USBH_AllocPipe>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	7bdb      	ldrb	r3, [r3, #15]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 ffe2 	bl	800800e <USBH_AllocPipe>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	7b59      	ldrb	r1, [r3, #13]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7b98      	ldrb	r0, [r3, #14]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	8b12      	ldrh	r2, [r2, #24]
 800606a:	9202      	str	r2, [sp, #8]
 800606c:	2202      	movs	r2, #2
 800606e:	9201      	str	r2, [sp, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4623      	mov	r3, r4
 8006074:	4602      	mov	r2, r0
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 ff9a 	bl	8007fb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	7b19      	ldrb	r1, [r3, #12]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	7bd8      	ldrb	r0, [r3, #15]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	8b52      	ldrh	r2, [r2, #26]
 8006094:	9202      	str	r2, [sp, #8]
 8006096:	2202      	movs	r2, #2
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4623      	mov	r3, r4
 800609e:	4602      	mov	r2, r0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 ff85 	bl	8007fb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	7b5b      	ldrb	r3, [r3, #13]
 80060b2:	2200      	movs	r2, #0
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f005 fef2 	bl	800bea0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	7b1b      	ldrb	r3, [r3, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f005 feeb 	bl	800bea0 <USBH_LL_SetToggle>

  return USBH_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 ff7a 	bl	8007fee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 ffa5 	bl	8008050 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	7b1b      	ldrb	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 ff67 	bl	8007fee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	7b1b      	ldrb	r3, [r3, #12]
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 ff92 	bl	8008050 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	7b5b      	ldrb	r3, [r3, #13]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00e      	beq.n	8006158 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	7b5b      	ldrb	r3, [r3, #13]
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 ff54 	bl	8007fee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	7b5b      	ldrb	r3, [r3, #13]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 ff7f 	bl	8008050 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4618      	mov	r0, r3
 800616e:	f005 ff79 	bl	800c064 <free>
    phost->pActiveClass->pData = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006178:	2200      	movs	r2, #0
 800617a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3340      	adds	r3, #64	; 0x40
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8b1 	bl	8006306 <GetLineCoding>
 80061a4:	4603      	mov	r3, r0
 80061a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d105      	bne.n	80061ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b4:	2102      	movs	r1, #2
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061ba:	7afb      	ldrb	r3, [r7, #11]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d877      	bhi.n	80062d8 <USBH_CDC_Process+0x114>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <USBH_CDC_Process+0x2c>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006205 	.word	0x08006205
 80061f4:	0800620b 	.word	0x0800620b
 80061f8:	0800623b 	.word	0x0800623b
 80061fc:	080062af 	.word	0x080062af
 8006200:	080062bd 	.word	0x080062bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e06d      	b.n	80062e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f897 	bl	8006344 <SetLineCoding>
 8006216:	4603      	mov	r3, r0
 8006218:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006228:	e058      	b.n	80062dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d055      	beq.n	80062dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2204      	movs	r2, #4
 8006234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006238:	e050      	b.n	80062dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3340      	adds	r3, #64	; 0x40
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f860 	bl	8006306 <GetLineCoding>
 8006246:	4603      	mov	r3, r0
 8006248:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d126      	bne.n	800629e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006262:	791b      	ldrb	r3, [r3, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d13b      	bne.n	80062e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006274:	429a      	cmp	r2, r3
 8006276:	d133      	bne.n	80062e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006284:	429a      	cmp	r2, r3
 8006286:	d12b      	bne.n	80062e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006290:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006292:	429a      	cmp	r2, r3
 8006294:	d124      	bne.n	80062e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f984 	bl	80065a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800629c:	e020      	b.n	80062e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d01d      	beq.n	80062e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2204      	movs	r2, #4
 80062a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062ac:	e018      	b.n	80062e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f867 	bl	8006382 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f8f8 	bl	80064aa <CDC_ProcessReception>
      break;
 80062ba:	e014      	b.n	80062e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062bc:	2100      	movs	r1, #0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f953 	bl	800756a <USBH_ClrFeature>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062d6:	e005      	b.n	80062e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80062d8:	bf00      	nop
 80062da:	e004      	b.n	80062e6 <USBH_CDC_Process+0x122>
      break;
 80062dc:	bf00      	nop
 80062de:	e002      	b.n	80062e6 <USBH_CDC_Process+0x122>
      break;
 80062e0:	bf00      	nop
 80062e2:	e000      	b.n	80062e6 <USBH_CDC_Process+0x122>
      break;
 80062e4:	bf00      	nop

  }

  return status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	22a1      	movs	r2, #161	; 0xa1
 8006314:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2221      	movs	r2, #33	; 0x21
 800631a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2207      	movs	r2, #7
 800632c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2207      	movs	r2, #7
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 faf8 	bl	800792a <USBH_CtlReq>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2221      	movs	r2, #33	; 0x21
 8006352:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2207      	movs	r2, #7
 800636a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2207      	movs	r2, #7
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fad9 	bl	800792a <USBH_CtlReq>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af02      	add	r7, sp, #8
 8006388:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006394:	2300      	movs	r3, #0
 8006396:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <CDC_ProcessTransmission+0x26>
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d025      	beq.n	80063f2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80063a6:	e07c      	b.n	80064a2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	8b12      	ldrh	r2, [r2, #24]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d90c      	bls.n	80063ce <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	69d9      	ldr	r1, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8b1a      	ldrh	r2, [r3, #24]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	7b58      	ldrb	r0, [r3, #13]
 80063c0:	2301      	movs	r3, #1
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4603      	mov	r3, r0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fdaf 	bl	8007f2a <USBH_BulkSendData>
 80063cc:	e00c      	b.n	80063e8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	7b58      	ldrb	r0, [r3, #13]
 80063dc:	2301      	movs	r3, #1
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4603      	mov	r3, r0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fda1 	bl	8007f2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063f0:	e057      	b.n	80064a2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	7b5b      	ldrb	r3, [r3, #13]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f005 fd27 	bl	800be4c <USBH_LL_GetURBState>
 80063fe:	4603      	mov	r3, r0
 8006400:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d136      	bne.n	8006476 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	8b12      	ldrh	r2, [r2, #24]
 8006410:	4293      	cmp	r3, r2
 8006412:	d90e      	bls.n	8006432 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	8b12      	ldrh	r2, [r2, #24]
 800641c:	1a9a      	subs	r2, r3, r2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	8b12      	ldrh	r2, [r2, #24]
 800642a:	441a      	add	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	61da      	str	r2, [r3, #28]
 8006430:	e002      	b.n	8006438 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006448:	e006      	b.n	8006458 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f892 	bl	800657c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800646c:	2200      	movs	r2, #0
 800646e:	4619      	mov	r1, r3
 8006470:	f001 ff1e 	bl	80082b0 <osMessagePut>
      break;
 8006474:	e014      	b.n	80064a0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d111      	bne.n	80064a0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006498:	2200      	movs	r2, #0
 800649a:	4619      	mov	r1, r3
 800649c:	f001 ff08 	bl	80082b0 <osMessagePut>
      break;
 80064a0:	bf00      	nop
  }
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d002      	beq.n	80064d0 <CDC_ProcessReception+0x26>
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d00e      	beq.n	80064ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064ce:	e051      	b.n	8006574 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6a19      	ldr	r1, [r3, #32]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	8b5a      	ldrh	r2, [r3, #26]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	7b1b      	ldrb	r3, [r3, #12]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fd49 	bl	8007f74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2204      	movs	r2, #4
 80064e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064ea:	e043      	b.n	8006574 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f005 fcaa 	bl	800be4c <USBH_LL_GetURBState>
 80064f8:	4603      	mov	r3, r0
 80064fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d137      	bne.n	8006572 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	7b1b      	ldrb	r3, [r3, #12]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f005 fc0d 	bl	800bd28 <USBH_LL_GetLastXferSize>
 800650e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d016      	beq.n	8006548 <CDC_ProcessReception+0x9e>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	8b5b      	ldrh	r3, [r3, #26]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4293      	cmp	r3, r2
 8006524:	d910      	bls.n	8006548 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1ad2      	subs	r2, r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	441a      	add	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2203      	movs	r2, #3
 8006542:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006546:	e006      	b.n	8006556 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f81d 	bl	8006590 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800656a:	2200      	movs	r2, #0
 800656c:	4619      	mov	r1, r3
 800656e:	f001 fe9f 	bl	80082b0 <osMessagePut>
      break;
 8006572:	bf00      	nop
  }
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80065b8:	b5b0      	push	{r4, r5, r7, lr}
 80065ba:	b090      	sub	sp, #64	; 0x40
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e04d      	b.n	800666c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	79fa      	ldrb	r2, [r7, #7]
 80065d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f847 	bl	800667c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800661c:	4b15      	ldr	r3, [pc, #84]	; (8006674 <USBH_Init+0xbc>)
 800661e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fe14 	bl	800825c <osMessageCreate>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800663c:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <USBH_Init+0xc0>)
 800663e:	f107 0414 	add.w	r4, r7, #20
 8006642:	461d      	mov	r5, r3
 8006644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800664c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fd6d 	bl	8008136 <osThreadCreate>
 800665c:	4602      	mov	r2, r0
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f005 faad 	bl	800bbc4 <USBH_LL_Init>

  return USBH_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3740      	adds	r7, #64	; 0x40
 8006670:	46bd      	mov	sp, r7
 8006672:	bdb0      	pop	{r4, r5, r7, pc}
 8006674:	0800c22c 	.word	0x0800c22c
 8006678:	0800c248 	.word	0x0800c248

0800667c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	e009      	b.n	80066a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	33e0      	adds	r3, #224	; 0xe0
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	2200      	movs	r2, #0
 800669a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b0e      	cmp	r3, #14
 80066a6:	d9f2      	bls.n	800668e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e009      	b.n	80066c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	d3f1      	bcc.n	80066ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2240      	movs	r2, #64	; 0x40
 80066ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10e      	bne.n	8006760 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	33de      	adds	r3, #222	; 0xde
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
 800675e:	e004      	b.n	800676a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e001      	b.n	800676a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006766:	2302      	movs	r3, #2
 8006768:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	429a      	cmp	r2, r3
 8006792:	d204      	bcs.n	800679e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800679c:	e001      	b.n	80067a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800679e:	2302      	movs	r3, #2
 80067a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	4608      	mov	r0, r1
 80067ba:	4611      	mov	r1, r2
 80067bc:	461a      	mov	r2, r3
 80067be:	4603      	mov	r3, r0
 80067c0:	70fb      	strb	r3, [r7, #3]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70bb      	strb	r3, [r7, #2]
 80067c6:	4613      	mov	r3, r2
 80067c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067da:	e025      	b.n	8006828 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	221a      	movs	r2, #26
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	3308      	adds	r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	3302      	adds	r3, #2
 80067ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	795b      	ldrb	r3, [r3, #5]
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d002      	beq.n	80067fe <USBH_FindInterface+0x4e>
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2bff      	cmp	r3, #255	; 0xff
 80067fc:	d111      	bne.n	8006822 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006802:	78ba      	ldrb	r2, [r7, #2]
 8006804:	429a      	cmp	r2, r3
 8006806:	d002      	beq.n	800680e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006808:	78bb      	ldrb	r3, [r7, #2]
 800680a:	2bff      	cmp	r3, #255	; 0xff
 800680c:	d109      	bne.n	8006822 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006812:	787a      	ldrb	r2, [r7, #1]
 8006814:	429a      	cmp	r2, r3
 8006816:	d002      	beq.n	800681e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006818:	787b      	ldrb	r3, [r7, #1]
 800681a:	2bff      	cmp	r3, #255	; 0xff
 800681c:	d101      	bne.n	8006822 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	e006      	b.n	8006830 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	3301      	adds	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d9d6      	bls.n	80067dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800682e:	23ff      	movs	r3, #255	; 0xff
}
 8006830:	4618      	mov	r0, r3
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f005 f9f9 	bl	800bc3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800684a:	2101      	movs	r1, #1
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f005 fb10 	bl	800be72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af04      	add	r7, sp, #16
 8006862:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d102      	bne.n	800687e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b0b      	cmp	r3, #11
 8006886:	f200 823c 	bhi.w	8006d02 <USBH_Process+0x4a6>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <USBH_Process+0x34>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068c1 	.word	0x080068c1
 8006894:	0800690f 	.word	0x0800690f
 8006898:	08006993 	.word	0x08006993
 800689c:	08006c81 	.word	0x08006c81
 80068a0:	08006d03 	.word	0x08006d03
 80068a4:	08006a53 	.word	0x08006a53
 80068a8:	08006c0b 	.word	0x08006c0b
 80068ac:	08006aa5 	.word	0x08006aa5
 80068b0:	08006ae1 	.word	0x08006ae1
 80068b4:	08006b1b 	.word	0x08006b1b
 80068b8:	08006b63 	.word	0x08006b63
 80068bc:	08006c69 	.word	0x08006c69
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 821c 	beq.w	8006d06 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80068d4:	20c8      	movs	r0, #200	; 0xc8
 80068d6:	f005 fb16 	bl	800bf06 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f005 fa09 	bl	800bcf2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006904:	2200      	movs	r2, #0
 8006906:	4619      	mov	r1, r3
 8006908:	f001 fcd2 	bl	80082b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800690c:	e1fb      	b.n	8006d06 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e025      	b.n	8006974 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800692e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006932:	d914      	bls.n	800695e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800693a:	3301      	adds	r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800694a:	2b03      	cmp	r3, #3
 800694c:	d903      	bls.n	8006956 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	220d      	movs	r2, #13
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e00e      	b.n	8006974 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e00a      	b.n	8006974 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006964:	f103 020a 	add.w	r2, r3, #10
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800696e:	200a      	movs	r0, #10
 8006970:	f005 fac9 	bl	800bf06 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006988:	2200      	movs	r2, #0
 800698a:	4619      	mov	r1, r3
 800698c:	f001 fc90 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006990:	e1c0      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a2:	2104      	movs	r1, #4
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069a8:	2064      	movs	r0, #100	; 0x64
 80069aa:	f005 faac 	bl	800bf06 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f005 f97a 	bl	800bca8 <USBH_LL_GetSpeed>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2205      	movs	r2, #5
 80069c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069c4:	2100      	movs	r1, #0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fb21 	bl	800800e <USBH_AllocPipe>
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069d4:	2180      	movs	r1, #128	; 0x80
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fb19 	bl	800800e <USBH_AllocPipe>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7919      	ldrb	r1, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069f8:	b292      	uxth	r2, r2
 80069fa:	9202      	str	r2, [sp, #8]
 80069fc:	2200      	movs	r2, #0
 80069fe:	9201      	str	r2, [sp, #4]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4603      	mov	r3, r0
 8006a04:	2280      	movs	r2, #128	; 0x80
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fad2 	bl	8007fb0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	7959      	ldrb	r1, [r3, #5]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a20:	b292      	uxth	r2, r2
 8006a22:	9202      	str	r2, [sp, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fabe 	bl	8007fb0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f001 fc30 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a50:	e160      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f964 	bl	8006d20 <USBH_HandleEnum>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 8152 	bne.w	8006d0a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d103      	bne.n	8006a80 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e002      	b.n	8006a86 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2207      	movs	r2, #7
 8006a84:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2205      	movs	r2, #5
 8006a8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f001 fc07 	bl	80082b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006aa2:	e132      	b.n	8006d0a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 812f 	beq.w	8006d0e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2208      	movs	r2, #8
 8006ac0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f001 fbe9 	bl	80082b0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ade:	e116      	b.n	8006d0e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fcf6 	bl	80074dc <USBH_SetCfg>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2209      	movs	r2, #9
 8006afa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b10:	2200      	movs	r2, #0
 8006b12:	4619      	mov	r1, r3
 8006b14:	f001 fbcc 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b18:	e0fc      	b.n	8006d14 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006b28:	2101      	movs	r1, #1
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcf9 	bl	8007522 <USBH_SetFeature>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	220a      	movs	r2, #10
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e002      	b.n	8006b44 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220a      	movs	r2, #10
 8006b42:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f001 fba8 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b60:	e0d8      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d03f      	beq.n	8006bec <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	e016      	b.n	8006ba8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b7a:	7bfa      	ldrb	r2, [r7, #15]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	32de      	adds	r2, #222	; 0xde
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	791a      	ldrb	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d108      	bne.n	8006ba2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b90:	7bfa      	ldrb	r2, [r7, #15]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32de      	adds	r2, #222	; 0xde
 8006b96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006ba0:	e005      	b.n	8006bae <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0e5      	beq.n	8006b7a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d016      	beq.n	8006be6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2206      	movs	r2, #6
 8006bce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
 8006bdc:	e006      	b.n	8006bec <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	220d      	movs	r2, #13
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e002      	b.n	8006bec <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	220d      	movs	r2, #13
 8006bea:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2205      	movs	r2, #5
 8006bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c00:	2200      	movs	r2, #0
 8006c02:	4619      	mov	r1, r3
 8006c04:	f001 fb54 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c08:	e084      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220b      	movs	r2, #11
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e00a      	b.n	8006c4a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d106      	bne.n	8006c4a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	220d      	movs	r2, #13
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e002      	b.n	8006c4a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	220d      	movs	r2, #13
 8006c48:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2205      	movs	r2, #5
 8006c4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4619      	mov	r1, r3
 8006c62:	f001 fb25 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c66:	e055      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d04f      	beq.n	8006d12 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      }
      break;
 8006c7e:	e048      	b.n	8006d12 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fcf7 	bl	800667c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cbc:	2105      	movs	r1, #5
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d107      	bne.n	8006cde <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fdb0 	bl	800683c <USBH_Start>
 8006cdc:	e002      	b.n	8006ce4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f004 ffac 	bl	800bc3c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f001 fad8 	bl	80082b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d00:	e008      	b.n	8006d14 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d02:	bf00      	nop
 8006d04:	e006      	b.n	8006d14 <USBH_Process+0x4b8>
      break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <USBH_Process+0x4b8>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <USBH_Process+0x4b8>
    break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <USBH_Process+0x4b8>
      break;
 8006d12:	bf00      	nop
  }
  return USBH_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af04      	add	r7, sp, #16
 8006d26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b07      	cmp	r3, #7
 8006d36:	f200 8208 	bhi.w	800714a <USBH_HandleEnum+0x42a>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <USBH_HandleEnum+0x20>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006e1f 	.word	0x08006e1f
 8006d48:	08006e89 	.word	0x08006e89
 8006d4c:	08006f17 	.word	0x08006f17
 8006d50:	08006f81 	.word	0x08006f81
 8006d54:	08006ff1 	.word	0x08006ff1
 8006d58:	0800708d 	.word	0x0800708d
 8006d5c:	0800710b 	.word	0x0800710b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d60:	2108      	movs	r1, #8
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 faea 	bl	800733c <USBH_Get_DevDesc>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7919      	ldrb	r1, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d96:	b292      	uxth	r2, r2
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f903 	bl	8007fb0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7959      	ldrb	r1, [r3, #5]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	9202      	str	r2, [sp, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	9201      	str	r2, [sp, #4]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f8ef 	bl	8007fb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006dd2:	e1bc      	b.n	800714e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	f040 81b9 	bne.w	800714e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006de2:	3301      	adds	r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d903      	bls.n	8006dfe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	220d      	movs	r2, #13
 8006dfa:	701a      	strb	r2, [r3, #0]
      break;
 8006dfc:	e1a7      	b.n	800714e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	795b      	ldrb	r3, [r3, #5]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f923 	bl	8008050 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	791b      	ldrb	r3, [r3, #4]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f91d 	bl	8008050 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e197      	b.n	800714e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e1e:	2112      	movs	r1, #18
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa8b 	bl	800733c <USBH_Get_DevDesc>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e36:	e18c      	b.n	8007152 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	f040 8189 	bne.w	8007152 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e46:	3301      	adds	r3, #1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d903      	bls.n	8006e62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	220d      	movs	r2, #13
 8006e5e:	701a      	strb	r2, [r3, #0]
      break;
 8006e60:	e177      	b.n	8007152 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	795b      	ldrb	r3, [r3, #5]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f8f1 	bl	8008050 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	791b      	ldrb	r3, [r3, #4]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f8eb 	bl	8008050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
      break;
 8006e86:	e164      	b.n	8007152 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e88:	2101      	movs	r1, #1
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb02 	bl	8007494 <USBH_SetAddress>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d132      	bne.n	8006f00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e9a:	2002      	movs	r0, #2
 8006e9c:	f005 f833 	bl	800bf06 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7919      	ldrb	r1, [r3, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f86d 	bl	8007fb0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7959      	ldrb	r1, [r3, #5]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eea:	b292      	uxth	r2, r2
 8006eec:	9202      	str	r2, [sp, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f859 	bl	8007fb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006efe:	e12a      	b.n	8007156 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f040 8127 	bne.w	8007156 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	220d      	movs	r2, #13
 8006f0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	705a      	strb	r2, [r3, #1]
      break;
 8006f14:	e11f      	b.n	8007156 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f16:	2109      	movs	r1, #9
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa37 	bl	800738c <USBH_Get_CfgDesc>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d103      	bne.n	8006f30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f2e:	e114      	b.n	800715a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	f040 8111 	bne.w	800715a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f3e:	3301      	adds	r3, #1
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d903      	bls.n	8006f5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	220d      	movs	r2, #13
 8006f56:	701a      	strb	r2, [r3, #0]
      break;
 8006f58:	e0ff      	b.n	800715a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	795b      	ldrb	r3, [r3, #5]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f875 	bl	8008050 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f86f 	bl	8008050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e0ec      	b.n	800715a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f9ff 	bl	800738c <USBH_Get_CfgDesc>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d103      	bne.n	8006fa0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f9e:	e0de      	b.n	800715e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	f040 80db 	bne.w	800715e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d903      	bls.n	8006fca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	220d      	movs	r2, #13
 8006fc6:	701a      	strb	r2, [r3, #0]
      break;
 8006fc8:	e0c9      	b.n	800715e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	795b      	ldrb	r3, [r3, #5]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f83d 	bl	8008050 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f837 	bl	8008050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
      break;
 8006fee:	e0b6      	b.n	800715e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d036      	beq.n	8007068 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007006:	23ff      	movs	r3, #255	; 0xff
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9e3 	bl	80073d4 <USBH_Get_StringDesc>
 800700e:	4603      	mov	r3, r0
 8007010:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d111      	bne.n	800703c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2206      	movs	r2, #6
 800701c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2205      	movs	r2, #5
 8007022:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007032:	2200      	movs	r2, #0
 8007034:	4619      	mov	r1, r3
 8007036:	f001 f93b 	bl	80082b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800703a:	e092      	b.n	8007162 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b03      	cmp	r3, #3
 8007040:	f040 808f 	bne.w	8007162 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2206      	movs	r2, #6
 8007048:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2205      	movs	r2, #5
 800704e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800705e:	2200      	movs	r2, #0
 8007060:	4619      	mov	r1, r3
 8007062:	f001 f925 	bl	80082b0 <osMessagePut>
      break;
 8007066:	e07c      	b.n	8007162 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2206      	movs	r2, #6
 800706c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2205      	movs	r2, #5
 8007072:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007082:	2200      	movs	r2, #0
 8007084:	4619      	mov	r1, r3
 8007086:	f001 f913 	bl	80082b0 <osMessagePut>
      break;
 800708a:	e06a      	b.n	8007162 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007092:	2b00      	cmp	r3, #0
 8007094:	d027      	beq.n	80070e6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070a2:	23ff      	movs	r3, #255	; 0xff
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f995 	bl	80073d4 <USBH_Get_StringDesc>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2207      	movs	r2, #7
 80070b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070ba:	e054      	b.n	8007166 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d151      	bne.n	8007166 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2207      	movs	r2, #7
 80070c6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2205      	movs	r2, #5
 80070cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070dc:	2200      	movs	r2, #0
 80070de:	4619      	mov	r1, r3
 80070e0:	f001 f8e6 	bl	80082b0 <osMessagePut>
      break;
 80070e4:	e03f      	b.n	8007166 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2207      	movs	r2, #7
 80070ea:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2205      	movs	r2, #5
 80070f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007100:	2200      	movs	r2, #0
 8007102:	4619      	mov	r1, r3
 8007104:	f001 f8d4 	bl	80082b0 <osMessagePut>
      break;
 8007108:	e02d      	b.n	8007166 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007120:	23ff      	movs	r3, #255	; 0xff
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f956 	bl	80073d4 <USBH_Get_StringDesc>
 8007128:	4603      	mov	r3, r0
 800712a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007136:	e018      	b.n	800716a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d115      	bne.n	800716a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	e012      	b.n	800716a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e00f      	b.n	800716a <USBH_HandleEnum+0x44a>

    default:
      break;
 800714a:	bf00      	nop
 800714c:	e00e      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 800714e:	bf00      	nop
 8007150:	e00c      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 8007152:	bf00      	nop
 8007154:	e00a      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 8007156:	bf00      	nop
 8007158:	e008      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 800715a:	bf00      	nop
 800715c:	e006      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 800715e:	bf00      	nop
 8007160:	e004      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 8007162:	bf00      	nop
 8007164:	e002      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <USBH_HandleEnum+0x44c>
      break;
 800716a:	bf00      	nop
  }
  return Status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop

08007178 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f804 	bl	80071ba <USBH_HandleSof>
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b0b      	cmp	r3, #11
 80071ca:	d10a      	bne.n	80071e2 <USBH_HandleSof+0x28>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
  }
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800720e:	2200      	movs	r2, #0
 8007210:	4619      	mov	r1, r3
 8007212:	f001 f84d 	bl	80082b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007216:	bf00      	nop
}
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800722e:	bf00      	nop
}
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800726e:	2200      	movs	r2, #0
 8007270:	4619      	mov	r1, r3
 8007272:	f001 f81d 	bl	80082b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f004 fce6 	bl	800bc72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fecf 	bl	8008050 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	795b      	ldrb	r3, [r3, #5]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fec9 	bl	8008050 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072d2:	2200      	movs	r2, #0
 80072d4:	4619      	mov	r1, r3
 80072d6:	f000 ffeb 	bl	80082b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80072f2:	f107 030c 	add.w	r3, r7, #12
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f818 	bl	8008330 <osMessageGet>
    if (event.status == osEventMessage)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b10      	cmp	r3, #16
 8007304:	d1f2      	bne.n	80072ec <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff faa8 	bl	800685c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800730c:	e7ee      	b.n	80072ec <USBH_Process_OS+0x8>

0800730e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800732a:	2200      	movs	r2, #0
 800732c:	4619      	mov	r1, r3
 800732e:	f000 ffbf 	bl	80082b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	b29b      	uxth	r3, r3
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f864 	bl	800742a <USBH_GetDescriptor>
 8007362:	4603      	mov	r3, r0
 8007364:	73fb      	strb	r3, [r7, #15]
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	b292      	uxth	r2, r2
 800737c:	4619      	mov	r1, r3
 800737e:	f000 f918 	bl	80075b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af02      	add	r7, sp, #8
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	331c      	adds	r3, #28
 800739c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a8:	2100      	movs	r1, #0
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f83d 	bl	800742a <USBH_GetDescriptor>
 80073b0:	4603      	mov	r3, r0
 80073b2:	72fb      	strb	r3, [r7, #11]
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073c0:	887a      	ldrh	r2, [r7, #2]
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f964 	bl	8007692 <USBH_ParseCfgDesc>
  }

  return status;
 80073ca:	7afb      	ldrb	r3, [r7, #11]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	461a      	mov	r2, r3
 80073e0:	460b      	mov	r3, r1
 80073e2:	72fb      	strb	r3, [r7, #11]
 80073e4:	4613      	mov	r3, r2
 80073e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	460b      	mov	r3, r1
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f812 	bl	800742a <USBH_GetDescriptor>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d107      	bne.n	8007420 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007416:	893a      	ldrh	r2, [r7, #8]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fa37 	bl	800788e <USBH_ParseStringDesc>
  }

  return status;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	72fb      	strb	r3, [r7, #11]
 8007438:	4613      	mov	r3, r2
 800743a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	789b      	ldrb	r3, [r3, #2]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d11c      	bne.n	800747e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007444:	7afb      	ldrb	r3, [r7, #11]
 8007446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800744a:	b2da      	uxtb	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2206      	movs	r2, #6
 8007454:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	893a      	ldrh	r2, [r7, #8]
 800745a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800745c:	893b      	ldrh	r3, [r7, #8]
 800745e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007466:	d104      	bne.n	8007472 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f240 4209 	movw	r2, #1033	; 0x409
 800746e:	829a      	strh	r2, [r3, #20]
 8007470:	e002      	b.n	8007478 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8b3a      	ldrh	r2, [r7, #24]
 800747c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800747e:	8b3b      	ldrh	r3, [r7, #24]
 8007480:	461a      	mov	r2, r3
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fa50 	bl	800792a <USBH_CtlReq>
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10f      	bne.n	80074c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2205      	movs	r2, #5
 80074b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa2c 	bl	800792a <USBH_CtlReq>
 80074d2:	4603      	mov	r3, r0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	789b      	ldrb	r3, [r3, #2]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10e      	bne.n	800750e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2209      	movs	r2, #9
 80074fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa09 	bl	800792a <USBH_CtlReq>
 8007518:	4603      	mov	r3, r0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	789b      	ldrb	r3, [r3, #2]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d10f      	bne.n	8007556 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2203      	movs	r2, #3
 8007540:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9e5 	bl	800792a <USBH_CtlReq>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	789b      	ldrb	r3, [r3, #2]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10f      	bne.n	800759e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9c1 	bl	800792a <USBH_CtlReq>
 80075a8:	4603      	mov	r3, r0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	4613      	mov	r3, r2
 80075be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	785a      	ldrb	r2, [r3, #1]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3302      	adds	r3, #2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3303      	adds	r3, #3
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	791a      	ldrb	r2, [r3, #4]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	795a      	ldrb	r2, [r3, #5]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	799a      	ldrb	r2, [r3, #6]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	79da      	ldrb	r2, [r3, #7]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	2b08      	cmp	r3, #8
 8007610:	d939      	bls.n	8007686 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	3308      	adds	r3, #8
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b29a      	uxth	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	3309      	adds	r3, #9
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	b29b      	uxth	r3, r3
 8007626:	4313      	orrs	r3, r2
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	330a      	adds	r3, #10
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b29a      	uxth	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	330b      	adds	r3, #11
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	b29b      	uxth	r3, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	330c      	adds	r3, #12
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b29a      	uxth	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	330d      	adds	r3, #13
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	b29b      	uxth	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	7b9a      	ldrb	r2, [r3, #14]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	7bda      	ldrb	r2, [r3, #15]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	7c1a      	ldrb	r2, [r3, #16]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	7c5a      	ldrb	r2, [r3, #17]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	745a      	strb	r2, [r3, #17]
  }
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b08a      	sub	sp, #40	; 0x28
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	4613      	mov	r3, r2
 800769e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	785a      	ldrb	r2, [r3, #1]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3302      	adds	r3, #2
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3303      	adds	r3, #3
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	4313      	orrs	r3, r2
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	791a      	ldrb	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	795a      	ldrb	r2, [r3, #5]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	799a      	ldrb	r2, [r3, #6]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	79da      	ldrb	r2, [r3, #7]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	7a1a      	ldrb	r2, [r3, #8]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	2b09      	cmp	r3, #9
 800770c:	d95f      	bls.n	80077ce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800770e:	2309      	movs	r3, #9
 8007710:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007716:	e051      	b.n	80077bc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007718:	f107 0316 	add.w	r3, r7, #22
 800771c:	4619      	mov	r1, r3
 800771e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007720:	f000 f8e8 	bl	80078f4 <USBH_GetNextDesc>
 8007724:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b04      	cmp	r3, #4
 800772c:	d146      	bne.n	80077bc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007732:	221a      	movs	r2, #26
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	3308      	adds	r3, #8
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	3302      	adds	r3, #2
 8007740:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007744:	69f8      	ldr	r0, [r7, #28]
 8007746:	f000 f846 	bl	80077d6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007754:	e022      	b.n	800779c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007756:	f107 0316 	add.w	r3, r7, #22
 800775a:	4619      	mov	r1, r3
 800775c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800775e:	f000 f8c9 	bl	80078f4 <USBH_GetNextDesc>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b05      	cmp	r3, #5
 800776a:	d117      	bne.n	800779c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800776c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007770:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007774:	3201      	adds	r2, #1
 8007776:	00d2      	lsls	r2, r2, #3
 8007778:	211a      	movs	r1, #26
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	4413      	add	r3, r2
 8007780:	3308      	adds	r3, #8
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	3304      	adds	r3, #4
 8007788:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800778a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800778c:	69b8      	ldr	r0, [r7, #24]
 800778e:	f000 f851 	bl	8007834 <USBH_ParseEPDesc>
            ep_ix++;
 8007792:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007796:	3301      	adds	r3, #1
 8007798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d204      	bcs.n	80077b2 <USBH_ParseCfgDesc+0x120>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	885a      	ldrh	r2, [r3, #2]
 80077ac:	8afb      	ldrh	r3, [r7, #22]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d8d1      	bhi.n	8007756 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80077b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b6:	3301      	adds	r3, #1
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d804      	bhi.n	80077ce <USBH_ParseCfgDesc+0x13c>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	885a      	ldrh	r2, [r3, #2]
 80077c8:	8afb      	ldrh	r3, [r7, #22]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d8a4      	bhi.n	8007718 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80077ce:	bf00      	nop
 80077d0:	3728      	adds	r7, #40	; 0x28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	785a      	ldrb	r2, [r3, #1]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	789a      	ldrb	r2, [r3, #2]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	78da      	ldrb	r2, [r3, #3]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	791a      	ldrb	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	795a      	ldrb	r2, [r3, #5]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	799a      	ldrb	r2, [r3, #6]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	79da      	ldrb	r2, [r3, #7]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	7a1a      	ldrb	r2, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	721a      	strb	r2, [r3, #8]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785a      	ldrb	r2, [r3, #1]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	789a      	ldrb	r2, [r3, #2]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	78da      	ldrb	r2, [r3, #3]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	3304      	adds	r3, #4
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b29a      	uxth	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	3305      	adds	r3, #5
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29a      	uxth	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	799a      	ldrb	r2, [r3, #6]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	719a      	strb	r2, [r3, #6]
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800788e:	b480      	push	{r7}
 8007890:	b087      	sub	sp, #28
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	4613      	mov	r3, r2
 800789a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d120      	bne.n	80078e8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	1e9a      	subs	r2, r3, #2
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bf28      	it	cs
 80078b2:	4613      	movcs	r3, r2
 80078b4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3302      	adds	r3, #2
 80078ba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078bc:	2300      	movs	r3, #0
 80078be:	82fb      	strh	r3, [r7, #22]
 80078c0:	e00b      	b.n	80078da <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078c2:	8afb      	ldrh	r3, [r7, #22]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	3302      	adds	r3, #2
 80078d8:	82fb      	strh	r3, [r7, #22]
 80078da:	8afa      	ldrh	r2, [r7, #22]
 80078dc:	8abb      	ldrh	r3, [r7, #20]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d3ef      	bcc.n	80078c2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
  }
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	4413      	add	r3, r2
 800790a:	b29a      	uxth	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800791c:	68fb      	ldr	r3, [r7, #12]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	4613      	mov	r3, r2
 8007936:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	789b      	ldrb	r3, [r3, #2]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d002      	beq.n	800794a <USBH_CtlReq+0x20>
 8007944:	2b02      	cmp	r3, #2
 8007946:	d01d      	beq.n	8007984 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007948:	e043      	b.n	80079d2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2203      	movs	r2, #3
 800796a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800797a:	2200      	movs	r2, #0
 800797c:	4619      	mov	r1, r3
 800797e:	f000 fc97 	bl	80082b0 <osMessagePut>
      break;
 8007982:	e026      	b.n	80079d2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f829 	bl	80079dc <USBH_HandleControl>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <USBH_CtlReq+0x70>
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d106      	bne.n	80079a8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	761a      	strb	r2, [r3, #24]
 80079a6:	e005      	b.n	80079b4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d102      	bne.n	80079b4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2203      	movs	r2, #3
 80079b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079c8:	2200      	movs	r2, #0
 80079ca:	4619      	mov	r1, r3
 80079cc:	f000 fc70 	bl	80082b0 <osMessagePut>
      break;
 80079d0:	bf00      	nop
  }
  return status;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7e1b      	ldrb	r3, [r3, #24]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	2b0a      	cmp	r3, #10
 80079f4:	f200 822b 	bhi.w	8007e4e <USBH_HandleControl+0x472>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <USBH_HandleControl+0x24>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a47 	.word	0x08007a47
 8007a08:	08007ae9 	.word	0x08007ae9
 8007a0c:	08007b0f 	.word	0x08007b0f
 8007a10:	08007b9b 	.word	0x08007b9b
 8007a14:	08007bc7 	.word	0x08007bc7
 8007a18:	08007c89 	.word	0x08007c89
 8007a1c:	08007cab 	.word	0x08007cab
 8007a20:	08007d3d 	.word	0x08007d3d
 8007a24:	08007d65 	.word	0x08007d65
 8007a28:	08007df7 	.word	0x08007df7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f103 0110 	add.w	r1, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa19 	bl	8007e70 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	761a      	strb	r2, [r3, #24]
      break;
 8007a44:	e20e      	b.n	8007e64 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f004 f9fd 	bl	800be4c <USBH_LL_GetURBState>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d12c      	bne.n	8007ab6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7c1b      	ldrb	r3, [r3, #16]
 8007a60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8adb      	ldrh	r3, [r3, #22]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	2b80      	cmp	r3, #128	; 0x80
 8007a72:	d103      	bne.n	8007a7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2203      	movs	r2, #3
 8007a78:	761a      	strb	r2, [r3, #24]
 8007a7a:	e00d      	b.n	8007a98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2205      	movs	r2, #5
 8007a80:	761a      	strb	r2, [r3, #24]
 8007a82:	e009      	b.n	8007a98 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007a84:	7b7b      	ldrb	r3, [r7, #13]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	d103      	bne.n	8007a92 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2209      	movs	r2, #9
 8007a8e:	761a      	strb	r2, [r3, #24]
 8007a90:	e002      	b.n	8007a98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2207      	movs	r2, #7
 8007a96:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007aac:	2200      	movs	r2, #0
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f000 fbfe 	bl	80082b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ab4:	e1cd      	b.n	8007e52 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d003      	beq.n	8007ac4 <USBH_HandleControl+0xe8>
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	f040 81c7 	bne.w	8007e52 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220b      	movs	r2, #11
 8007ac8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f000 fbe5 	bl	80082b0 <osMessagePut>
      break;
 8007ae6:	e1b4      	b.n	8007e52 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	899a      	ldrh	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	791b      	ldrb	r3, [r3, #4]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9f4 	bl	8007eee <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	761a      	strb	r2, [r3, #24]
      break;
 8007b0c:	e1aa      	b.n	8007e64 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f004 f999 	bl	800be4c <USBH_LL_GetURBState>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d110      	bne.n	8007b46 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2209      	movs	r2, #9
 8007b28:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4619      	mov	r1, r3
 8007b42:	f000 fbb5 	bl	80082b0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d110      	bne.n	8007b6e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2203      	movs	r2, #3
 8007b54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b64:	2200      	movs	r2, #0
 8007b66:	4619      	mov	r1, r3
 8007b68:	f000 fba2 	bl	80082b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b6c:	e173      	b.n	8007e56 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	f040 8170 	bne.w	8007e56 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	220b      	movs	r2, #11
 8007b7a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2203      	movs	r2, #3
 8007b80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b90:	2200      	movs	r2, #0
 8007b92:	4619      	mov	r1, r3
 8007b94:	f000 fb8c 	bl	80082b0 <osMessagePut>
      break;
 8007b98:	e15d      	b.n	8007e56 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6899      	ldr	r1, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	899a      	ldrh	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7958      	ldrb	r0, [r3, #5]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4603      	mov	r3, r0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f979 	bl	8007ea4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	761a      	strb	r2, [r3, #24]
      break;
 8007bc4:	e14e      	b.n	8007e64 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	795b      	ldrb	r3, [r3, #5]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f004 f93d 	bl	800be4c <USBH_LL_GetURBState>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d111      	bne.n	8007c00 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2207      	movs	r2, #7
 8007be0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2203      	movs	r2, #3
 8007be6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f000 fb59 	bl	80082b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bfe:	e12c      	b.n	8007e5a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d113      	bne.n	8007c2e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	220c      	movs	r2, #12
 8007c0a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c24:	2200      	movs	r2, #0
 8007c26:	4619      	mov	r1, r3
 8007c28:	f000 fb42 	bl	80082b0 <osMessagePut>
      break;
 8007c2c:	e115      	b.n	8007e5a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d111      	bne.n	8007c58 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2205      	movs	r2, #5
 8007c38:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4619      	mov	r1, r3
 8007c52:	f000 fb2d 	bl	80082b0 <osMessagePut>
      break;
 8007c56:	e100      	b.n	8007e5a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	f040 80fd 	bne.w	8007e5a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	220b      	movs	r2, #11
 8007c64:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c66:	2302      	movs	r3, #2
 8007c68:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4619      	mov	r1, r3
 8007c82:	f000 fb15 	bl	80082b0 <osMessagePut>
      break;
 8007c86:	e0e8      	b.n	8007e5a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	791b      	ldrb	r3, [r3, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f92c 	bl	8007eee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	761a      	strb	r2, [r3, #24]

      break;
 8007ca8:	e0dc      	b.n	8007e64 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f004 f8cb 	bl	800be4c <USBH_LL_GetURBState>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d113      	bne.n	8007ce8 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	220d      	movs	r2, #13
 8007cc4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f000 fae5 	bl	80082b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ce6:	e0ba      	b.n	8007e5e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d111      	bne.n	8007d12 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220b      	movs	r2, #11
 8007cf2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f000 fad0 	bl	80082b0 <osMessagePut>
      break;
 8007d10:	e0a5      	b.n	8007e5e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	f040 80a2 	bne.w	8007e5e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2203      	movs	r2, #3
 8007d22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d32:	2200      	movs	r2, #0
 8007d34:	4619      	mov	r1, r3
 8007d36:	f000 fabb 	bl	80082b0 <osMessagePut>
      break;
 8007d3a:	e090      	b.n	8007e5e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	795a      	ldrb	r2, [r3, #5]
 8007d40:	2301      	movs	r3, #1
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8aa 	bl	8007ea4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220a      	movs	r2, #10
 8007d60:	761a      	strb	r2, [r3, #24]
      break;
 8007d62:	e07f      	b.n	8007e64 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	795b      	ldrb	r3, [r3, #5]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f004 f86e 	bl	800be4c <USBH_LL_GetURBState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d113      	bne.n	8007da2 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	220d      	movs	r2, #13
 8007d82:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f000 fa88 	bl	80082b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007da0:	e05f      	b.n	8007e62 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d111      	bne.n	8007dcc <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2209      	movs	r2, #9
 8007dac:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2203      	movs	r2, #3
 8007db2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f000 fa73 	bl	80082b0 <osMessagePut>
      break;
 8007dca:	e04a      	b.n	8007e62 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d147      	bne.n	8007e62 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220b      	movs	r2, #11
 8007dd6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dec:	2200      	movs	r2, #0
 8007dee:	4619      	mov	r1, r3
 8007df0:	f000 fa5e 	bl	80082b0 <osMessagePut>
      break;
 8007df4:	e035      	b.n	8007e62 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7e5b      	ldrb	r3, [r3, #25]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	765a      	strb	r2, [r3, #25]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7e5b      	ldrb	r3, [r3, #25]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d806      	bhi.n	8007e18 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e16:	e025      	b.n	8007e64 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e1e:	2106      	movs	r1, #6
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	795b      	ldrb	r3, [r3, #5]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f90d 	bl	8008050 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	791b      	ldrb	r3, [r3, #4]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f907 	bl	8008050 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4c:	e00a      	b.n	8007e64 <USBH_HandleControl+0x488>

    default:
      break;
 8007e4e:	bf00      	nop
 8007e50:	e008      	b.n	8007e64 <USBH_HandleControl+0x488>
      break;
 8007e52:	bf00      	nop
 8007e54:	e006      	b.n	8007e64 <USBH_HandleControl+0x488>
      break;
 8007e56:	bf00      	nop
 8007e58:	e004      	b.n	8007e64 <USBH_HandleControl+0x488>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <USBH_HandleControl+0x488>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <USBH_HandleControl+0x488>
      break;
 8007e62:	bf00      	nop
  }

  return status;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop

08007e70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af04      	add	r7, sp, #16
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e7e:	79f9      	ldrb	r1, [r7, #7]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	2308      	movs	r3, #8
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	2200      	movs	r2, #0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f003 ffa8 	bl	800bdea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af04      	add	r7, sp, #16
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	80fb      	strh	r3, [r7, #6]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ec8:	7979      	ldrb	r1, [r7, #5]
 8007eca:	7e3b      	ldrb	r3, [r7, #24]
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	2200      	movs	r2, #0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f003 ff83 	bl	800bdea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	af04      	add	r7, sp, #16
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	461a      	mov	r2, r3
 8007efc:	460b      	mov	r3, r1
 8007efe:	80fb      	strh	r3, [r7, #6]
 8007f00:	4613      	mov	r3, r2
 8007f02:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f04:	7979      	ldrb	r1, [r7, #5]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9303      	str	r3, [sp, #12]
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	9302      	str	r3, [sp, #8]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	2301      	movs	r3, #1
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	2201      	movs	r2, #1
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f003 ff65 	bl	800bdea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f20:	2300      	movs	r3, #0

}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af04      	add	r7, sp, #16
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	4611      	mov	r1, r2
 8007f36:	461a      	mov	r2, r3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	80fb      	strh	r3, [r7, #6]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f4e:	7979      	ldrb	r1, [r7, #5]
 8007f50:	7e3b      	ldrb	r3, [r7, #24]
 8007f52:	9303      	str	r3, [sp, #12]
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	9302      	str	r3, [sp, #8]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	2302      	movs	r3, #2
 8007f62:	2200      	movs	r2, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f003 ff40 	bl	800bdea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	461a      	mov	r2, r3
 8007f82:	460b      	mov	r3, r1
 8007f84:	80fb      	strh	r3, [r7, #6]
 8007f86:	4613      	mov	r3, r2
 8007f88:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f8a:	7979      	ldrb	r1, [r7, #5]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f003 ff22 	bl	800bdea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af04      	add	r7, sp, #16
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	70fb      	strb	r3, [r7, #3]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70bb      	strb	r3, [r7, #2]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fca:	7878      	ldrb	r0, [r7, #1]
 8007fcc:	78ba      	ldrb	r2, [r7, #2]
 8007fce:	78f9      	ldrb	r1, [r7, #3]
 8007fd0:	8b3b      	ldrh	r3, [r7, #24]
 8007fd2:	9302      	str	r3, [sp, #8]
 8007fd4:	7d3b      	ldrb	r3, [r7, #20]
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	7c3b      	ldrb	r3, [r7, #16]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	4603      	mov	r3, r0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f003 feb5 	bl	800bd4e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f003 fed4 	bl	800bdac <USBH_LL_ClosePipe>

  return USBH_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f836 	bl	800808c <USBH_GetFreePipe>
 8008020:	4603      	mov	r3, r0
 8008022:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800802a:	4293      	cmp	r3, r2
 800802c:	d00a      	beq.n	8008044 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	33e0      	adds	r3, #224	; 0xe0
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008044:	89fb      	ldrh	r3, [r7, #14]
 8008046:	b2db      	uxtb	r3, r3
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b0a      	cmp	r3, #10
 8008060:	d80d      	bhi.n	800807e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	33e0      	adds	r3, #224	; 0xe0
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	33e0      	adds	r3, #224	; 0xe0
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
 800809c:	e00f      	b.n	80080be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33e0      	adds	r3, #224	; 0xe0
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	e007      	b.n	80080c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	3301      	adds	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b0a      	cmp	r3, #10
 80080c2:	d9ec      	bls.n	800809e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080e6:	2b84      	cmp	r3, #132	; 0x84
 80080e8:	d005      	beq.n	80080f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	3303      	adds	r3, #3
 80080f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80080f6:	68fb      	ldr	r3, [r7, #12]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800810a:	f3ef 8305 	mrs	r3, IPSR
 800810e:	607b      	str	r3, [r7, #4]
  return(result);
 8008110:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008112:	2b00      	cmp	r3, #0
 8008114:	bf14      	ite	ne
 8008116:	2301      	movne	r3, #1
 8008118:	2300      	moveq	r3, #0
 800811a:	b2db      	uxtb	r3, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800812c:	f001 fac6 	bl	80096bc <vTaskStartScheduler>
  
  return osOK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	bd80      	pop	{r7, pc}

08008136 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008138:	b089      	sub	sp, #36	; 0x24
 800813a:	af04      	add	r7, sp, #16
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d020      	beq.n	800818a <osThreadCreate+0x54>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01c      	beq.n	800818a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685c      	ldr	r4, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681d      	ldr	r5, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691e      	ldr	r6, [r3, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff ffb6 	bl	80080d4 <makeFreeRtosPriority>
 8008168:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008172:	9202      	str	r2, [sp, #8]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	9100      	str	r1, [sp, #0]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	4632      	mov	r2, r6
 800817c:	4629      	mov	r1, r5
 800817e:	4620      	mov	r0, r4
 8008180:	f001 f8d9 	bl	8009336 <xTaskCreateStatic>
 8008184:	4603      	mov	r3, r0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e01c      	b.n	80081c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685c      	ldr	r4, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008196:	b29e      	uxth	r6, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff ff98 	bl	80080d4 <makeFreeRtosPriority>
 80081a4:	4602      	mov	r2, r0
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	9200      	str	r2, [sp, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	4632      	mov	r2, r6
 80081b2:	4629      	mov	r1, r5
 80081b4:	4620      	mov	r0, r4
 80081b6:	f001 f918 	bl	80093ea <xTaskCreate>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d001      	beq.n	80081c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e000      	b.n	80081c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081c4:	68fb      	ldr	r3, [r7, #12]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <osDelay+0x16>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	e000      	b.n	80081e6 <osDelay+0x18>
 80081e4:	2301      	movs	r3, #1
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fa34 	bl	8009654 <vTaskDelay>
  
  return osOK;
 80081ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af02      	add	r7, sp, #8
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d10b      	bne.n	8008226 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	2303      	movs	r3, #3
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4613      	mov	r3, r2
 8008218:	2200      	movs	r2, #0
 800821a:	2100      	movs	r1, #0
 800821c:	2001      	movs	r0, #1
 800821e:	f000 fa17 	bl	8008650 <xQueueGenericCreateStatic>
 8008222:	4603      	mov	r3, r0
 8008224:	e016      	b.n	8008254 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	e014      	b.n	8008254 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d110      	bne.n	8008252 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008230:	2203      	movs	r2, #3
 8008232:	2100      	movs	r1, #0
 8008234:	2001      	movs	r0, #1
 8008236:	f000 fa7e 	bl	8008736 <xQueueGenericCreate>
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <osSemaphoreCreate+0x58>
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	2100      	movs	r1, #0
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fad3 	bl	80087f4 <xQueueGenericSend>
      return sema;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	e000      	b.n	8008254 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008252:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b085      	sub	sp, #20
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d012      	beq.n	8008294 <osMessageCreate+0x38>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00e      	beq.n	8008294 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6859      	ldr	r1, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68dc      	ldr	r4, [r3, #12]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	4623      	mov	r3, r4
 800828c:	f000 f9e0 	bl	8008650 <xQueueGenericCreateStatic>
 8008290:	4603      	mov	r3, r0
 8008292:	e008      	b.n	80082a6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	4619      	mov	r1, r3
 80082a0:	f000 fa49 	bl	8008736 <xQueueGenericCreate>
 80082a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}
	...

080082b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <osMessagePut+0x1e>
    ticks = 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80082ce:	f7ff ff19 	bl	8008104 <inHandlerMode>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d018      	beq.n	800830a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80082d8:	f107 0210 	add.w	r2, r7, #16
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	2300      	movs	r3, #0
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fb80 	bl	80089e8 <xQueueGenericSendFromISR>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d001      	beq.n	80082f2 <osMessagePut+0x42>
      return osErrorOS;
 80082ee:	23ff      	movs	r3, #255	; 0xff
 80082f0:	e018      	b.n	8008324 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d014      	beq.n	8008322 <osMessagePut+0x72>
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <osMessagePut+0x7c>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	e00b      	b.n	8008322 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800830a:	f107 0108 	add.w	r1, r7, #8
 800830e:	2300      	movs	r3, #0
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fa6e 	bl	80087f4 <xQueueGenericSend>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d001      	beq.n	8008322 <osMessagePut+0x72>
      return osErrorOS;
 800831e:	23ff      	movs	r3, #255	; 0xff
 8008320:	e000      	b.n	8008324 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b08b      	sub	sp, #44	; 0x2c
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800834a:	2380      	movs	r3, #128	; 0x80
 800834c:	617b      	str	r3, [r7, #20]
    return event;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	461c      	mov	r4, r3
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800835a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800835e:	e054      	b.n	800840a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008360:	2300      	movs	r3, #0
 8008362:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836e:	d103      	bne.n	8008378 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008370:	f04f 33ff 	mov.w	r3, #4294967295
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
 8008376:	e009      	b.n	800838c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d006      	beq.n	800838c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <osMessageGet+0x5c>
      ticks = 1;
 8008388:	2301      	movs	r3, #1
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800838c:	f7ff feba 	bl	8008104 <inHandlerMode>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01c      	beq.n	80083d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008396:	f107 0220 	add.w	r2, r7, #32
 800839a:	f107 0314 	add.w	r3, r7, #20
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	68b8      	ldr	r0, [r7, #8]
 80083a4:	f000 fe22 	bl	8008fec <xQueueReceiveFromISR>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d102      	bne.n	80083b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80083ae:	2310      	movs	r3, #16
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	e001      	b.n	80083b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d01d      	beq.n	80083fa <osMessageGet+0xca>
 80083be:	4b15      	ldr	r3, [pc, #84]	; (8008414 <osMessageGet+0xe4>)
 80083c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	e014      	b.n	80083fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80083d0:	f107 0314 	add.w	r3, r7, #20
 80083d4:	3304      	adds	r3, #4
 80083d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d8:	4619      	mov	r1, r3
 80083da:	68b8      	ldr	r0, [r7, #8]
 80083dc:	f000 fc22 	bl	8008c24 <xQueueReceive>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d102      	bne.n	80083ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80083e6:	2310      	movs	r3, #16
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e006      	b.n	80083fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <osMessageGet+0xc6>
 80083f2:	2300      	movs	r3, #0
 80083f4:	e000      	b.n	80083f8 <osMessageGet+0xc8>
 80083f6:	2340      	movs	r3, #64	; 0x40
 80083f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	461c      	mov	r4, r3
 80083fe:	f107 0314 	add.w	r3, r7, #20
 8008402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	372c      	adds	r7, #44	; 0x2c
 800840e:	46bd      	mov	sp, r7
 8008410:	bd90      	pop	{r4, r7, pc}
 8008412:	bf00      	nop
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f103 0208 	add.w	r2, r3, #8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f103 0208 	add.w	r2, r3, #8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d103      	bne.n	80084da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e00c      	b.n	80084f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3308      	adds	r3, #8
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e002      	b.n	80084e8 <vListInsert+0x2e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d2f6      	bcs.n	80084e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6852      	ldr	r2, [r2, #4]
 800854c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d103      	bne.n	8008560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1e5a      	subs	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	e7fe      	b.n	80085a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80085a8:	f001 ffd8 	bl	800a55c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b4:	68f9      	ldr	r1, [r7, #12]
 80085b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d8:	3b01      	subs	r3, #1
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	441a      	add	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	22ff      	movs	r2, #255	; 0xff
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d114      	bne.n	8008628 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01a      	beq.n	800863c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3310      	adds	r3, #16
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fa94 	bl	8009b38 <xTaskRemoveFromEventList>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d012      	beq.n	800863c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008616:	4b0d      	ldr	r3, [pc, #52]	; (800864c <xQueueGenericReset+0xcc>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	e009      	b.n	800863c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fef3 	bl	8008418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3324      	adds	r3, #36	; 0x24
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff feee 	bl	8008418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800863c:	f001 ffbc 	bl	800a5b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008640:	2301      	movs	r3, #1
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <xQueueGenericCreateStatic+0x28>
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28
 8008676:	e7fe      	b.n	8008676 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <xQueueGenericCreateStatic+0x42>
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
 8008690:	e7fe      	b.n	8008690 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <xQueueGenericCreateStatic+0x4e>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <xQueueGenericCreateStatic+0x52>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericCreateStatic+0x54>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d109      	bne.n	80086bc <xQueueGenericCreateStatic+0x6c>
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	623b      	str	r3, [r7, #32]
 80086ba:	e7fe      	b.n	80086ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <xQueueGenericCreateStatic+0x78>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <xQueueGenericCreateStatic+0x7c>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <xQueueGenericCreateStatic+0x7e>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <xQueueGenericCreateStatic+0x96>
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086e6:	2348      	movs	r3, #72	; 0x48
 80086e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b48      	cmp	r3, #72	; 0x48
 80086ee:	d009      	beq.n	8008704 <xQueueGenericCreateStatic+0xb4>
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	e7fe      	b.n	8008702 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008704:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00d      	beq.n	800872c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008718:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f844 	bl	80087b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3730      	adds	r7, #48	; 0x30
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008736:	b580      	push	{r7, lr}
 8008738:	b08a      	sub	sp, #40	; 0x28
 800873a:	af02      	add	r7, sp, #8
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	4613      	mov	r3, r2
 8008742:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <xQueueGenericCreate+0x28>
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	e7fe      	b.n	800875c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008764:	2300      	movs	r3, #0
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e004      	b.n	8008774 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	fb02 f303 	mul.w	r3, r2, r3
 8008772:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3348      	adds	r3, #72	; 0x48
 8008778:	4618      	mov	r0, r3
 800877a:	f002 f809 	bl	800a790 <pvPortMalloc>
 800877e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	3348      	adds	r3, #72	; 0x48
 800878e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008798:	79fa      	ldrb	r2, [r7, #7]
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f805 	bl	80087b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087aa:	69bb      	ldr	r3, [r7, #24]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d103      	bne.n	80087d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087e2:	2101      	movs	r1, #1
 80087e4:	69b8      	ldr	r0, [r7, #24]
 80087e6:	f7ff fecb 	bl	8008580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008802:	2300      	movs	r3, #0
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <xQueueGenericSend+0x30>
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
 8008822:	e7fe      	b.n	8008822 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <xQueueGenericSend+0x3e>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueGenericSend+0x42>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueGenericSend+0x44>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <xQueueGenericSend+0x5c>
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
 800884e:	e7fe      	b.n	800884e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d103      	bne.n	800885e <xQueueGenericSend+0x6a>
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <xQueueGenericSend+0x6e>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <xQueueGenericSend+0x70>
 8008862:	2300      	movs	r3, #0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <xQueueGenericSend+0x88>
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
 800887a:	e7fe      	b.n	800887a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800887c:	f001 fb14 	bl	8009ea8 <xTaskGetSchedulerState>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <xQueueGenericSend+0x98>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <xQueueGenericSend+0x9c>
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <xQueueGenericSend+0x9e>
 8008890:	2300      	movs	r3, #0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <xQueueGenericSend+0xb6>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	61fb      	str	r3, [r7, #28]
 80088a8:	e7fe      	b.n	80088a8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088aa:	f001 fe57 	bl	800a55c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d302      	bcc.n	80088c0 <xQueueGenericSend+0xcc>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d129      	bne.n	8008914 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c6:	f000 fc26 	bl	8009116 <prvCopyDataToQueue>
 80088ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d010      	beq.n	80088f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	3324      	adds	r3, #36	; 0x24
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 f92d 	bl	8009b38 <xTaskRemoveFromEventList>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d013      	beq.n	800890c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088e4:	4b3f      	ldr	r3, [pc, #252]	; (80089e4 <xQueueGenericSend+0x1f0>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	e00a      	b.n	800890c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088fc:	4b39      	ldr	r3, [pc, #228]	; (80089e4 <xQueueGenericSend+0x1f0>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800890c:	f001 fe54 	bl	800a5b8 <vPortExitCritical>
				return pdPASS;
 8008910:	2301      	movs	r3, #1
 8008912:	e063      	b.n	80089dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800891a:	f001 fe4d 	bl	800a5b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800891e:	2300      	movs	r3, #0
 8008920:	e05c      	b.n	80089dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008928:	f107 0314 	add.w	r3, r7, #20
 800892c:	4618      	mov	r0, r3
 800892e:	f001 f965 	bl	8009bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008932:	2301      	movs	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008936:	f001 fe3f 	bl	800a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800893a:	f000 ff1d 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800893e:	f001 fe0d 	bl	800a55c <vPortEnterCritical>
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008948:	b25b      	sxtb	r3, r3
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d103      	bne.n	8008958 <xQueueGenericSend+0x164>
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895e:	b25b      	sxtb	r3, r3
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d103      	bne.n	800896e <xQueueGenericSend+0x17a>
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800896e:	f001 fe23 	bl	800a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008972:	1d3a      	adds	r2, r7, #4
 8008974:	f107 0314 	add.w	r3, r7, #20
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f001 f954 	bl	8009c28 <xTaskCheckForTimeOut>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d124      	bne.n	80089d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008988:	f000 fcbd 	bl	8009306 <prvIsQueueFull>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d018      	beq.n	80089c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	3310      	adds	r3, #16
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f001 f8a8 	bl	8009af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a2:	f000 fc48 	bl	8009236 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089a6:	f000 fef5 	bl	8009794 <xTaskResumeAll>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f47f af7c 	bne.w	80088aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <xQueueGenericSend+0x1f0>)
 80089b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	e772      	b.n	80088aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c6:	f000 fc36 	bl	8009236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089ca:	f000 fee3 	bl	8009794 <xTaskResumeAll>
 80089ce:	e76c      	b.n	80088aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d2:	f000 fc30 	bl	8009236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089d6:	f000 fedd 	bl	8009794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3738      	adds	r7, #56	; 0x38
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08e      	sub	sp, #56	; 0x38
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <xQueueGenericSendFromISR+0x2c>
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
 8008a12:	e7fe      	b.n	8008a12 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d103      	bne.n	8008a22 <xQueueGenericSendFromISR+0x3a>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <xQueueGenericSendFromISR+0x3e>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <xQueueGenericSendFromISR+0x40>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <xQueueGenericSendFromISR+0x58>
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	623b      	str	r3, [r7, #32]
 8008a3e:	e7fe      	b.n	8008a3e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d103      	bne.n	8008a4e <xQueueGenericSendFromISR+0x66>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <xQueueGenericSendFromISR+0x6a>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <xQueueGenericSendFromISR+0x6c>
 8008a52:	2300      	movs	r3, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <xQueueGenericSendFromISR+0x84>
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	61fb      	str	r3, [r7, #28]
 8008a6a:	e7fe      	b.n	8008a6a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a6c:	f001 fe52 	bl	800a714 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a70:	f3ef 8211 	mrs	r2, BASEPRI
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61ba      	str	r2, [r7, #24]
 8008a86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <xQueueGenericSendFromISR+0xb6>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d12c      	bne.n	8008af8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aae:	f000 fb32 	bl	8009116 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ab2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	d112      	bne.n	8008ae2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d016      	beq.n	8008af2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 f835 	bl	8009b38 <xTaskRemoveFromEventList>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	e007      	b.n	8008af2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	b25a      	sxtb	r2, r3
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008af2:	2301      	movs	r3, #1
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008af6:	e001      	b.n	8008afc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3738      	adds	r7, #56	; 0x38
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08e      	sub	sp, #56	; 0x38
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d109      	bne.n	8008b38 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	623b      	str	r3, [r7, #32]
 8008b36:	e7fe      	b.n	8008b36 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <xQueueGiveFromISR+0x44>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	e7fe      	b.n	8008b52 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <xQueueGiveFromISR+0x54>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <xQueueGiveFromISR+0x58>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <xQueueGiveFromISR+0x5a>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <xQueueGiveFromISR+0x72>
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	e7fe      	b.n	8008b80 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b82:	f001 fdc7 	bl	800a714 <vPortValidateInterruptPriority>
	__asm volatile
 8008b86:	f3ef 8211 	mrs	r2, BASEPRI
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	617a      	str	r2, [r7, #20]
 8008b9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008b9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d22b      	bcs.n	8008c0a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d112      	bne.n	8008bf4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d016      	beq.n	8008c04 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	3324      	adds	r3, #36	; 0x24
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 ffac 	bl	8009b38 <xTaskRemoveFromEventList>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	e007      	b.n	8008c04 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	b25a      	sxtb	r2, r3
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c04:	2301      	movs	r3, #1
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	e001      	b.n	8008c0e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3738      	adds	r7, #56	; 0x38
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08c      	sub	sp, #48	; 0x30
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <xQueueReceive+0x2e>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	623b      	str	r3, [r7, #32]
 8008c50:	e7fe      	b.n	8008c50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <xQueueReceive+0x3c>
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <xQueueReceive+0x40>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e000      	b.n	8008c66 <xQueueReceive+0x42>
 8008c64:	2300      	movs	r3, #0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <xQueueReceive+0x5a>
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	e7fe      	b.n	8008c7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c7e:	f001 f913 	bl	8009ea8 <xTaskGetSchedulerState>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <xQueueReceive+0x6a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <xQueueReceive+0x6e>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <xQueueReceive+0x70>
 8008c92:	2300      	movs	r3, #0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <xQueueReceive+0x88>
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	e7fe      	b.n	8008caa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cac:	f001 fc56 	bl	800a55c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01f      	beq.n	8008cfc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc0:	f000 fa93 	bl	80091ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00f      	beq.n	8008cf4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 ff2d 	bl	8009b38 <xTaskRemoveFromEventList>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <xQueueReceive+0x1b4>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cf4:	f001 fc60 	bl	800a5b8 <vPortExitCritical>
				return pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e069      	b.n	8008dd0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d02:	f001 fc59 	bl	800a5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e062      	b.n	8008dd0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d10:	f107 0310 	add.w	r3, r7, #16
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 ff71 	bl	8009bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d1e:	f001 fc4b 	bl	800a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d22:	f000 fd29 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d26:	f001 fc19 	bl	800a55c <vPortEnterCritical>
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d103      	bne.n	8008d40 <xQueueReceive+0x11c>
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueReceive+0x132>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d56:	f001 fc2f 	bl	800a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 ff60 	bl	8009c28 <xTaskCheckForTimeOut>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d123      	bne.n	8008db6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d70:	f000 fab3 	bl	80092da <prvIsQueueEmpty>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d017      	beq.n	8008daa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	3324      	adds	r3, #36	; 0x24
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 feb4 	bl	8009af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8a:	f000 fa54 	bl	8009236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d8e:	f000 fd01 	bl	8009794 <xTaskResumeAll>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d189      	bne.n	8008cac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <xQueueReceive+0x1b4>)
 8008d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	e780      	b.n	8008cac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dac:	f000 fa43 	bl	8009236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008db0:	f000 fcf0 	bl	8009794 <xTaskResumeAll>
 8008db4:	e77a      	b.n	8008cac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db8:	f000 fa3d 	bl	8009236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dbc:	f000 fcea 	bl	8009794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc2:	f000 fa8a 	bl	80092da <prvIsQueueEmpty>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f af6f 	beq.w	8008cac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3730      	adds	r7, #48	; 0x30
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08e      	sub	sp, #56	; 0x38
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <xQueueSemaphoreTake+0x30>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	623b      	str	r3, [r7, #32]
 8008e0a:	e7fe      	b.n	8008e0a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d009      	beq.n	8008e28 <xQueueSemaphoreTake+0x4c>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	e7fe      	b.n	8008e26 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e28:	f001 f83e 	bl	8009ea8 <xTaskGetSchedulerState>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <xQueueSemaphoreTake+0x5c>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <xQueueSemaphoreTake+0x60>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <xQueueSemaphoreTake+0x62>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <xQueueSemaphoreTake+0x7a>
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	61bb      	str	r3, [r7, #24]
 8008e54:	e7fe      	b.n	8008e54 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e56:	f001 fb81 	bl	800a55c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d024      	beq.n	8008eb0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	1e5a      	subs	r2, r3, #1
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e76:	f001 f9d1 	bl	800a21c <pvTaskIncrementMutexHeldCount>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00f      	beq.n	8008ea8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	3310      	adds	r3, #16
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fe53 	bl	8009b38 <xTaskRemoveFromEventList>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e98:	4b53      	ldr	r3, [pc, #332]	; (8008fe8 <xQueueSemaphoreTake+0x20c>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ea8:	f001 fb86 	bl	800a5b8 <vPortExitCritical>
				return pdPASS;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e096      	b.n	8008fde <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d110      	bne.n	8008ed8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d009      	beq.n	8008ed0 <xQueueSemaphoreTake+0xf4>
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e7fe      	b.n	8008ece <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ed0:	f001 fb72 	bl	800a5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e082      	b.n	8008fde <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fe8a 	bl	8009bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eec:	f001 fb64 	bl	800a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ef0:	f000 fc42 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ef4:	f001 fb32 	bl	800a55c <vPortEnterCritical>
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008efe:	b25b      	sxtb	r3, r3
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f04:	d103      	bne.n	8008f0e <xQueueSemaphoreTake+0x132>
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1a:	d103      	bne.n	8008f24 <xQueueSemaphoreTake+0x148>
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f24:	f001 fb48 	bl	800a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f28:	463a      	mov	r2, r7
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fe79 	bl	8009c28 <xTaskCheckForTimeOut>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d132      	bne.n	8008fa2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f3e:	f000 f9cc 	bl	80092da <prvIsQueueEmpty>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d026      	beq.n	8008f96 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d109      	bne.n	8008f64 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008f50:	f001 fb04 	bl	800a55c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 ffc3 	bl	8009ee4 <xTaskPriorityInherit>
 8008f5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f60:	f001 fb2a 	bl	800a5b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	3324      	adds	r3, #36	; 0x24
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fdbf 	bl	8009af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f74:	f000 f95f 	bl	8009236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f78:	f000 fc0c 	bl	8009794 <xTaskResumeAll>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f47f af69 	bne.w	8008e56 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008f84:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <xQueueSemaphoreTake+0x20c>)
 8008f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	e75f      	b.n	8008e56 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f98:	f000 f94d 	bl	8009236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f9c:	f000 fbfa 	bl	8009794 <xTaskResumeAll>
 8008fa0:	e759      	b.n	8008e56 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fa4:	f000 f947 	bl	8009236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fa8:	f000 fbf4 	bl	8009794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fae:	f000 f994 	bl	80092da <prvIsQueueEmpty>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f43f af4e 	beq.w	8008e56 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008fc0:	f001 facc 	bl	800a55c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc6:	f000 f88e 	bl	80090e6 <prvGetDisinheritPriorityAfterTimeout>
 8008fca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f88a 	bl	800a0ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008fd8:	f001 faee 	bl	800a5b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3738      	adds	r7, #56	; 0x38
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	; 0x38
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <xQueueReceiveFromISR+0x2a>
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	623b      	str	r3, [r7, #32]
 8009014:	e7fe      	b.n	8009014 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <xQueueReceiveFromISR+0x38>
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <xQueueReceiveFromISR+0x3c>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <xQueueReceiveFromISR+0x3e>
 8009028:	2300      	movs	r3, #0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <xQueueReceiveFromISR+0x56>
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e7fe      	b.n	8009040 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009042:	f001 fb67 	bl	800a714 <vPortValidateInterruptPriority>
	__asm volatile
 8009046:	f3ef 8211 	mrs	r2, BASEPRI
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	61ba      	str	r2, [r7, #24]
 800905c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800905e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02f      	beq.n	80090ce <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907c:	f000 f8b5 	bl	80091ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	1e5a      	subs	r2, r3, #1
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009090:	d112      	bne.n	80090b8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d016      	beq.n	80090c8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	3310      	adds	r3, #16
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fd4a 	bl	8009b38 <xTaskRemoveFromEventList>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00e      	beq.n	80090c8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	e007      	b.n	80090c8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80090b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090bc:	3301      	adds	r3, #1
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	b25a      	sxtb	r2, r3
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80090c8:	2301      	movs	r3, #1
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
 80090cc:	e001      	b.n	80090d2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	637b      	str	r3, [r7, #52]	; 0x34
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3738      	adds	r7, #56	; 0x38
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d006      	beq.n	8009104 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f1c3 0307 	rsb	r3, r3, #7
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	e001      	b.n	8009108 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009104:	2300      	movs	r3, #0
 8009106:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009108:	68fb      	ldr	r3, [r7, #12]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10d      	bne.n	8009150 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d14d      	bne.n	80091d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 ff4f 	bl	8009fe4 <xTaskPriorityDisinherit>
 8009146:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	609a      	str	r2, [r3, #8]
 800914e:	e043      	b.n	80091d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d119      	bne.n	800918a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6858      	ldr	r0, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	461a      	mov	r2, r3
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	f002 ff87 	bl	800c074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	441a      	add	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	429a      	cmp	r2, r3
 800917e:	d32b      	bcc.n	80091d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	605a      	str	r2, [r3, #4]
 8009188:	e026      	b.n	80091d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68d8      	ldr	r0, [r3, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	461a      	mov	r2, r3
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	f002 ff6d 	bl	800c074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	425b      	negs	r3, r3
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d207      	bcs.n	80091c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	425b      	negs	r3, r3
 80091c0:	441a      	add	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d105      	bne.n	80091d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d018      	beq.n	800922e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	429a      	cmp	r2, r3
 8009214:	d303      	bcc.n	800921e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68d9      	ldr	r1, [r3, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	461a      	mov	r2, r3
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f002 ff23 	bl	800c074 <memcpy>
	}
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800923e:	f001 f98d 	bl	800a55c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009248:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800924a:	e011      	b.n	8009270 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	d012      	beq.n	800927a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3324      	adds	r3, #36	; 0x24
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fc6d 	bl	8009b38 <xTaskRemoveFromEventList>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009264:	f000 fd40 	bl	8009ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	3b01      	subs	r3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dce9      	bgt.n	800924c <prvUnlockQueue+0x16>
 8009278:	e000      	b.n	800927c <prvUnlockQueue+0x46>
					break;
 800927a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	22ff      	movs	r2, #255	; 0xff
 8009280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009284:	f001 f998 	bl	800a5b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009288:	f001 f968 	bl	800a55c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009292:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009294:	e011      	b.n	80092ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d012      	beq.n	80092c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3310      	adds	r3, #16
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fc48 	bl	8009b38 <xTaskRemoveFromEventList>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092ae:	f000 fd1b 	bl	8009ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dce9      	bgt.n	8009296 <prvUnlockQueue+0x60>
 80092c2:	e000      	b.n	80092c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	22ff      	movs	r2, #255	; 0xff
 80092ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092ce:	f001 f973 	bl	800a5b8 <vPortExitCritical>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092e2:	f001 f93b 	bl	800a55c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092ee:	2301      	movs	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e001      	b.n	80092f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092f8:	f001 f95e 	bl	800a5b8 <vPortExitCritical>

	return xReturn;
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800930e:	f001 f925 	bl	800a55c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931a:	429a      	cmp	r2, r3
 800931c:	d102      	bne.n	8009324 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800931e:	2301      	movs	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	e001      	b.n	8009328 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009328:	f001 f946 	bl	800a5b8 <vPortExitCritical>

	return xReturn;
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009336:	b580      	push	{r7, lr}
 8009338:	b08e      	sub	sp, #56	; 0x38
 800933a:	af04      	add	r7, sp, #16
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <xTaskCreateStatic+0x28>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	623b      	str	r3, [r7, #32]
 800935c:	e7fe      	b.n	800935c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <xTaskCreateStatic+0x42>
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	e7fe      	b.n	8009376 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009378:	2354      	movs	r3, #84	; 0x54
 800937a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b54      	cmp	r3, #84	; 0x54
 8009380:	d009      	beq.n	8009396 <xTaskCreateStatic+0x60>
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	61bb      	str	r3, [r7, #24]
 8009394:	e7fe      	b.n	8009394 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009396:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01e      	beq.n	80093dc <xTaskCreateStatic+0xa6>
 800939e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01b      	beq.n	80093dc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	2202      	movs	r2, #2
 80093b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093b6:	2300      	movs	r3, #0
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f850 	bl	8009474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093d6:	f000 f8d3 	bl	8009580 <prvAddNewTaskToReadyList>
 80093da:	e001      	b.n	80093e0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093e0:	697b      	ldr	r3, [r7, #20]
	}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3728      	adds	r7, #40	; 0x28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b08c      	sub	sp, #48	; 0x30
 80093ee:	af04      	add	r7, sp, #16
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 f9c6 	bl	800a790 <pvPortMalloc>
 8009404:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00e      	beq.n	800942a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800940c:	2054      	movs	r0, #84	; 0x54
 800940e:	f001 f9bf 	bl	800a790 <pvPortMalloc>
 8009412:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	631a      	str	r2, [r3, #48]	; 0x30
 8009420:	e005      	b.n	800942e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009422:	6978      	ldr	r0, [r7, #20]
 8009424:	f001 fa76 	bl	800a914 <vPortFree>
 8009428:	e001      	b.n	800942e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d017      	beq.n	8009464 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800943c:	88fa      	ldrh	r2, [r7, #6]
 800943e:	2300      	movs	r3, #0
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 f80e 	bl	8009474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009458:	69f8      	ldr	r0, [r7, #28]
 800945a:	f000 f891 	bl	8009580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800945e:	2301      	movs	r3, #1
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	e002      	b.n	800946a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009464:	f04f 33ff 	mov.w	r3, #4294967295
 8009468:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800946a:	69bb      	ldr	r3, [r7, #24]
	}
 800946c:	4618      	mov	r0, r3
 800946e:	3720      	adds	r7, #32
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800948c:	3b01      	subs	r3, #1
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <prvInitialiseNewTask+0x46>
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e7fe      	b.n	80094b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]
 80094c4:	e012      	b.n	80094ec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	7819      	ldrb	r1, [r3, #0]
 80094ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	4413      	add	r3, r2
 80094d4:	3334      	adds	r3, #52	; 0x34
 80094d6:	460a      	mov	r2, r1
 80094d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d006      	beq.n	80094f4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	3301      	adds	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b0f      	cmp	r3, #15
 80094f0:	d9e9      	bls.n	80094c6 <prvInitialiseNewTask+0x52>
 80094f2:	e000      	b.n	80094f6 <prvInitialiseNewTask+0x82>
			{
				break;
 80094f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094fe:	e003      	b.n	8009508 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	2b06      	cmp	r3, #6
 800950c:	d901      	bls.n	8009512 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800950e:	2306      	movs	r3, #6
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009516:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	2200      	movs	r2, #0
 8009522:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	3304      	adds	r3, #4
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe ff95 	bl	8008458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	3318      	adds	r3, #24
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe ff90 	bl	8008458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800953c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	f1c3 0207 	rsb	r2, r3, #7
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800954c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	69b8      	ldr	r0, [r7, #24]
 8009562:	f000 fed5 	bl	800a310 <pxPortInitialiseStack>
 8009566:	4602      	mov	r2, r0
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009576:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009578:	bf00      	nop
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009588:	f000 ffe8 	bl	800a55c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800958c:	4b2a      	ldr	r3, [pc, #168]	; (8009638 <prvAddNewTaskToReadyList+0xb8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	4a29      	ldr	r2, [pc, #164]	; (8009638 <prvAddNewTaskToReadyList+0xb8>)
 8009594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009596:	4b29      	ldr	r3, [pc, #164]	; (800963c <prvAddNewTaskToReadyList+0xbc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800959e:	4a27      	ldr	r2, [pc, #156]	; (800963c <prvAddNewTaskToReadyList+0xbc>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095a4:	4b24      	ldr	r3, [pc, #144]	; (8009638 <prvAddNewTaskToReadyList+0xb8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d110      	bne.n	80095ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095ac:	f000 fbc2 	bl	8009d34 <prvInitialiseTaskLists>
 80095b0:	e00d      	b.n	80095ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095b2:	4b23      	ldr	r3, [pc, #140]	; (8009640 <prvAddNewTaskToReadyList+0xc0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <prvAddNewTaskToReadyList+0xbc>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d802      	bhi.n	80095ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095c8:	4a1c      	ldr	r2, [pc, #112]	; (800963c <prvAddNewTaskToReadyList+0xbc>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095ce:	4b1d      	ldr	r3, [pc, #116]	; (8009644 <prvAddNewTaskToReadyList+0xc4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <prvAddNewTaskToReadyList+0xc4>)
 80095d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	2201      	movs	r2, #1
 80095de:	409a      	lsls	r2, r3
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <prvAddNewTaskToReadyList+0xc8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	4a18      	ldr	r2, [pc, #96]	; (8009648 <prvAddNewTaskToReadyList+0xc8>)
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4a15      	ldr	r2, [pc, #84]	; (800964c <prvAddNewTaskToReadyList+0xcc>)
 80095f8:	441a      	add	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f7fe ff36 	bl	8008472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009606:	f000 ffd7 	bl	800a5b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800960a:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <prvAddNewTaskToReadyList+0xc0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00e      	beq.n	8009630 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <prvAddNewTaskToReadyList+0xbc>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	429a      	cmp	r2, r3
 800961e:	d207      	bcs.n	8009630 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <prvAddNewTaskToReadyList+0xd0>)
 8009622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200001b4 	.word	0x200001b4
 800963c:	200000b4 	.word	0x200000b4
 8009640:	200001c0 	.word	0x200001c0
 8009644:	200001d0 	.word	0x200001d0
 8009648:	200001bc 	.word	0x200001bc
 800964c:	200000b8 	.word	0x200000b8
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d016      	beq.n	8009694 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009666:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <vTaskDelay+0x60>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d009      	beq.n	8009682 <vTaskDelay+0x2e>
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	e7fe      	b.n	8009680 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009682:	f000 f879 	bl	8009778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009686:	2100      	movs	r1, #0
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fddb 	bl	800a244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800968e:	f000 f881 	bl	8009794 <xTaskResumeAll>
 8009692:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d107      	bne.n	80096aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800969a:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <vTaskDelay+0x64>)
 800969c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200001dc 	.word	0x200001dc
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	; 0x28
 80096c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ca:	463a      	mov	r2, r7
 80096cc:	1d39      	adds	r1, r7, #4
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4618      	mov	r0, r3
 80096d4:	f001 fa3a 	bl	800ab4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	9202      	str	r2, [sp, #8]
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	2300      	movs	r3, #0
 80096e8:	460a      	mov	r2, r1
 80096ea:	491d      	ldr	r1, [pc, #116]	; (8009760 <vTaskStartScheduler+0xa4>)
 80096ec:	481d      	ldr	r0, [pc, #116]	; (8009764 <vTaskStartScheduler+0xa8>)
 80096ee:	f7ff fe22 	bl	8009336 <xTaskCreateStatic>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <vTaskStartScheduler+0xac>)
 80096f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096f8:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <vTaskStartScheduler+0xac>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	e001      	b.n	800970a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d115      	bne.n	800973c <vTaskStartScheduler+0x80>
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <vTaskStartScheduler+0xb0>)
 8009724:	f04f 32ff 	mov.w	r2, #4294967295
 8009728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <vTaskStartScheduler+0xb4>)
 800972c:	2201      	movs	r2, #1
 800972e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009730:	4b10      	ldr	r3, [pc, #64]	; (8009774 <vTaskStartScheduler+0xb8>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009736:	f000 fe73 	bl	800a420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800973a:	e00d      	b.n	8009758 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009742:	d109      	bne.n	8009758 <vTaskStartScheduler+0x9c>
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	e7fe      	b.n	8009756 <vTaskStartScheduler+0x9a>
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	0800c264 	.word	0x0800c264
 8009764:	08009d01 	.word	0x08009d01
 8009768:	200001d8 	.word	0x200001d8
 800976c:	200001d4 	.word	0x200001d4
 8009770:	200001c0 	.word	0x200001c0
 8009774:	200001b8 	.word	0x200001b8

08009778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <vTaskSuspendAll+0x18>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	4a03      	ldr	r2, [pc, #12]	; (8009790 <vTaskSuspendAll+0x18>)
 8009784:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009786:	bf00      	nop
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	200001dc 	.word	0x200001dc

08009794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097a2:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <xTaskResumeAll+0x114>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <xTaskResumeAll+0x2a>
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	e7fe      	b.n	80097bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097be:	f000 fecd 	bl	800a55c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097c2:	4b39      	ldr	r3, [pc, #228]	; (80098a8 <xTaskResumeAll+0x114>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4a37      	ldr	r2, [pc, #220]	; (80098a8 <xTaskResumeAll+0x114>)
 80097ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097cc:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <xTaskResumeAll+0x114>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d161      	bne.n	8009898 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097d4:	4b35      	ldr	r3, [pc, #212]	; (80098ac <xTaskResumeAll+0x118>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d05d      	beq.n	8009898 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097dc:	e02e      	b.n	800983c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097de:	4b34      	ldr	r3, [pc, #208]	; (80098b0 <xTaskResumeAll+0x11c>)
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3318      	adds	r3, #24
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fe9e 	bl	800852c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe fe99 	bl	800852c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	2201      	movs	r2, #1
 8009800:	409a      	lsls	r2, r3
 8009802:	4b2c      	ldr	r3, [pc, #176]	; (80098b4 <xTaskResumeAll+0x120>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4313      	orrs	r3, r2
 8009808:	4a2a      	ldr	r2, [pc, #168]	; (80098b4 <xTaskResumeAll+0x120>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <xTaskResumeAll+0x124>)
 800981a:	441a      	add	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fe fe25 	bl	8008472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4b23      	ldr	r3, [pc, #140]	; (80098bc <xTaskResumeAll+0x128>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	429a      	cmp	r2, r3
 8009834:	d302      	bcc.n	800983c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009836:	4b22      	ldr	r3, [pc, #136]	; (80098c0 <xTaskResumeAll+0x12c>)
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800983c:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <xTaskResumeAll+0x11c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1cc      	bne.n	80097de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800984a:	f000 fb0d 	bl	8009e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800984e:	4b1d      	ldr	r3, [pc, #116]	; (80098c4 <xTaskResumeAll+0x130>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800985a:	f000 f837 	bl	80098cc <xTaskIncrementTick>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009864:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <xTaskResumeAll+0x12c>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f1      	bne.n	800985a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <xTaskResumeAll+0x130>)
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800987c:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <xTaskResumeAll+0x12c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <xTaskResumeAll+0x134>)
 800988a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009898:	f000 fe8e 	bl	800a5b8 <vPortExitCritical>

	return xAlreadyYielded;
 800989c:	68bb      	ldr	r3, [r7, #8]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200001dc 	.word	0x200001dc
 80098ac:	200001b4 	.word	0x200001b4
 80098b0:	20000174 	.word	0x20000174
 80098b4:	200001bc 	.word	0x200001bc
 80098b8:	200000b8 	.word	0x200000b8
 80098bc:	200000b4 	.word	0x200000b4
 80098c0:	200001c8 	.word	0x200001c8
 80098c4:	200001c4 	.word	0x200001c4
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098d6:	4b4e      	ldr	r3, [pc, #312]	; (8009a10 <xTaskIncrementTick+0x144>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f040 8087 	bne.w	80099ee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098e0:	4b4c      	ldr	r3, [pc, #304]	; (8009a14 <xTaskIncrementTick+0x148>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098e8:	4a4a      	ldr	r2, [pc, #296]	; (8009a14 <xTaskIncrementTick+0x148>)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d11f      	bne.n	8009934 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80098f4:	4b48      	ldr	r3, [pc, #288]	; (8009a18 <xTaskIncrementTick+0x14c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <xTaskIncrementTick+0x46>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	e7fe      	b.n	8009910 <xTaskIncrementTick+0x44>
 8009912:	4b41      	ldr	r3, [pc, #260]	; (8009a18 <xTaskIncrementTick+0x14c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	4b40      	ldr	r3, [pc, #256]	; (8009a1c <xTaskIncrementTick+0x150>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a3e      	ldr	r2, [pc, #248]	; (8009a18 <xTaskIncrementTick+0x14c>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	4a3e      	ldr	r2, [pc, #248]	; (8009a1c <xTaskIncrementTick+0x150>)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	4b3e      	ldr	r3, [pc, #248]	; (8009a20 <xTaskIncrementTick+0x154>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	4a3c      	ldr	r2, [pc, #240]	; (8009a20 <xTaskIncrementTick+0x154>)
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	f000 fa9a 	bl	8009e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009934:	4b3b      	ldr	r3, [pc, #236]	; (8009a24 <xTaskIncrementTick+0x158>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	429a      	cmp	r2, r3
 800993c:	d348      	bcc.n	80099d0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800993e:	4b36      	ldr	r3, [pc, #216]	; (8009a18 <xTaskIncrementTick+0x14c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009948:	4b36      	ldr	r3, [pc, #216]	; (8009a24 <xTaskIncrementTick+0x158>)
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	601a      	str	r2, [r3, #0]
					break;
 8009950:	e03e      	b.n	80099d0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b31      	ldr	r3, [pc, #196]	; (8009a18 <xTaskIncrementTick+0x14c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d203      	bcs.n	8009972 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800996a:	4a2e      	ldr	r2, [pc, #184]	; (8009a24 <xTaskIncrementTick+0x158>)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009970:	e02e      	b.n	80099d0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	3304      	adds	r3, #4
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fdd8 	bl	800852c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3318      	adds	r3, #24
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fdcf 	bl	800852c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	2201      	movs	r2, #1
 8009994:	409a      	lsls	r2, r3
 8009996:	4b24      	ldr	r3, [pc, #144]	; (8009a28 <xTaskIncrementTick+0x15c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4313      	orrs	r3, r2
 800999c:	4a22      	ldr	r2, [pc, #136]	; (8009a28 <xTaskIncrementTick+0x15c>)
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4a1f      	ldr	r2, [pc, #124]	; (8009a2c <xTaskIncrementTick+0x160>)
 80099ae:	441a      	add	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fe fd5b 	bl	8008472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c0:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <xTaskIncrementTick+0x164>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d3b9      	bcc.n	800993e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ce:	e7b6      	b.n	800993e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099d0:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <xTaskIncrementTick+0x164>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d6:	4915      	ldr	r1, [pc, #84]	; (8009a2c <xTaskIncrementTick+0x160>)
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d907      	bls.n	80099f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80099e8:	2301      	movs	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e004      	b.n	80099f8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <xTaskIncrementTick+0x168>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a0f      	ldr	r2, [pc, #60]	; (8009a34 <xTaskIncrementTick+0x168>)
 80099f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80099f8:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <xTaskIncrementTick+0x16c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a04:	697b      	ldr	r3, [r7, #20]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	200001dc 	.word	0x200001dc
 8009a14:	200001b8 	.word	0x200001b8
 8009a18:	2000016c 	.word	0x2000016c
 8009a1c:	20000170 	.word	0x20000170
 8009a20:	200001cc 	.word	0x200001cc
 8009a24:	200001d4 	.word	0x200001d4
 8009a28:	200001bc 	.word	0x200001bc
 8009a2c:	200000b8 	.word	0x200000b8
 8009a30:	200000b4 	.word	0x200000b4
 8009a34:	200001c4 	.word	0x200001c4
 8009a38:	200001c8 	.word	0x200001c8

08009a3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a42:	4b26      	ldr	r3, [pc, #152]	; (8009adc <vTaskSwitchContext+0xa0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a4a:	4b25      	ldr	r3, [pc, #148]	; (8009ae0 <vTaskSwitchContext+0xa4>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a50:	e03e      	b.n	8009ad0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009a52:	4b23      	ldr	r3, [pc, #140]	; (8009ae0 <vTaskSwitchContext+0xa4>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a58:	4b22      	ldr	r3, [pc, #136]	; (8009ae4 <vTaskSwitchContext+0xa8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	fab3 f383 	clz	r3, r3
 8009a64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	f1c3 031f 	rsb	r3, r3, #31
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	491e      	ldr	r1, [pc, #120]	; (8009ae8 <vTaskSwitchContext+0xac>)
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	e7fe      	b.n	8009a94 <vTaskSwitchContext+0x58>
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <vTaskSwitchContext+0xac>)
 8009aa2:	4413      	add	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d104      	bne.n	8009ac6 <vTaskSwitchContext+0x8a>
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	605a      	str	r2, [r3, #4]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	4a07      	ldr	r2, [pc, #28]	; (8009aec <vTaskSwitchContext+0xb0>)
 8009ace:	6013      	str	r3, [r2, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	200001dc 	.word	0x200001dc
 8009ae0:	200001c8 	.word	0x200001c8
 8009ae4:	200001bc 	.word	0x200001bc
 8009ae8:	200000b8 	.word	0x200000b8
 8009aec:	200000b4 	.word	0x200000b4

08009af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <vTaskPlaceOnEventList+0x24>
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e7fe      	b.n	8009b12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b14:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <vTaskPlaceOnEventList+0x44>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3318      	adds	r3, #24
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fe fccc 	bl	80084ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b22:	2101      	movs	r1, #1
 8009b24:	6838      	ldr	r0, [r7, #0]
 8009b26:	f000 fb8d 	bl	800a244 <prvAddCurrentTaskToDelayedList>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200000b4 	.word	0x200000b4

08009b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <xTaskRemoveFromEventList+0x2a>
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	e7fe      	b.n	8009b60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3318      	adds	r3, #24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fce0 	bl	800852c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b6c:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <xTaskRemoveFromEventList+0xac>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11c      	bne.n	8009bae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fcd7 	bl	800852c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	2201      	movs	r2, #1
 8009b84:	409a      	lsls	r2, r3
 8009b86:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <xTaskRemoveFromEventList+0xb0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	4a16      	ldr	r2, [pc, #88]	; (8009be8 <xTaskRemoveFromEventList+0xb0>)
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4a13      	ldr	r2, [pc, #76]	; (8009bec <xTaskRemoveFromEventList+0xb4>)
 8009b9e:	441a      	add	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fe fc63 	bl	8008472 <vListInsertEnd>
 8009bac:	e005      	b.n	8009bba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	480e      	ldr	r0, [pc, #56]	; (8009bf0 <xTaskRemoveFromEventList+0xb8>)
 8009bb6:	f7fe fc5c 	bl	8008472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <xTaskRemoveFromEventList+0xbc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d905      	bls.n	8009bd4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <xTaskRemoveFromEventList+0xc0>)
 8009bce:	2201      	movs	r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	e001      	b.n	8009bd8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bd8:	697b      	ldr	r3, [r7, #20]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200001dc 	.word	0x200001dc
 8009be8:	200001bc 	.word	0x200001bc
 8009bec:	200000b8 	.word	0x200000b8
 8009bf0:	20000174 	.word	0x20000174
 8009bf4:	200000b4 	.word	0x200000b4
 8009bf8:	200001c8 	.word	0x200001c8

08009bfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <vTaskInternalSetTimeOutState+0x24>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <vTaskInternalSetTimeOutState+0x28>)
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	605a      	str	r2, [r3, #4]
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	200001cc 	.word	0x200001cc
 8009c24:	200001b8 	.word	0x200001b8

08009c28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <xTaskCheckForTimeOut+0x24>
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	e7fe      	b.n	8009c4a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d109      	bne.n	8009c66 <xTaskCheckForTimeOut+0x3e>
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e7fe      	b.n	8009c64 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009c66:	f000 fc79 	bl	800a55c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <xTaskCheckForTimeOut+0xb8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d102      	bne.n	8009c8a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	e023      	b.n	8009cd2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <xTaskCheckForTimeOut+0xbc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d007      	beq.n	8009ca6 <xTaskCheckForTimeOut+0x7e>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d302      	bcc.n	8009ca6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	e015      	b.n	8009cd2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d20b      	bcs.n	8009cc8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	1ad2      	subs	r2, r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff9d 	bl	8009bfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	e004      	b.n	8009cd2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cd2:	f000 fc71 	bl	800a5b8 <vPortExitCritical>

	return xReturn;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200001b8 	.word	0x200001b8
 8009ce4:	200001cc 	.word	0x200001cc

08009ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cec:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <vTaskMissedYield+0x14>)
 8009cee:	2201      	movs	r2, #1
 8009cf0:	601a      	str	r2, [r3, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	200001c8 	.word	0x200001c8

08009d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d08:	f000 f854 	bl	8009db4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d0c:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <prvIdleTask+0x2c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d907      	bls.n	8009d24 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <prvIdleTask+0x30>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009d24:	f000 ff0a 	bl	800ab3c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009d28:	e7ee      	b.n	8009d08 <prvIdleTask+0x8>
 8009d2a:	bf00      	nop
 8009d2c:	200000b8 	.word	0x200000b8
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	607b      	str	r3, [r7, #4]
 8009d3e:	e00c      	b.n	8009d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4a12      	ldr	r2, [pc, #72]	; (8009d94 <prvInitialiseTaskLists+0x60>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe fb62 	bl	8008418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3301      	adds	r3, #1
 8009d58:	607b      	str	r3, [r7, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b06      	cmp	r3, #6
 8009d5e:	d9ef      	bls.n	8009d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d60:	480d      	ldr	r0, [pc, #52]	; (8009d98 <prvInitialiseTaskLists+0x64>)
 8009d62:	f7fe fb59 	bl	8008418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d66:	480d      	ldr	r0, [pc, #52]	; (8009d9c <prvInitialiseTaskLists+0x68>)
 8009d68:	f7fe fb56 	bl	8008418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d6c:	480c      	ldr	r0, [pc, #48]	; (8009da0 <prvInitialiseTaskLists+0x6c>)
 8009d6e:	f7fe fb53 	bl	8008418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d72:	480c      	ldr	r0, [pc, #48]	; (8009da4 <prvInitialiseTaskLists+0x70>)
 8009d74:	f7fe fb50 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d78:	480b      	ldr	r0, [pc, #44]	; (8009da8 <prvInitialiseTaskLists+0x74>)
 8009d7a:	f7fe fb4d 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <prvInitialiseTaskLists+0x78>)
 8009d80:	4a05      	ldr	r2, [pc, #20]	; (8009d98 <prvInitialiseTaskLists+0x64>)
 8009d82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d84:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <prvInitialiseTaskLists+0x7c>)
 8009d86:	4a05      	ldr	r2, [pc, #20]	; (8009d9c <prvInitialiseTaskLists+0x68>)
 8009d88:	601a      	str	r2, [r3, #0]
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200000b8 	.word	0x200000b8
 8009d98:	20000144 	.word	0x20000144
 8009d9c:	20000158 	.word	0x20000158
 8009da0:	20000174 	.word	0x20000174
 8009da4:	20000188 	.word	0x20000188
 8009da8:	200001a0 	.word	0x200001a0
 8009dac:	2000016c 	.word	0x2000016c
 8009db0:	20000170 	.word	0x20000170

08009db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dba:	e019      	b.n	8009df0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dbc:	f000 fbce 	bl	800a55c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <prvCheckTasksWaitingTermination+0x4c>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fbad 	bl	800852c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <prvCheckTasksWaitingTermination+0x50>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	4a0a      	ldr	r2, [pc, #40]	; (8009e04 <prvCheckTasksWaitingTermination+0x50>)
 8009dda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <prvCheckTasksWaitingTermination+0x54>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <prvCheckTasksWaitingTermination+0x54>)
 8009de4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009de6:	f000 fbe7 	bl	800a5b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f80e 	bl	8009e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <prvCheckTasksWaitingTermination+0x54>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e1      	bne.n	8009dbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000188 	.word	0x20000188
 8009e04:	200001b4 	.word	0x200001b4
 8009e08:	2000019c 	.word	0x2000019c

08009e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d108      	bne.n	8009e30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd76 	bl	800a914 <vPortFree>
				vPortFree( pxTCB );
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fd73 	bl	800a914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e2e:	e017      	b.n	8009e60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d103      	bne.n	8009e42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fd6a 	bl	800a914 <vPortFree>
	}
 8009e40:	e00e      	b.n	8009e60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d009      	beq.n	8009e60 <prvDeleteTCB+0x54>
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	e7fe      	b.n	8009e5e <prvDeleteTCB+0x52>
	}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <prvResetNextTaskUnblockTime+0x38>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d104      	bne.n	8009e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e80:	e008      	b.n	8009e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <prvResetNextTaskUnblockTime+0x38>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8009e92:	6013      	str	r3, [r2, #0]
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	2000016c 	.word	0x2000016c
 8009ea4:	200001d4 	.word	0x200001d4

08009ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eae:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <xTaskGetSchedulerState+0x34>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	e008      	b.n	8009ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ebc:	4b08      	ldr	r3, [pc, #32]	; (8009ee0 <xTaskGetSchedulerState+0x38>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d102      	bne.n	8009eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	607b      	str	r3, [r7, #4]
 8009ec8:	e001      	b.n	8009ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ece:	687b      	ldr	r3, [r7, #4]
	}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	200001c0 	.word	0x200001c0
 8009ee0:	200001dc 	.word	0x200001dc

08009ee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d069      	beq.n	8009fce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	4b36      	ldr	r3, [pc, #216]	; (8009fd8 <xTaskPriorityInherit+0xf4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d259      	bcs.n	8009fbc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	db06      	blt.n	8009f1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f10:	4b31      	ldr	r3, [pc, #196]	; (8009fd8 <xTaskPriorityInherit+0xf4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	f1c3 0207 	rsb	r2, r3, #7
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6959      	ldr	r1, [r3, #20]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4a2b      	ldr	r2, [pc, #172]	; (8009fdc <xTaskPriorityInherit+0xf8>)
 8009f30:	4413      	add	r3, r2
 8009f32:	4299      	cmp	r1, r3
 8009f34:	d13a      	bne.n	8009fac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe faf6 	bl	800852c <uxListRemove>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d115      	bne.n	8009f72 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4a:	4924      	ldr	r1, [pc, #144]	; (8009fdc <xTaskPriorityInherit+0xf8>)
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xTaskPriorityInherit+0x8e>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	2201      	movs	r2, #1
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	43da      	mvns	r2, r3
 8009f68:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <xTaskPriorityInherit+0xfc>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	4a1c      	ldr	r2, [pc, #112]	; (8009fe0 <xTaskPriorityInherit+0xfc>)
 8009f70:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f72:	4b19      	ldr	r3, [pc, #100]	; (8009fd8 <xTaskPriorityInherit+0xf4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	2201      	movs	r2, #1
 8009f82:	409a      	lsls	r2, r3
 8009f84:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <xTaskPriorityInherit+0xfc>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <xTaskPriorityInherit+0xfc>)
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <xTaskPriorityInherit+0xf8>)
 8009f9c:	441a      	add	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f7fe fa64 	bl	8008472 <vListInsertEnd>
 8009faa:	e004      	b.n	8009fb6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fac:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <xTaskPriorityInherit+0xf4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e008      	b.n	8009fce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <xTaskPriorityInherit+0xf4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d201      	bcs.n	8009fce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fce:	68fb      	ldr	r3, [r7, #12]
	}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200000b4 	.word	0x200000b4
 8009fdc:	200000b8 	.word	0x200000b8
 8009fe0:	200001bc 	.word	0x200001bc

08009fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d06c      	beq.n	800a0d4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ffa:	4b39      	ldr	r3, [pc, #228]	; (800a0e0 <xTaskPriorityDisinherit+0xfc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	429a      	cmp	r2, r3
 800a002:	d009      	beq.n	800a018 <xTaskPriorityDisinherit+0x34>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e7fe      	b.n	800a016 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <xTaskPriorityDisinherit+0x50>
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60bb      	str	r3, [r7, #8]
 800a032:	e7fe      	b.n	800a032 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a038:	1e5a      	subs	r2, r3, #1
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a046:	429a      	cmp	r2, r3
 800a048:	d044      	beq.n	800a0d4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d140      	bne.n	800a0d4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3304      	adds	r3, #4
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fa68 	bl	800852c <uxListRemove>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d115      	bne.n	800a08e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a066:	491f      	ldr	r1, [pc, #124]	; (800a0e4 <xTaskPriorityDisinherit+0x100>)
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <xTaskPriorityDisinherit+0xaa>
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	2201      	movs	r2, #1
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	43da      	mvns	r2, r3
 800a084:	4b18      	ldr	r3, [pc, #96]	; (800a0e8 <xTaskPriorityDisinherit+0x104>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4013      	ands	r3, r2
 800a08a:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <xTaskPriorityDisinherit+0x104>)
 800a08c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	f1c3 0207 	rsb	r2, r3, #7
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	409a      	lsls	r2, r3
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <xTaskPriorityDisinherit+0x104>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	4a0d      	ldr	r2, [pc, #52]	; (800a0e8 <xTaskPriorityDisinherit+0x104>)
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4a08      	ldr	r2, [pc, #32]	; (800a0e4 <xTaskPriorityDisinherit+0x100>)
 800a0c2:	441a      	add	r2, r3
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fe f9d1 	bl	8008472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0d4:	697b      	ldr	r3, [r7, #20]
	}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200000b4 	.word	0x200000b4
 800a0e4:	200000b8 	.word	0x200000b8
 800a0e8:	200001bc 	.word	0x200001bc

0800a0ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 8081 	beq.w	800a208 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d109      	bne.n	800a122 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e7fe      	b.n	800a120 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d902      	bls.n	800a132 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	e002      	b.n	800a138 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d062      	beq.n	800a208 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d15d      	bne.n	800a208 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a14c:	4b30      	ldr	r3, [pc, #192]	; (800a210 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	429a      	cmp	r2, r3
 800a154:	d109      	bne.n	800a16a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	60bb      	str	r3, [r7, #8]
 800a168:	e7fe      	b.n	800a168 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	db04      	blt.n	800a188 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	f1c3 0207 	rsb	r2, r3, #7
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	6959      	ldr	r1, [r3, #20]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a198:	4413      	add	r3, r2
 800a19a:	4299      	cmp	r1, r3
 800a19c:	d134      	bne.n	800a208 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f9c2 	bl	800852c <uxListRemove>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d115      	bne.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	4918      	ldr	r1, [pc, #96]	; (800a214 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ce:	43da      	mvns	r2, r3
 800a1d0:	4b11      	ldr	r3, [pc, #68]	; (800a218 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	4a10      	ldr	r2, [pc, #64]	; (800a218 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	2201      	movs	r2, #1
 800a1e0:	409a      	lsls	r2, r3
 800a1e2:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	4a0b      	ldr	r2, [pc, #44]	; (800a218 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4a06      	ldr	r2, [pc, #24]	; (800a214 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a1fa:	441a      	add	r2, r3
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe f935 	bl	8008472 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a208:	bf00      	nop
 800a20a:	3720      	adds	r7, #32
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	200000b4 	.word	0x200000b4
 800a214:	200000b8 	.word	0x200000b8
 800a218:	200001bc 	.word	0x200001bc

0800a21c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <pvTaskIncrementMutexHeldCount+0x24>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a228:	4b05      	ldr	r3, [pc, #20]	; (800a240 <pvTaskIncrementMutexHeldCount+0x24>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a22e:	3201      	adds	r2, #1
 800a230:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a232:	4b03      	ldr	r3, [pc, #12]	; (800a240 <pvTaskIncrementMutexHeldCount+0x24>)
 800a234:	681b      	ldr	r3, [r3, #0]
	}
 800a236:	4618      	mov	r0, r3
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	200000b4 	.word	0x200000b4

0800a244 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a24e:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a254:	4b28      	ldr	r3, [pc, #160]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3304      	adds	r3, #4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe f966 	bl	800852c <uxListRemove>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	2201      	movs	r2, #1
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	43da      	mvns	r2, r3
 800a274:	4b21      	ldr	r3, [pc, #132]	; (800a2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4013      	ands	r3, r2
 800a27a:	4a20      	ldr	r2, [pc, #128]	; (800a2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d10a      	bne.n	800a29c <prvAddCurrentTaskToDelayedList+0x58>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d007      	beq.n	800a29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a28c:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	481a      	ldr	r0, [pc, #104]	; (800a300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a296:	f7fe f8ec 	bl	8008472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a29a:	e026      	b.n	800a2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2a4:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d209      	bcs.n	800a2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b4:	4b13      	ldr	r3, [pc, #76]	; (800a304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7fe f8fa 	bl	80084ba <vListInsert>
}
 800a2c6:	e010      	b.n	800a2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c8:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f7fe f8f0 	bl	80084ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2da:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d202      	bcs.n	800a2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2e4:	4a09      	ldr	r2, [pc, #36]	; (800a30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6013      	str	r3, [r2, #0]
}
 800a2ea:	bf00      	nop
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200001b8 	.word	0x200001b8
 800a2f8:	200000b4 	.word	0x200000b4
 800a2fc:	200001bc 	.word	0x200001bc
 800a300:	200001a0 	.word	0x200001a0
 800a304:	20000170 	.word	0x20000170
 800a308:	2000016c 	.word	0x2000016c
 800a30c:	200001d4 	.word	0x200001d4

0800a310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3b04      	subs	r3, #4
 800a320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3b04      	subs	r3, #4
 800a32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f023 0201 	bic.w	r2, r3, #1
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3b04      	subs	r3, #4
 800a33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a340:	4a0c      	ldr	r2, [pc, #48]	; (800a374 <pxPortInitialiseStack+0x64>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3b14      	subs	r3, #20
 800a34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3b04      	subs	r3, #4
 800a356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f06f 0202 	mvn.w	r2, #2
 800a35e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3b20      	subs	r3, #32
 800a364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a366:	68fb      	ldr	r3, [r7, #12]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	0800a379 	.word	0x0800a379

0800a378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a382:	4b11      	ldr	r3, [pc, #68]	; (800a3c8 <prvTaskExitError+0x50>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d009      	beq.n	800a3a0 <prvTaskExitError+0x28>
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	e7fe      	b.n	800a39e <prvTaskExitError+0x26>
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3b2:	bf00      	nop
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0fc      	beq.n	800a3b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20000028 	.word	0x20000028
 800a3cc:	00000000 	.word	0x00000000

0800a3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <pxCurrentTCBConst2>)
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	6808      	ldr	r0, [r1, #0]
 800a3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	f380 8809 	msr	PSP, r0
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8811 	msr	BASEPRI, r0
 800a3ea:	4770      	bx	lr
 800a3ec:	f3af 8000 	nop.w

0800a3f0 <pxCurrentTCBConst2>:
 800a3f0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3f8:	4808      	ldr	r0, [pc, #32]	; (800a41c <prvPortStartFirstTask+0x24>)
 800a3fa:	6800      	ldr	r0, [r0, #0]
 800a3fc:	6800      	ldr	r0, [r0, #0]
 800a3fe:	f380 8808 	msr	MSP, r0
 800a402:	f04f 0000 	mov.w	r0, #0
 800a406:	f380 8814 	msr	CONTROL, r0
 800a40a:	b662      	cpsie	i
 800a40c:	b661      	cpsie	f
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	df00      	svc	0
 800a418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a41a:	bf00      	nop
 800a41c:	e000ed08 	.word	0xe000ed08

0800a420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a426:	4b44      	ldr	r3, [pc, #272]	; (800a538 <xPortStartScheduler+0x118>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a44      	ldr	r2, [pc, #272]	; (800a53c <xPortStartScheduler+0x11c>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d109      	bne.n	800a444 <xPortStartScheduler+0x24>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	e7fe      	b.n	800a442 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a444:	4b3c      	ldr	r3, [pc, #240]	; (800a538 <xPortStartScheduler+0x118>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a3d      	ldr	r2, [pc, #244]	; (800a540 <xPortStartScheduler+0x120>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d109      	bne.n	800a462 <xPortStartScheduler+0x42>
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e7fe      	b.n	800a460 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a462:	4b38      	ldr	r3, [pc, #224]	; (800a544 <xPortStartScheduler+0x124>)
 800a464:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	22ff      	movs	r2, #255	; 0xff
 800a472:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a484:	b2da      	uxtb	r2, r3
 800a486:	4b30      	ldr	r3, [pc, #192]	; (800a548 <xPortStartScheduler+0x128>)
 800a488:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a48a:	4b30      	ldr	r3, [pc, #192]	; (800a54c <xPortStartScheduler+0x12c>)
 800a48c:	2207      	movs	r2, #7
 800a48e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a490:	e009      	b.n	800a4a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a492:	4b2e      	ldr	r3, [pc, #184]	; (800a54c <xPortStartScheduler+0x12c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3b01      	subs	r3, #1
 800a498:	4a2c      	ldr	r2, [pc, #176]	; (800a54c <xPortStartScheduler+0x12c>)
 800a49a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ae:	2b80      	cmp	r3, #128	; 0x80
 800a4b0:	d0ef      	beq.n	800a492 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4b2:	4b26      	ldr	r3, [pc, #152]	; (800a54c <xPortStartScheduler+0x12c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f1c3 0307 	rsb	r3, r3, #7
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d009      	beq.n	800a4d2 <xPortStartScheduler+0xb2>
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60bb      	str	r3, [r7, #8]
 800a4d0:	e7fe      	b.n	800a4d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4d2:	4b1e      	ldr	r3, [pc, #120]	; (800a54c <xPortStartScheduler+0x12c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	4a1c      	ldr	r2, [pc, #112]	; (800a54c <xPortStartScheduler+0x12c>)
 800a4da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <xPortStartScheduler+0x12c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4e4:	4a19      	ldr	r2, [pc, #100]	; (800a54c <xPortStartScheduler+0x12c>)
 800a4e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4f0:	4b17      	ldr	r3, [pc, #92]	; (800a550 <xPortStartScheduler+0x130>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a16      	ldr	r2, [pc, #88]	; (800a550 <xPortStartScheduler+0x130>)
 800a4f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4fc:	4b14      	ldr	r3, [pc, #80]	; (800a550 <xPortStartScheduler+0x130>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a13      	ldr	r2, [pc, #76]	; (800a550 <xPortStartScheduler+0x130>)
 800a502:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a508:	f000 f8d6 	bl	800a6b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a50c:	4b11      	ldr	r3, [pc, #68]	; (800a554 <xPortStartScheduler+0x134>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a512:	f000 f8f5 	bl	800a700 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a516:	4b10      	ldr	r3, [pc, #64]	; (800a558 <xPortStartScheduler+0x138>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a0f      	ldr	r2, [pc, #60]	; (800a558 <xPortStartScheduler+0x138>)
 800a51c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a520:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a522:	f7ff ff69 	bl	800a3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a526:	f7ff fa89 	bl	8009a3c <vTaskSwitchContext>
	prvTaskExitError();
 800a52a:	f7ff ff25 	bl	800a378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	e000ed00 	.word	0xe000ed00
 800a53c:	410fc271 	.word	0x410fc271
 800a540:	410fc270 	.word	0x410fc270
 800a544:	e000e400 	.word	0xe000e400
 800a548:	200001e0 	.word	0x200001e0
 800a54c:	200001e4 	.word	0x200001e4
 800a550:	e000ed20 	.word	0xe000ed20
 800a554:	20000028 	.word	0x20000028
 800a558:	e000ef34 	.word	0xe000ef34

0800a55c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <vPortEnterCritical+0x54>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	4a0d      	ldr	r2, [pc, #52]	; (800a5b0 <vPortEnterCritical+0x54>)
 800a57c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a57e:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <vPortEnterCritical+0x54>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d10e      	bne.n	800a5a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <vPortEnterCritical+0x58>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d009      	beq.n	800a5a4 <vPortEnterCritical+0x48>
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	603b      	str	r3, [r7, #0]
 800a5a2:	e7fe      	b.n	800a5a2 <vPortEnterCritical+0x46>
	}
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	20000028 	.word	0x20000028
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5be:	4b11      	ldr	r3, [pc, #68]	; (800a604 <vPortExitCritical+0x4c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d109      	bne.n	800a5da <vPortExitCritical+0x22>
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	607b      	str	r3, [r7, #4]
 800a5d8:	e7fe      	b.n	800a5d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a5da:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <vPortExitCritical+0x4c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	4a08      	ldr	r2, [pc, #32]	; (800a604 <vPortExitCritical+0x4c>)
 800a5e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <vPortExitCritical+0x4c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d104      	bne.n	800a5f6 <vPortExitCritical+0x3e>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5f6:	bf00      	nop
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20000028 	.word	0x20000028
	...

0800a610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a610:	f3ef 8009 	mrs	r0, PSP
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	4b15      	ldr	r3, [pc, #84]	; (800a670 <pxCurrentTCBConst>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	f01e 0f10 	tst.w	lr, #16
 800a620:	bf08      	it	eq
 800a622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62a:	6010      	str	r0, [r2, #0]
 800a62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a634:	f380 8811 	msr	BASEPRI, r0
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f7ff f9fc 	bl	8009a3c <vTaskSwitchContext>
 800a644:	f04f 0000 	mov.w	r0, #0
 800a648:	f380 8811 	msr	BASEPRI, r0
 800a64c:	bc09      	pop	{r0, r3}
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	6808      	ldr	r0, [r1, #0]
 800a652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a656:	f01e 0f10 	tst.w	lr, #16
 800a65a:	bf08      	it	eq
 800a65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a660:	f380 8809 	msr	PSP, r0
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst>:
 800a670:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a690:	f7ff f91c 	bl	80098cc <xTaskIncrementTick>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <SysTick_Handler+0x3c>)
 800a69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6bc:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <vPortSetupTimerInterrupt+0x34>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <vPortSetupTimerInterrupt+0x38>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <vPortSetupTimerInterrupt+0x3c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <vPortSetupTimerInterrupt+0x40>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	099b      	lsrs	r3, r3, #6
 800a6d4:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <vPortSetupTimerInterrupt+0x44>)
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6da:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <vPortSetupTimerInterrupt+0x34>)
 800a6dc:	2207      	movs	r2, #7
 800a6de:	601a      	str	r2, [r3, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	e000e010 	.word	0xe000e010
 800a6f0:	e000e018 	.word	0xe000e018
 800a6f4:	2000002c 	.word	0x2000002c
 800a6f8:	10624dd3 	.word	0x10624dd3
 800a6fc:	e000e014 	.word	0xe000e014

0800a700 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a700:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a710 <vPortEnableVFP+0x10>
 800a704:	6801      	ldr	r1, [r0, #0]
 800a706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a70a:	6001      	str	r1, [r0, #0]
 800a70c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a70e:	bf00      	nop
 800a710:	e000ed88 	.word	0xe000ed88

0800a714 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a71a:	f3ef 8305 	mrs	r3, IPSR
 800a71e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b0f      	cmp	r3, #15
 800a724:	d913      	bls.n	800a74e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a726:	4a16      	ldr	r2, [pc, #88]	; (800a780 <vPortValidateInterruptPriority+0x6c>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a730:	4b14      	ldr	r3, [pc, #80]	; (800a784 <vPortValidateInterruptPriority+0x70>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	7afa      	ldrb	r2, [r7, #11]
 800a736:	429a      	cmp	r2, r3
 800a738:	d209      	bcs.n	800a74e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	607b      	str	r3, [r7, #4]
 800a74c:	e7fe      	b.n	800a74c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a74e:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <vPortValidateInterruptPriority+0x74>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <vPortValidateInterruptPriority+0x78>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d909      	bls.n	800a772 <vPortValidateInterruptPriority+0x5e>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	e7fe      	b.n	800a770 <vPortValidateInterruptPriority+0x5c>
	}
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	e000e3f0 	.word	0xe000e3f0
 800a784:	200001e0 	.word	0x200001e0
 800a788:	e000ed0c 	.word	0xe000ed0c
 800a78c:	200001e4 	.word	0x200001e4

0800a790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	; 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a79c:	f7fe ffec 	bl	8009778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7a0:	4b57      	ldr	r3, [pc, #348]	; (800a900 <pvPortMalloc+0x170>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7a8:	f000 f90c 	bl	800a9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7ac:	4b55      	ldr	r3, [pc, #340]	; (800a904 <pvPortMalloc+0x174>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f040 808c 	bne.w	800a8d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01c      	beq.n	800a7fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d013      	beq.n	800a7fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f023 0307 	bic.w	r3, r3, #7
 800a7d8:	3308      	adds	r3, #8
 800a7da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f003 0307 	and.w	r3, r3, #7
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <pvPortMalloc+0x6a>
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e7fe      	b.n	800a7f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d068      	beq.n	800a8d2 <pvPortMalloc+0x142>
 800a800:	4b41      	ldr	r3, [pc, #260]	; (800a908 <pvPortMalloc+0x178>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d863      	bhi.n	800a8d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a80a:	4b40      	ldr	r3, [pc, #256]	; (800a90c <pvPortMalloc+0x17c>)
 800a80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a80e:	4b3f      	ldr	r3, [pc, #252]	; (800a90c <pvPortMalloc+0x17c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a814:	e004      	b.n	800a820 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d903      	bls.n	800a832 <pvPortMalloc+0xa2>
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1f1      	bne.n	800a816 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a832:	4b33      	ldr	r3, [pc, #204]	; (800a900 <pvPortMalloc+0x170>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a838:	429a      	cmp	r2, r3
 800a83a:	d04a      	beq.n	800a8d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2208      	movs	r2, #8
 800a842:	4413      	add	r3, r2
 800a844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	1ad2      	subs	r2, r2, r3
 800a856:	2308      	movs	r3, #8
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d91e      	bls.n	800a89c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4413      	add	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d009      	beq.n	800a884 <pvPortMalloc+0xf4>
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	e7fe      	b.n	800a882 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	1ad2      	subs	r2, r2, r3
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a896:	69b8      	ldr	r0, [r7, #24]
 800a898:	f000 f8f6 	bl	800aa88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a89c:	4b1a      	ldr	r3, [pc, #104]	; (800a908 <pvPortMalloc+0x178>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	4a18      	ldr	r2, [pc, #96]	; (800a908 <pvPortMalloc+0x178>)
 800a8a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8aa:	4b17      	ldr	r3, [pc, #92]	; (800a908 <pvPortMalloc+0x178>)
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	4b18      	ldr	r3, [pc, #96]	; (800a910 <pvPortMalloc+0x180>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d203      	bcs.n	800a8be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <pvPortMalloc+0x178>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a15      	ldr	r2, [pc, #84]	; (800a910 <pvPortMalloc+0x180>)
 800a8bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	4b10      	ldr	r3, [pc, #64]	; (800a904 <pvPortMalloc+0x174>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8d2:	f7fe ff5f 	bl	8009794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d009      	beq.n	800a8f4 <pvPortMalloc+0x164>
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	e7fe      	b.n	800a8f2 <pvPortMalloc+0x162>
	return pvReturn;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3728      	adds	r7, #40	; 0x28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20003df0 	.word	0x20003df0
 800a904:	20003dfc 	.word	0x20003dfc
 800a908:	20003df4 	.word	0x20003df4
 800a90c:	20003de8 	.word	0x20003de8
 800a910:	20003df8 	.word	0x20003df8

0800a914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d046      	beq.n	800a9b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a926:	2308      	movs	r3, #8
 800a928:	425b      	negs	r3, r3
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	4413      	add	r3, r2
 800a92e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <vPortFree+0xa8>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4013      	ands	r3, r2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <vPortFree+0x42>
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e7fe      	b.n	800a954 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d009      	beq.n	800a972 <vPortFree+0x5e>
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	60bb      	str	r3, [r7, #8]
 800a970:	e7fe      	b.n	800a970 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <vPortFree+0xa8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d019      	beq.n	800a9b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d115      	bne.n	800a9b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <vPortFree+0xa8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a998:	f7fe feee 	bl	8009778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <vPortFree+0xac>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4a06      	ldr	r2, [pc, #24]	; (800a9c0 <vPortFree+0xac>)
 800a9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f86c 	bl	800aa88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9b0:	f7fe fef0 	bl	8009794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9b4:	bf00      	nop
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20003dfc 	.word	0x20003dfc
 800a9c0:	20003df4 	.word	0x20003df4

0800a9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9d0:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <prvHeapInit+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00c      	beq.n	800a9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <prvHeapInit+0xac>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <prvHeapInit+0xb0>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <prvHeapInit+0xb0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa10:	2208      	movs	r2, #8
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a15      	ldr	r2, [pc, #84]	; (800aa78 <prvHeapInit+0xb4>)
 800aa24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa26:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <prvHeapInit+0xb4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa2e:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <prvHeapInit+0xb4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <prvHeapInit+0xb4>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <prvHeapInit+0xb8>)
 800aa52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <prvHeapInit+0xbc>)
 800aa5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <prvHeapInit+0xc0>)
 800aa5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	200001e8 	.word	0x200001e8
 800aa74:	20003de8 	.word	0x20003de8
 800aa78:	20003df0 	.word	0x20003df0
 800aa7c:	20003df8 	.word	0x20003df8
 800aa80:	20003df4 	.word	0x20003df4
 800aa84:	20003dfc 	.word	0x20003dfc

0800aa88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa90:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <prvInsertBlockIntoFreeList+0xac>)
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e002      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x14>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d8f7      	bhi.n	800aa96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d108      	bne.n	800aaca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	441a      	add	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	441a      	add	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d118      	bne.n	800ab10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d00d      	beq.n	800ab06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e008      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab06:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	e003      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d002      	beq.n	800ab26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20003de8 	.word	0x20003de8
 800ab38:	20003df0 	.word	0x20003df0

0800ab3c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800ab40:	bf00      	nop
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a07      	ldr	r2, [pc, #28]	; (800ab78 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	4a06      	ldr	r2, [pc, #24]	; (800ab7c <vApplicationGetIdleTaskMemory+0x30>)
 800ab62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2280      	movs	r2, #128	; 0x80
 800ab68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	20003e00 	.word	0x20003e00
 800ab7c:	20003e54 	.word	0x20003e54

0800ab80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ab80:	b5b0      	push	{r4, r5, r7, lr}
 800ab82:	b0ac      	sub	sp, #176	; 0xb0
 800ab84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ab86:	f7f5 fca3 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ab8a:	f000 f8b5 	bl	800acf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ab8e:	f000 f9c9 	bl	800af24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800ab92:	f000 f933 	bl	800adfc <MX_I2C1_Init>
  MX_I2S3_Init();
 800ab96:	f000 f95f 	bl	800ae58 <MX_I2S3_Init>
  MX_SPI1_Init();
 800ab9a:	f000 f98d 	bl	800aeb8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800ab9e:	f000 fabf 	bl	800b120 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800aba2:	f000 faf7 	bl	800b194 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of usart2_sem */
  osSemaphoreDef(usart2_sem);
 800aba6:	2300      	movs	r3, #0
 800aba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abac:	2300      	movs	r3, #0
 800abae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  usart2_semHandle = osSemaphoreCreate(osSemaphore(usart2_sem), 1);
 800abb2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800abb6:	2101      	movs	r1, #1
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fd fb1c 	bl	80081f6 <osSemaphoreCreate>
 800abbe:	4602      	mov	r2, r0
 800abc0:	4b3f      	ldr	r3, [pc, #252]	; (800acc0 <main+0x140>)
 800abc2:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(usart3_sem);
 800abc4:	2300      	movs	r3, #0
 800abc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800abca:	2300      	movs	r3, #0
 800abcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  usart3_semHandle = osSemaphoreCreate(osSemaphore(usart3_sem), 1);
 800abd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800abd4:	2101      	movs	r1, #1
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fd fb0d 	bl	80081f6 <osSemaphoreCreate>
 800abdc:	4602      	mov	r2, r0
 800abde:	4b39      	ldr	r3, [pc, #228]	; (800acc4 <main+0x144>)
 800abe0:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usart3_MQ1 */
  osMessageQDef(usart3_MQ1, 8, uint8_t);
 800abe2:	4b39      	ldr	r3, [pc, #228]	; (800acc8 <main+0x148>)
 800abe4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800abe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart3_MQ1Handle = osMessageCreate(osMessageQ(usart3_MQ1), NULL);
 800abee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd fb31 	bl	800825c <osMessageCreate>
 800abfa:	4602      	mov	r2, r0
 800abfc:	4b33      	ldr	r3, [pc, #204]	; (800accc <main+0x14c>)
 800abfe:	601a      	str	r2, [r3, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800ac00:	4b33      	ldr	r3, [pc, #204]	; (800acd0 <main+0x150>)
 800ac02:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800ac06:	461d      	mov	r5, r3
 800ac08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ac14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ac18:	2100      	movs	r1, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fd fa8b 	bl	8008136 <osThreadCreate>
 800ac20:	4602      	mov	r2, r0
 800ac22:	4b2c      	ldr	r3, [pc, #176]	; (800acd4 <main+0x154>)
 800ac24:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLED_Task */
  osThreadDef(myLED_Task, StartLED_Task, osPriorityLow, 0, 128);
 800ac26:	4b2c      	ldr	r3, [pc, #176]	; (800acd8 <main+0x158>)
 800ac28:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800ac2c:	461d      	mov	r5, r3
 800ac2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED_TaskHandle = osThreadCreate(osThread(myLED_Task), NULL);
 800ac3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd fa78 	bl	8008136 <osThreadCreate>
 800ac46:	4602      	mov	r2, r0
 800ac48:	4b24      	ldr	r3, [pc, #144]	; (800acdc <main+0x15c>)
 800ac4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myButton_Task */
  osThreadDef(myButton_Task, StartButton_Task, osPriorityLow, 0, 128);
 800ac4c:	4b24      	ldr	r3, [pc, #144]	; (800ace0 <main+0x160>)
 800ac4e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800ac52:	461d      	mov	r5, r3
 800ac54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButton_TaskHandle = osThreadCreate(osThread(myButton_Task), NULL);
 800ac60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fd fa65 	bl	8008136 <osThreadCreate>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	4b1d      	ldr	r3, [pc, #116]	; (800ace4 <main+0x164>)
 800ac70:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart2_Rx_handle */
  osThreadDef(uart2_Rx_handle, Start_uart2_Rx_handle, osPriorityNormal, 0, 128);
 800ac72:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <main+0x168>)
 800ac74:	f107 0420 	add.w	r4, r7, #32
 800ac78:	461d      	mov	r5, r3
 800ac7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2_Rx_handleHandle = osThreadCreate(osThread(uart2_Rx_handle), NULL);
 800ac86:	f107 0320 	add.w	r3, r7, #32
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd fa52 	bl	8008136 <osThreadCreate>
 800ac92:	4602      	mov	r2, r0
 800ac94:	4b15      	ldr	r3, [pc, #84]	; (800acec <main+0x16c>)
 800ac96:	601a      	str	r2, [r3, #0]

  /* definition and creation of uart3_Rx_handle */
  osThreadDef(uart3_Rx_handle, Start_uart3_Rx_handle, osPriorityNormal, 0, 128);
 800ac98:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <main+0x170>)
 800ac9a:	1d3c      	adds	r4, r7, #4
 800ac9c:	461d      	mov	r5, r3
 800ac9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart3_Rx_handleHandle = osThreadCreate(osThread(uart3_Rx_handle), NULL);
 800acaa:	1d3b      	adds	r3, r7, #4
 800acac:	2100      	movs	r1, #0
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd fa41 	bl	8008136 <osThreadCreate>
 800acb4:	4602      	mov	r2, r0
 800acb6:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <main+0x174>)
 800acb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800acba:	f7fd fa35 	bl	8008128 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800acbe:	e7fe      	b.n	800acbe <main+0x13e>
 800acc0:	2000410c 	.word	0x2000410c
 800acc4:	20004168 	.word	0x20004168
 800acc8:	0800c26c 	.word	0x0800c26c
 800accc:	20004070 	.word	0x20004070
 800acd0:	0800c288 	.word	0x0800c288
 800acd4:	2000406c 	.word	0x2000406c
 800acd8:	0800c2b0 	.word	0x0800c2b0
 800acdc:	20004074 	.word	0x20004074
 800ace0:	0800c2dc 	.word	0x0800c2dc
 800ace4:	200041b0 	.word	0x200041b0
 800ace8:	0800c308 	.word	0x0800c308
 800acec:	200041b4 	.word	0x200041b4
 800acf0:	0800c334 	.word	0x0800c334
 800acf4:	2000416c 	.word	0x2000416c

0800acf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b098      	sub	sp, #96	; 0x60
 800acfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad02:	2230      	movs	r2, #48	; 0x30
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 f9bf 	bl	800c08a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad0c:	f107 031c 	add.w	r3, r7, #28
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad1c:	f107 030c 	add.w	r3, r7, #12
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	605a      	str	r2, [r3, #4]
 800ad26:	609a      	str	r2, [r3, #8]
 800ad28:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	4b31      	ldr	r3, [pc, #196]	; (800adf4 <SystemClock_Config+0xfc>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	4a30      	ldr	r2, [pc, #192]	; (800adf4 <SystemClock_Config+0xfc>)
 800ad34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad38:	6413      	str	r3, [r2, #64]	; 0x40
 800ad3a:	4b2e      	ldr	r3, [pc, #184]	; (800adf4 <SystemClock_Config+0xfc>)
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad42:	60bb      	str	r3, [r7, #8]
 800ad44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad46:	2300      	movs	r3, #0
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	4b2b      	ldr	r3, [pc, #172]	; (800adf8 <SystemClock_Config+0x100>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a2a      	ldr	r2, [pc, #168]	; (800adf8 <SystemClock_Config+0x100>)
 800ad50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4b28      	ldr	r3, [pc, #160]	; (800adf8 <SystemClock_Config+0x100>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad5e:	607b      	str	r3, [r7, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ad62:	2301      	movs	r3, #1
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ad76:	2308      	movs	r3, #8
 800ad78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800ad7a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800ad7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad80:	2302      	movs	r3, #2
 800ad82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800ad84:	2307      	movs	r3, #7
 800ad86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f8 f99f 	bl	80030d0 <HAL_RCC_OscConfig>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800ad98:	f000 fb43 	bl	800b422 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad9c:	230f      	movs	r3, #15
 800ad9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ada0:	2302      	movs	r3, #2
 800ada2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ada4:	2300      	movs	r3, #0
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ada8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800adae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800adb4:	f107 031c 	add.w	r3, r7, #28
 800adb8:	2105      	movs	r1, #5
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f8 fbf8 	bl	80035b0 <HAL_RCC_ClockConfig>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800adc6:	f000 fb2c 	bl	800b422 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800adca:	2301      	movs	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800adce:	23c0      	movs	r3, #192	; 0xc0
 800add0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800add2:	2302      	movs	r3, #2
 800add4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800add6:	f107 030c 	add.w	r3, r7, #12
 800adda:	4618      	mov	r0, r3
 800addc:	f7f8 fe0c 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800ade6:	f000 fb1c 	bl	800b422 <Error_Handler>
  }
}
 800adea:	bf00      	nop
 800adec:	3760      	adds	r7, #96	; 0x60
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	40023800 	.word	0x40023800
 800adf8:	40007000 	.word	0x40007000

0800adfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ae00:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae02:	4a13      	ldr	r2, [pc, #76]	; (800ae50 <MX_I2C1_Init+0x54>)
 800ae04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800ae06:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae08:	4a12      	ldr	r2, [pc, #72]	; (800ae54 <MX_I2C1_Init+0x58>)
 800ae0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ae12:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae18:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ae26:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae32:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ae38:	4804      	ldr	r0, [pc, #16]	; (800ae4c <MX_I2C1_Init+0x50>)
 800ae3a:	f7f7 fb71 	bl	8002520 <HAL_I2C_Init>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ae44:	f000 faed 	bl	800b422 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ae48:	bf00      	nop
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200040b8 	.word	0x200040b8
 800ae50:	40005400 	.word	0x40005400
 800ae54:	000186a0 	.word	0x000186a0

0800ae58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800ae5c:	4b13      	ldr	r3, [pc, #76]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae5e:	4a14      	ldr	r2, [pc, #80]	; (800aeb0 <MX_I2S3_Init+0x58>)
 800ae60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800ae70:	4b0e      	ldr	r3, [pc, #56]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800ae76:	4b0d      	ldr	r3, [pc, #52]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae80:	4a0c      	ldr	r2, [pc, #48]	; (800aeb4 <MX_I2S3_Init+0x5c>)
 800ae82:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800ae84:	4b09      	ldr	r3, [pc, #36]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800ae8a:	4b08      	ldr	r3, [pc, #32]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800ae90:	4b06      	ldr	r3, [pc, #24]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800ae96:	4805      	ldr	r0, [pc, #20]	; (800aeac <MX_I2S3_Init+0x54>)
 800ae98:	f7f7 fc7a 	bl	8002790 <HAL_I2S_Init>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800aea2:	f000 fabe 	bl	800b422 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800aea6:	bf00      	nop
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	200041b8 	.word	0x200041b8
 800aeb0:	40003c00 	.word	0x40003c00
 800aeb4:	00017700 	.word	0x00017700

0800aeb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800aebc:	4b17      	ldr	r3, [pc, #92]	; (800af1c <MX_SPI1_Init+0x64>)
 800aebe:	4a18      	ldr	r2, [pc, #96]	; (800af20 <MX_SPI1_Init+0x68>)
 800aec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800aec2:	4b16      	ldr	r3, [pc, #88]	; (800af1c <MX_SPI1_Init+0x64>)
 800aec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800aeca:	4b14      	ldr	r3, [pc, #80]	; (800af1c <MX_SPI1_Init+0x64>)
 800aecc:	2200      	movs	r2, #0
 800aece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <MX_SPI1_Init+0x64>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <MX_SPI1_Init+0x64>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <MX_SPI1_Init+0x64>)
 800aede:	2200      	movs	r2, #0
 800aee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <MX_SPI1_Init+0x64>)
 800aee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <MX_SPI1_Init+0x64>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <MX_SPI1_Init+0x64>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <MX_SPI1_Init+0x64>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <MX_SPI1_Init+0x64>)
 800aefe:	2200      	movs	r2, #0
 800af00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800af02:	4b06      	ldr	r3, [pc, #24]	; (800af1c <MX_SPI1_Init+0x64>)
 800af04:	220a      	movs	r2, #10
 800af06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800af08:	4804      	ldr	r0, [pc, #16]	; (800af1c <MX_SPI1_Init+0x64>)
 800af0a:	f7f8 feb3 	bl	8003c74 <HAL_SPI_Init>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800af14:	f000 fa85 	bl	800b422 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800af18:	bf00      	nop
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20004110 	.word	0x20004110
 800af20:	40013000 	.word	0x40013000

0800af24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	; 0x30
 800af28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af2a:	f107 031c 	add.w	r3, r7, #28
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	605a      	str	r2, [r3, #4]
 800af34:	609a      	str	r2, [r3, #8]
 800af36:	60da      	str	r2, [r3, #12]
 800af38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800af3a:	2300      	movs	r3, #0
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	4b71      	ldr	r3, [pc, #452]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	4a70      	ldr	r2, [pc, #448]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af44:	f043 0310 	orr.w	r3, r3, #16
 800af48:	6313      	str	r3, [r2, #48]	; 0x30
 800af4a:	4b6e      	ldr	r3, [pc, #440]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
 800af5a:	4b6a      	ldr	r3, [pc, #424]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	4a69      	ldr	r2, [pc, #420]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af60:	f043 0304 	orr.w	r3, r3, #4
 800af64:	6313      	str	r3, [r2, #48]	; 0x30
 800af66:	4b67      	ldr	r3, [pc, #412]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6a:	f003 0304 	and.w	r3, r3, #4
 800af6e:	617b      	str	r3, [r7, #20]
 800af70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	4b63      	ldr	r3, [pc, #396]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	4a62      	ldr	r2, [pc, #392]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af80:	6313      	str	r3, [r2, #48]	; 0x30
 800af82:	4b60      	ldr	r3, [pc, #384]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	4b5c      	ldr	r3, [pc, #368]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	4a5b      	ldr	r2, [pc, #364]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800af98:	f043 0301 	orr.w	r3, r3, #1
 800af9c:	6313      	str	r3, [r2, #48]	; 0x30
 800af9e:	4b59      	ldr	r3, [pc, #356]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	4b55      	ldr	r3, [pc, #340]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	4a54      	ldr	r2, [pc, #336]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	6313      	str	r3, [r2, #48]	; 0x30
 800afba:	4b52      	ldr	r3, [pc, #328]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	60bb      	str	r3, [r7, #8]
 800afc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	4b4e      	ldr	r3, [pc, #312]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	4a4d      	ldr	r2, [pc, #308]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afd0:	f043 0308 	orr.w	r3, r3, #8
 800afd4:	6313      	str	r3, [r2, #48]	; 0x30
 800afd6:	4b4b      	ldr	r3, [pc, #300]	; (800b104 <MX_GPIO_Init+0x1e0>)
 800afd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	607b      	str	r3, [r7, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|USART3_RT_Pin, GPIO_PIN_RESET);
 800afe2:	2200      	movs	r2, #0
 800afe4:	f242 0108 	movw	r1, #8200	; 0x2008
 800afe8:	4847      	ldr	r0, [pc, #284]	; (800b108 <MX_GPIO_Init+0x1e4>)
 800afea:	f7f5 fd73 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800afee:	2201      	movs	r2, #1
 800aff0:	2101      	movs	r1, #1
 800aff2:	4846      	ldr	r0, [pc, #280]	; (800b10c <MX_GPIO_Init+0x1e8>)
 800aff4:	f7f5 fd6e 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800aff8:	2200      	movs	r2, #0
 800affa:	f24f 0110 	movw	r1, #61456	; 0xf010
 800affe:	4844      	ldr	r0, [pc, #272]	; (800b110 <MX_GPIO_Init+0x1ec>)
 800b000:	f7f5 fd68 	bl	8000ad4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin USART3_RT_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|USART3_RT_Pin;
 800b004:	f242 0308 	movw	r3, #8200	; 0x2008
 800b008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b00a:	2301      	movs	r3, #1
 800b00c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b00e:	2301      	movs	r3, #1
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b012:	2300      	movs	r3, #0
 800b014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b016:	f107 031c 	add.w	r3, r7, #28
 800b01a:	4619      	mov	r1, r3
 800b01c:	483a      	ldr	r0, [pc, #232]	; (800b108 <MX_GPIO_Init+0x1e4>)
 800b01e:	f7f5 fbbf 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800b022:	2301      	movs	r3, #1
 800b024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b026:	2301      	movs	r3, #1
 800b028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b02e:	2300      	movs	r3, #0
 800b030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b032:	f107 031c 	add.w	r3, r7, #28
 800b036:	4619      	mov	r1, r3
 800b038:	4834      	ldr	r0, [pc, #208]	; (800b10c <MX_GPIO_Init+0x1e8>)
 800b03a:	f7f5 fbb1 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800b03e:	2308      	movs	r3, #8
 800b040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b042:	2302      	movs	r3, #2
 800b044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b04a:	2300      	movs	r3, #0
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b04e:	2305      	movs	r3, #5
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800b052:	f107 031c 	add.w	r3, r7, #28
 800b056:	4619      	mov	r1, r3
 800b058:	482c      	ldr	r0, [pc, #176]	; (800b10c <MX_GPIO_Init+0x1e8>)
 800b05a:	f7f5 fba1 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800b05e:	2301      	movs	r3, #1
 800b060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b062:	4b2c      	ldr	r3, [pc, #176]	; (800b114 <MX_GPIO_Init+0x1f0>)
 800b064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b066:	2300      	movs	r3, #0
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b06a:	f107 031c 	add.w	r3, r7, #28
 800b06e:	4619      	mov	r1, r3
 800b070:	4829      	ldr	r0, [pc, #164]	; (800b118 <MX_GPIO_Init+0x1f4>)
 800b072:	f7f5 fb95 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800b076:	2304      	movs	r3, #4
 800b078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b07a:	2300      	movs	r3, #0
 800b07c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800b082:	f107 031c 	add.w	r3, r7, #28
 800b086:	4619      	mov	r1, r3
 800b088:	4824      	ldr	r0, [pc, #144]	; (800b11c <MX_GPIO_Init+0x1f8>)
 800b08a:	f7f5 fb89 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;	/*GPIO_PIN_10*/
 800b08e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b094:	2302      	movs	r3, #2
 800b096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b098:	2300      	movs	r3, #0
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b09c:	2300      	movs	r3, #0
 800b09e:	62bb      	str	r3, [r7, #40]	; 0x28
//  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);	/* GPIOB */
 800b0a0:	f107 031c 	add.w	r3, r7, #28
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	481d      	ldr	r0, [pc, #116]	; (800b11c <MX_GPIO_Init+0x1f8>)
 800b0a8:	f7f5 fb7a 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800b0ac:	f24f 0310 	movw	r3, #61456	; 0xf010
 800b0b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0be:	f107 031c 	add.w	r3, r7, #28
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4812      	ldr	r0, [pc, #72]	; (800b110 <MX_GPIO_Init+0x1ec>)
 800b0c6:	f7f5 fb6b 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800b0ca:	2320      	movs	r3, #32
 800b0cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b0d6:	f107 031c 	add.w	r3, r7, #28
 800b0da:	4619      	mov	r1, r3
 800b0dc:	480c      	ldr	r0, [pc, #48]	; (800b110 <MX_GPIO_Init+0x1ec>)
 800b0de:	f7f5 fb5f 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <MX_GPIO_Init+0x1f0>)
 800b0e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800b0ee:	f107 031c 	add.w	r3, r7, #28
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4804      	ldr	r0, [pc, #16]	; (800b108 <MX_GPIO_Init+0x1e4>)
 800b0f6:	f7f5 fb53 	bl	80007a0 <HAL_GPIO_Init>

}
 800b0fa:	bf00      	nop
 800b0fc:	3730      	adds	r7, #48	; 0x30
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	40023800 	.word	0x40023800
 800b108:	40021000 	.word	0x40021000
 800b10c:	40020800 	.word	0x40020800
 800b110:	40020c00 	.word	0x40020c00
 800b114:	10120000 	.word	0x10120000
 800b118:	40020000 	.word	0x40020000
 800b11c:	40020400 	.word	0x40020400

0800b120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b124:	4b18      	ldr	r3, [pc, #96]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b126:	4a19      	ldr	r2, [pc, #100]	; (800b18c <MX_USART2_UART_Init+0x6c>)
 800b128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800b12a:	4b17      	ldr	r3, [pc, #92]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b12c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800b130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b132:	4b15      	ldr	r3, [pc, #84]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b134:	2200      	movs	r2, #0
 800b136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b138:	4b13      	ldr	r3, [pc, #76]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b13e:	4b12      	ldr	r3, [pc, #72]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b140:	2200      	movs	r2, #0
 800b142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b144:	4b10      	ldr	r3, [pc, #64]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b146:	220c      	movs	r2, #12
 800b148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b14a:	4b0f      	ldr	r3, [pc, #60]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b150:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b152:	2200      	movs	r2, #0
 800b154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b156:	480c      	ldr	r0, [pc, #48]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b158:	f7f9 f82e 	bl	80041b8 <HAL_UART_Init>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b162:	f000 f95e 	bl	800b422 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800b166:	4b08      	ldr	r3, [pc, #32]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <MX_USART2_UART_Init+0x68>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f042 0220 	orr.w	r2, r2, #32
 800b174:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800b176:	2200      	movs	r2, #0
 800b178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b17c:	4804      	ldr	r0, [pc, #16]	; (800b190 <MX_USART2_UART_Init+0x70>)
 800b17e:	f7f5 fca9 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20004170 	.word	0x20004170
 800b18c:	40004400 	.word	0x40004400
 800b190:	40020c00 	.word	0x40020c00

0800b194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b198:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b19a:	4a16      	ldr	r2, [pc, #88]	; (800b1f4 <MX_USART3_UART_Init+0x60>)
 800b19c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800b19e:	4b14      	ldr	r3, [pc, #80]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b1a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b1a6:	4b12      	ldr	r3, [pc, #72]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b1ac:	4b10      	ldr	r3, [pc, #64]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b1b2:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1ba:	220c      	movs	r2, #12
 800b1bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1c4:	4b0a      	ldr	r3, [pc, #40]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b1ca:	4809      	ldr	r0, [pc, #36]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1cc:	f7f8 fff4 	bl	80041b8 <HAL_UART_Init>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800b1d6:	f000 f924 	bl	800b422 <Error_Handler>
//	__HAL_UART_CLEAR_PEFLAG(&huart3);
//
//
//	HAL_StatusTypeDef uart_Tx_result = HAL_UART_Transmit(&huart3, uart3_Tx_buf, (sizeof(uart3_Tx_buf)/sizeof(uart3_Tx_buf[0])), 1000);

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68da      	ldr	r2, [r3, #12]
 800b1e0:	4b03      	ldr	r3, [pc, #12]	; (800b1f0 <MX_USART3_UART_Init+0x5c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f042 0220 	orr.w	r2, r2, #32
 800b1e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b1ea:	bf00      	nop
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20004078 	.word	0x20004078
 800b1f4:	40004800 	.word	0x40004800

0800b1f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800b200:	f000 fbd2 	bl	800b9a8 <MX_USB_HOST_Init>
#ifdef SOFTWARE_DEBUG
	  osDelay(2000);
	  freemem = xPortGetFreeHeapSize();
	  vTaskList (pcWriteBuffer);
#endif
    osDelay(1);
 800b204:	2001      	movs	r0, #1
 800b206:	f7fc ffe2 	bl	80081ce <osDelay>
 800b20a:	e7fb      	b.n	800b204 <StartDefaultTask+0xc>

0800b20c <StartLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Task */
void StartLED_Task(void const * argument)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b214:	2001      	movs	r0, #1
 800b216:	f7fc ffda 	bl	80081ce <osDelay>
 800b21a:	e7fb      	b.n	800b214 <StartLED_Task+0x8>

0800b21c <StartButton_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton_Task */
void StartButton_Task(void const * argument)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_Task */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800b224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b228:	4803      	ldr	r0, [pc, #12]	; (800b238 <StartButton_Task+0x1c>)
 800b22a:	f7f5 fc6c 	bl	8000b06 <HAL_GPIO_TogglePin>
	  osDelay(150);
 800b22e:	2096      	movs	r0, #150	; 0x96
 800b230:	f7fc ffcd 	bl	80081ce <osDelay>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800b234:	e7f6      	b.n	800b224 <StartButton_Task+0x8>
 800b236:	bf00      	nop
 800b238:	40020c00 	.word	0x40020c00

0800b23c <Start_uart2_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart2_Rx_handle */
void Start_uart2_Rx_handle(void const * argument)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	uint8_t uart2_Tx_buf [] = {0x01, 0x01, 0x02, 0x00, 0x04, 0xB8, 0x3F};
 800b244:	4a17      	ldr	r2, [pc, #92]	; (800b2a4 <Start_uart2_Rx_handle+0x68>)
 800b246:	f107 0308 	add.w	r3, r7, #8
 800b24a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b24e:	6018      	str	r0, [r3, #0]
 800b250:	3304      	adds	r3, #4
 800b252:	8019      	strh	r1, [r3, #0]
 800b254:	3302      	adds	r3, #2
 800b256:	0c0a      	lsrs	r2, r1, #16
 800b258:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN Start_uart2_Rx_handle */

  /* Infinite loop */
  for(;;)
  {
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <Start_uart2_Rx_handle+0x6c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f04f 31ff 	mov.w	r1, #4294967295
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd fdba 	bl	8008ddc <xQueueSemaphoreTake>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d1f5      	bne.n	800b25a <Start_uart2_Rx_handle+0x1e>
	  {
		  xSemaphoreTake(usart2_semHandle, portMAX_DELAY);
 800b26e:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <Start_uart2_Rx_handle+0x6c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f04f 31ff 	mov.w	r1, #4294967295
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd fdb0 	bl	8008ddc <xQueueSemaphoreTake>
		  //	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		  uint8_t uart2_Tx_result = HAL_UART_Transmit(&huart2, uart2_Tx_buf, (sizeof(uart2_Tx_buf)/sizeof(uart2_Tx_buf[0])), 1000);
 800b27c:	f107 0108 	add.w	r1, r7, #8
 800b280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b284:	2207      	movs	r2, #7
 800b286:	4809      	ldr	r0, [pc, #36]	; (800b2ac <Start_uart2_Rx_handle+0x70>)
 800b288:	f7f8 ffe3 	bl	8004252 <HAL_UART_Transmit>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
		  if (HAL_OK == uart2_Tx_result)
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e1      	bne.n	800b25a <Start_uart2_Rx_handle+0x1e>
		  {
			  //			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800b296:	2200      	movs	r2, #0
 800b298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b29c:	4804      	ldr	r0, [pc, #16]	; (800b2b0 <Start_uart2_Rx_handle+0x74>)
 800b29e:	f7f5 fc19 	bl	8000ad4 <HAL_GPIO_WritePin>
	  if  (pdPASS == xSemaphoreTake(usart2_semHandle, portMAX_DELAY))
 800b2a2:	e7da      	b.n	800b25a <Start_uart2_Rx_handle+0x1e>
 800b2a4:	0800c350 	.word	0x0800c350
 800b2a8:	2000410c 	.word	0x2000410c
 800b2ac:	20004170 	.word	0x20004170
 800b2b0:	40020c00 	.word	0x40020c00

0800b2b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	603b      	str	r3, [r7, #0]
	uint8_t usart2_Rx_data = 0x00;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	71fb      	strb	r3, [r7, #7]

	HAL_UART_IRQHandler(&huart2);
 800b2c2:	480d      	ldr	r0, [pc, #52]	; (800b2f8 <USART2_IRQHandler+0x44>)
 800b2c4:	f7f9 f85e 	bl	8004384 <HAL_UART_IRQHandler>
	usart2_Rx_data = (uint8_t) huart2.Instance->DR;
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <USART2_IRQHandler+0x44>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	71fb      	strb	r3, [r7, #7]
	if (0xFA == usart2_Rx_data)
 800b2d0:	79fb      	ldrb	r3, [r7, #7]
 800b2d2:	2bfa      	cmp	r3, #250	; 0xfa
 800b2d4:	d10c      	bne.n	800b2f0 <USART2_IRQHandler+0x3c>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2dc:	4807      	ldr	r0, [pc, #28]	; (800b2fc <USART2_IRQHandler+0x48>)
 800b2de:	f7f5 fbf9 	bl	8000ad4 <HAL_GPIO_WritePin>
		xSemaphoreGiveFromISR( usart2_semHandle, &xHigherPriorityTaskWoken );
 800b2e2:	4b07      	ldr	r3, [pc, #28]	; (800b300 <USART2_IRQHandler+0x4c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fd fc10 	bl	8008b10 <xQueueGiveFromISR>
	}

}
 800b2f0:	bf00      	nop
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20004170 	.word	0x20004170
 800b2fc:	40020c00 	.word	0x40020c00
 800b300:	2000410c 	.word	0x2000410c

0800b304 <Start_uart3_Rx_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_uart3_Rx_handle */
void Start_uart3_Rx_handle(void const * argument)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	uint8_t uart3_Tx_buf [] = {0x01, 0x01, 0x02, 0x00, 0x04, 0xB8, 0x3F};
 800b30c:	4a18      	ldr	r2, [pc, #96]	; (800b370 <Start_uart3_Rx_handle+0x6c>)
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b316:	6018      	str	r0, [r3, #0]
 800b318:	3304      	adds	r3, #4
 800b31a:	8019      	strh	r1, [r3, #0]
 800b31c:	3302      	adds	r3, #2
 800b31e:	0c0a      	lsrs	r2, r1, #16
 800b320:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef uart_Tx_result = 0x00;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Start_uart3_Rx_handle */
  /* Infinite loop */
	for(;;)
	{
		if  (pdPASS == xSemaphoreTake(usart3_semHandle, portMAX_DELAY))
 800b326:	4b13      	ldr	r3, [pc, #76]	; (800b374 <Start_uart3_Rx_handle+0x70>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f04f 31ff 	mov.w	r1, #4294967295
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fd fd54 	bl	8008ddc <xQueueSemaphoreTake>
 800b334:	4603      	mov	r3, r0
 800b336:	2b01      	cmp	r3, #1
 800b338:	d1f5      	bne.n	800b326 <Start_uart3_Rx_handle+0x22>
		{

			uart_Tx_result = HAL_UART_Transmit(&huart3, uart3_Tx_buf, (sizeof(uart3_Tx_buf)/sizeof(uart3_Tx_buf[0])), 1000);
 800b33a:	f107 0108 	add.w	r1, r7, #8
 800b33e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b342:	2207      	movs	r2, #7
 800b344:	480c      	ldr	r0, [pc, #48]	; (800b378 <Start_uart3_Rx_handle+0x74>)
 800b346:	f7f8 ff84 	bl	8004252 <HAL_UART_Transmit>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
			if (HAL_OK == uart_Tx_result)
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e8      	bne.n	800b326 <Start_uart3_Rx_handle+0x22>
			{
				HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_RESET);
 800b354:	2200      	movs	r2, #0
 800b356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b35a:	4808      	ldr	r0, [pc, #32]	; (800b37c <Start_uart3_Rx_handle+0x78>)
 800b35c:	f7f5 fbba 	bl	8000ad4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800b360:	2200      	movs	r2, #0
 800b362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b366:	4806      	ldr	r0, [pc, #24]	; (800b380 <Start_uart3_Rx_handle+0x7c>)
 800b368:	f7f5 fbb4 	bl	8000ad4 <HAL_GPIO_WritePin>
		if  (pdPASS == xSemaphoreTake(usart3_semHandle, portMAX_DELAY))
 800b36c:	e7db      	b.n	800b326 <Start_uart3_Rx_handle+0x22>
 800b36e:	bf00      	nop
 800b370:	0800c350 	.word	0x0800c350
 800b374:	20004168 	.word	0x20004168
 800b378:	20004078 	.word	0x20004078
 800b37c:	40021000 	.word	0x40021000
 800b380:	40020c00 	.word	0x40020c00

0800b384 <USART3_IRQHandler>:
	}
  /* USER CODE END Start_uart3_Rx_handle */
}

void USART3_IRQHandler(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
	static uint8_t	usart3_counter = 0x00;

	portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	603b      	str	r3, [r7, #0]
	uint8_t usart3_Rx_data = 0x00;
 800b38e:	2300      	movs	r3, #0
 800b390:	71fb      	strb	r3, [r7, #7]

	HAL_UART_IRQHandler(&huart3);
 800b392:	4817      	ldr	r0, [pc, #92]	; (800b3f0 <USART3_IRQHandler+0x6c>)
 800b394:	f7f8 fff6 	bl	8004384 <HAL_UART_IRQHandler>
	usart3_Rx_data = (uint8_t) huart3.Instance->DR;
 800b398:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <USART3_IRQHandler+0x6c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	71fb      	strb	r3, [r7, #7]
	usart3_counter++;
 800b3a0:	4b14      	ldr	r3, [pc, #80]	; (800b3f4 <USART3_IRQHandler+0x70>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <USART3_IRQHandler+0x70>)
 800b3aa:	701a      	strb	r2, [r3, #0]

	if (0x08 == usart3_counter)
 800b3ac:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <USART3_IRQHandler+0x70>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	2b08      	cmp	r3, #8
 800b3b2:	d118      	bne.n	800b3e6 <USART3_IRQHandler+0x62>
	{
		usart3_counter = 0x00;
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <USART3_IRQHandler+0x70>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR( usart3_semHandle, &xHigherPriorityTaskWoken );
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <USART3_IRQHandler+0x74>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	463a      	mov	r2, r7
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fd fba4 	bl	8008b10 <xQueueGiveFromISR>
		if(pdTRUE == xHigherPriorityTaskWoken)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d10b      	bne.n	800b3e6 <USART3_IRQHandler+0x62>
		{
			HAL_GPIO_WritePin(GPIOE, USART3_RT_Pin, GPIO_PIN_SET);
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b3d4:	4809      	ldr	r0, [pc, #36]	; (800b3fc <USART3_IRQHandler+0x78>)
 800b3d6:	f7f5 fb7d 	bl	8000ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3e0:	4807      	ldr	r0, [pc, #28]	; (800b400 <USART3_IRQHandler+0x7c>)
 800b3e2:	f7f5 fb77 	bl	8000ad4 <HAL_GPIO_WritePin>
		}

	}

}
 800b3e6:	bf00      	nop
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20004078 	.word	0x20004078
 800b3f4:	20004054 	.word	0x20004054
 800b3f8:	20004168 	.word	0x20004168
 800b3fc:	40021000 	.word	0x40021000
 800b400:	40020c00 	.word	0x40020c00

0800b404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b414:	d101      	bne.n	800b41a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b416:	f7f5 f87d 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b422:	b480      	push	{r7}
 800b424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b426:	bf00      	nop
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b436:	2300      	movs	r3, #0
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	4b12      	ldr	r3, [pc, #72]	; (800b484 <HAL_MspInit+0x54>)
 800b43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b43e:	4a11      	ldr	r2, [pc, #68]	; (800b484 <HAL_MspInit+0x54>)
 800b440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b444:	6453      	str	r3, [r2, #68]	; 0x44
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <HAL_MspInit+0x54>)
 800b448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b452:	2300      	movs	r3, #0
 800b454:	603b      	str	r3, [r7, #0]
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <HAL_MspInit+0x54>)
 800b458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45a:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <HAL_MspInit+0x54>)
 800b45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b460:	6413      	str	r3, [r2, #64]	; 0x40
 800b462:	4b08      	ldr	r3, [pc, #32]	; (800b484 <HAL_MspInit+0x54>)
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b46e:	2200      	movs	r2, #0
 800b470:	210f      	movs	r1, #15
 800b472:	f06f 0001 	mvn.w	r0, #1
 800b476:	f7f5 f947 	bl	8000708 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b47a:	bf00      	nop
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	40023800 	.word	0x40023800

0800b488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b490:	f107 0314 	add.w	r3, r7, #20
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	609a      	str	r2, [r3, #8]
 800b49c:	60da      	str	r2, [r3, #12]
 800b49e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a19      	ldr	r2, [pc, #100]	; (800b50c <HAL_I2C_MspInit+0x84>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d12c      	bne.n	800b504 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	613b      	str	r3, [r7, #16]
 800b4ae:	4b18      	ldr	r3, [pc, #96]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	4a17      	ldr	r2, [pc, #92]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4b4:	f043 0302 	orr.w	r3, r3, #2
 800b4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ba:	4b15      	ldr	r3, [pc, #84]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4be:	f003 0302 	and.w	r3, r3, #2
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800b4c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b4ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4cc:	2312      	movs	r3, #18
 800b4ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b4d8:	2304      	movs	r3, #4
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4dc:	f107 0314 	add.w	r3, r7, #20
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	480c      	ldr	r0, [pc, #48]	; (800b514 <HAL_I2C_MspInit+0x8c>)
 800b4e4:	f7f5 f95c 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	4b08      	ldr	r3, [pc, #32]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	4a07      	ldr	r2, [pc, #28]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4f6:	6413      	str	r3, [r2, #64]	; 0x40
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <HAL_I2C_MspInit+0x88>)
 800b4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b504:	bf00      	nop
 800b506:	3728      	adds	r7, #40	; 0x28
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	40005400 	.word	0x40005400
 800b510:	40023800 	.word	0x40023800
 800b514:	40020400 	.word	0x40020400

0800b518 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	; 0x28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b520:	f107 0314 	add.w	r3, r7, #20
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	605a      	str	r2, [r3, #4]
 800b52a:	609a      	str	r2, [r3, #8]
 800b52c:	60da      	str	r2, [r3, #12]
 800b52e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a28      	ldr	r2, [pc, #160]	; (800b5d8 <HAL_I2S_MspInit+0xc0>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d14a      	bne.n	800b5d0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b53a:	2300      	movs	r3, #0
 800b53c:	613b      	str	r3, [r7, #16]
 800b53e:	4b27      	ldr	r3, [pc, #156]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b542:	4a26      	ldr	r2, [pc, #152]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b548:	6413      	str	r3, [r2, #64]	; 0x40
 800b54a:	4b24      	ldr	r3, [pc, #144]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b552:	613b      	str	r3, [r7, #16]
 800b554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	4b20      	ldr	r3, [pc, #128]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55e:	4a1f      	ldr	r2, [pc, #124]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b560:	f043 0301 	orr.w	r3, r3, #1
 800b564:	6313      	str	r3, [r2, #48]	; 0x30
 800b566:	4b1d      	ldr	r3, [pc, #116]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b572:	2300      	movs	r3, #0
 800b574:	60bb      	str	r3, [r7, #8]
 800b576:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	4a18      	ldr	r2, [pc, #96]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b57c:	f043 0304 	orr.w	r3, r3, #4
 800b580:	6313      	str	r3, [r2, #48]	; 0x30
 800b582:	4b16      	ldr	r3, [pc, #88]	; (800b5dc <HAL_I2S_MspInit+0xc4>)
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	60bb      	str	r3, [r7, #8]
 800b58c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800b58e:	2310      	movs	r3, #16
 800b590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b592:	2302      	movs	r3, #2
 800b594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b596:	2300      	movs	r3, #0
 800b598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b59a:	2300      	movs	r3, #0
 800b59c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b59e:	2306      	movs	r3, #6
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	480d      	ldr	r0, [pc, #52]	; (800b5e0 <HAL_I2S_MspInit+0xc8>)
 800b5aa:	f7f5 f8f9 	bl	80007a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800b5ae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800b5b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b5c0:	2306      	movs	r3, #6
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5c4:	f107 0314 	add.w	r3, r7, #20
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4806      	ldr	r0, [pc, #24]	; (800b5e4 <HAL_I2S_MspInit+0xcc>)
 800b5cc:	f7f5 f8e8 	bl	80007a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b5d0:	bf00      	nop
 800b5d2:	3728      	adds	r7, #40	; 0x28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	40003c00 	.word	0x40003c00
 800b5dc:	40023800 	.word	0x40023800
 800b5e0:	40020000 	.word	0x40020000
 800b5e4:	40020800 	.word	0x40020800

0800b5e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	609a      	str	r2, [r3, #8]
 800b5fc:	60da      	str	r2, [r3, #12]
 800b5fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a19      	ldr	r2, [pc, #100]	; (800b66c <HAL_SPI_MspInit+0x84>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d12b      	bne.n	800b662 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]
 800b60e:	4b18      	ldr	r3, [pc, #96]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b612:	4a17      	ldr	r2, [pc, #92]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b618:	6453      	str	r3, [r2, #68]	; 0x44
 800b61a:	4b15      	ldr	r3, [pc, #84]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	4b11      	ldr	r3, [pc, #68]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62e:	4a10      	ldr	r2, [pc, #64]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b630:	f043 0301 	orr.w	r3, r3, #1
 800b634:	6313      	str	r3, [r2, #48]	; 0x30
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <HAL_SPI_MspInit+0x88>)
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800b642:	23e0      	movs	r3, #224	; 0xe0
 800b644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b646:	2302      	movs	r3, #2
 800b648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b64e:	2300      	movs	r3, #0
 800b650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b652:	2305      	movs	r3, #5
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	4619      	mov	r1, r3
 800b65c:	4805      	ldr	r0, [pc, #20]	; (800b674 <HAL_SPI_MspInit+0x8c>)
 800b65e:	f7f5 f89f 	bl	80007a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b662:	bf00      	nop
 800b664:	3728      	adds	r7, #40	; 0x28
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	40013000 	.word	0x40013000
 800b670:	40023800 	.word	0x40023800
 800b674:	40020000 	.word	0x40020000

0800b678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08c      	sub	sp, #48	; 0x30
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b680:	f107 031c 	add.w	r3, r7, #28
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	605a      	str	r2, [r3, #4]
 800b68a:	609a      	str	r2, [r3, #8]
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a4a      	ldr	r2, [pc, #296]	; (800b7c0 <HAL_UART_MspInit+0x148>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d134      	bne.n	800b704 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b69a:	2300      	movs	r3, #0
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	4b49      	ldr	r3, [pc, #292]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	4a48      	ldr	r2, [pc, #288]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b6aa:	4b46      	ldr	r3, [pc, #280]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b2:	61bb      	str	r3, [r7, #24]
 800b6b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	617b      	str	r3, [r7, #20]
 800b6ba:	4b42      	ldr	r3, [pc, #264]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	4a41      	ldr	r2, [pc, #260]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6c0:	f043 0301 	orr.w	r3, r3, #1
 800b6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b6c6:	4b3f      	ldr	r3, [pc, #252]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b6e2:	2307      	movs	r3, #7
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e6:	f107 031c 	add.w	r3, r7, #28
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4836      	ldr	r0, [pc, #216]	; (800b7c8 <HAL_UART_MspInit+0x150>)
 800b6ee:	f7f5 f857 	bl	80007a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2105      	movs	r1, #5
 800b6f6:	2026      	movs	r0, #38	; 0x26
 800b6f8:	f7f5 f806 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b6fc:	2026      	movs	r0, #38	; 0x26
 800b6fe:	f7f5 f81f 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b702:	e058      	b.n	800b7b6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a30      	ldr	r2, [pc, #192]	; (800b7cc <HAL_UART_MspInit+0x154>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d153      	bne.n	800b7b6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b70e:	2300      	movs	r3, #0
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	4b2c      	ldr	r3, [pc, #176]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	4a2b      	ldr	r2, [pc, #172]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b71c:	6413      	str	r3, [r2, #64]	; 0x40
 800b71e:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b726:	613b      	str	r3, [r7, #16]
 800b728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	4b25      	ldr	r3, [pc, #148]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b732:	4a24      	ldr	r2, [pc, #144]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b734:	f043 0302 	orr.w	r3, r3, #2
 800b738:	6313      	str	r3, [r2, #48]	; 0x30
 800b73a:	4b22      	ldr	r3, [pc, #136]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73e:	f003 0302 	and.w	r3, r3, #2
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b746:	2300      	movs	r3, #0
 800b748:	60bb      	str	r3, [r7, #8]
 800b74a:	4b1e      	ldr	r3, [pc, #120]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74e:	4a1d      	ldr	r2, [pc, #116]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b750:	f043 0308 	orr.w	r3, r3, #8
 800b754:	6313      	str	r3, [r2, #48]	; 0x30
 800b756:	4b1b      	ldr	r3, [pc, #108]	; (800b7c4 <HAL_UART_MspInit+0x14c>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	f003 0308 	and.w	r3, r3, #8
 800b75e:	60bb      	str	r3, [r7, #8]
 800b760:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b768:	2302      	movs	r3, #2
 800b76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b770:	2303      	movs	r3, #3
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b774:	2307      	movs	r3, #7
 800b776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b778:	f107 031c 	add.w	r3, r7, #28
 800b77c:	4619      	mov	r1, r3
 800b77e:	4814      	ldr	r0, [pc, #80]	; (800b7d0 <HAL_UART_MspInit+0x158>)
 800b780:	f7f5 f80e 	bl	80007a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b78a:	2302      	movs	r3, #2
 800b78c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b792:	2303      	movs	r3, #3
 800b794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b796:	2307      	movs	r3, #7
 800b798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b79a:	f107 031c 	add.w	r3, r7, #28
 800b79e:	4619      	mov	r1, r3
 800b7a0:	480b      	ldr	r0, [pc, #44]	; (800b7d0 <HAL_UART_MspInit+0x158>)
 800b7a2:	f7f4 fffd 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2105      	movs	r1, #5
 800b7aa:	2027      	movs	r0, #39	; 0x27
 800b7ac:	f7f4 ffac 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b7b0:	2027      	movs	r0, #39	; 0x27
 800b7b2:	f7f4 ffc5 	bl	8000740 <HAL_NVIC_EnableIRQ>
}
 800b7b6:	bf00      	nop
 800b7b8:	3730      	adds	r7, #48	; 0x30
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	40004400 	.word	0x40004400
 800b7c4:	40023800 	.word	0x40023800
 800b7c8:	40020000 	.word	0x40020000
 800b7cc:	40004800 	.word	0x40004800
 800b7d0:	40020400 	.word	0x40020400

0800b7d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08c      	sub	sp, #48	; 0x30
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	201c      	movs	r0, #28
 800b7ea:	f7f4 ff8d 	bl	8000708 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800b7ee:	201c      	movs	r0, #28
 800b7f0:	f7f4 ffa6 	bl	8000740 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	4b20      	ldr	r3, [pc, #128]	; (800b87c <HAL_InitTick+0xa8>)
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	4a1f      	ldr	r2, [pc, #124]	; (800b87c <HAL_InitTick+0xa8>)
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	6413      	str	r3, [r2, #64]	; 0x40
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <HAL_InitTick+0xa8>)
 800b806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b808:	f003 0301 	and.w	r3, r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b810:	f107 0210 	add.w	r2, r7, #16
 800b814:	f107 0314 	add.w	r3, r7, #20
 800b818:	4611      	mov	r1, r2
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f8 f8ba 	bl	8003994 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b820:	f7f8 f890 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 800b824:	4603      	mov	r3, r0
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	4a14      	ldr	r2, [pc, #80]	; (800b880 <HAL_InitTick+0xac>)
 800b82e:	fba2 2303 	umull	r2, r3, r2, r3
 800b832:	0c9b      	lsrs	r3, r3, #18
 800b834:	3b01      	subs	r3, #1
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800b838:	4b12      	ldr	r3, [pc, #72]	; (800b884 <HAL_InitTick+0xb0>)
 800b83a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b83e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800b840:	4b10      	ldr	r3, [pc, #64]	; (800b884 <HAL_InitTick+0xb0>)
 800b842:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b846:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800b848:	4a0e      	ldr	r2, [pc, #56]	; (800b884 <HAL_InitTick+0xb0>)
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800b84e:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <HAL_InitTick+0xb0>)
 800b850:	2200      	movs	r2, #0
 800b852:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b854:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <HAL_InitTick+0xb0>)
 800b856:	2200      	movs	r2, #0
 800b858:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800b85a:	480a      	ldr	r0, [pc, #40]	; (800b884 <HAL_InitTick+0xb0>)
 800b85c:	f7f8 fa6e 	bl	8003d3c <HAL_TIM_Base_Init>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d104      	bne.n	800b870 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800b866:	4807      	ldr	r0, [pc, #28]	; (800b884 <HAL_InitTick+0xb0>)
 800b868:	f7f8 fa9d 	bl	8003da6 <HAL_TIM_Base_Start_IT>
 800b86c:	4603      	mov	r3, r0
 800b86e:	e000      	b.n	800b872 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
}
 800b872:	4618      	mov	r0, r3
 800b874:	3730      	adds	r7, #48	; 0x30
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40023800 	.word	0x40023800
 800b880:	431bde83 	.word	0x431bde83
 800b884:	20004200 	.word	0x20004200

0800b888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b88c:	bf00      	nop
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b896:	b480      	push	{r7}
 800b898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b89a:	e7fe      	b.n	800b89a <HardFault_Handler+0x4>

0800b89c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b8a0:	e7fe      	b.n	800b8a0 <MemManage_Handler+0x4>

0800b8a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b8a6:	e7fe      	b.n	800b8a6 <BusFault_Handler+0x4>

0800b8a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b8ac:	e7fe      	b.n	800b8ac <UsageFault_Handler+0x4>

0800b8ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b8b2:	bf00      	nop
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b8c0:	4802      	ldr	r0, [pc, #8]	; (800b8cc <TIM2_IRQHandler+0x10>)
 800b8c2:	f7f8 fa94 	bl	8003dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b8c6:	bf00      	nop
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20004200 	.word	0x20004200

0800b8d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b8d4:	4802      	ldr	r0, [pc, #8]	; (800b8e0 <OTG_FS_IRQHandler+0x10>)
 800b8d6:	f7f5 fbc1 	bl	800105c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b8da:	bf00      	nop
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	20004624 	.word	0x20004624

0800b8e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b8ec:	4b11      	ldr	r3, [pc, #68]	; (800b934 <_sbrk+0x50>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d102      	bne.n	800b8fa <_sbrk+0x16>
		heap_end = &end;
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <_sbrk+0x50>)
 800b8f6:	4a10      	ldr	r2, [pc, #64]	; (800b938 <_sbrk+0x54>)
 800b8f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b8fa:	4b0e      	ldr	r3, [pc, #56]	; (800b934 <_sbrk+0x50>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b900:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <_sbrk+0x50>)
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4413      	add	r3, r2
 800b908:	466a      	mov	r2, sp
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d907      	bls.n	800b91e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b90e:	f000 fb77 	bl	800c000 <__errno>
 800b912:	4602      	mov	r2, r0
 800b914:	230c      	movs	r3, #12
 800b916:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b918:	f04f 33ff 	mov.w	r3, #4294967295
 800b91c:	e006      	b.n	800b92c <_sbrk+0x48>
	}

	heap_end += incr;
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <_sbrk+0x50>)
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4413      	add	r3, r2
 800b926:	4a03      	ldr	r2, [pc, #12]	; (800b934 <_sbrk+0x50>)
 800b928:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b92a:	68fb      	ldr	r3, [r7, #12]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20004058 	.word	0x20004058
 800b938:	200048f0 	.word	0x200048f0

0800b93c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b940:	4b16      	ldr	r3, [pc, #88]	; (800b99c <SystemInit+0x60>)
 800b942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b946:	4a15      	ldr	r2, [pc, #84]	; (800b99c <SystemInit+0x60>)
 800b948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b94c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b950:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <SystemInit+0x64>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <SystemInit+0x64>)
 800b956:	f043 0301 	orr.w	r3, r3, #1
 800b95a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b95c:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <SystemInit+0x64>)
 800b95e:	2200      	movs	r2, #0
 800b960:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <SystemInit+0x64>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a0e      	ldr	r2, [pc, #56]	; (800b9a0 <SystemInit+0x64>)
 800b968:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b96c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b970:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b972:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <SystemInit+0x64>)
 800b974:	4a0b      	ldr	r2, [pc, #44]	; (800b9a4 <SystemInit+0x68>)
 800b976:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <SystemInit+0x64>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a08      	ldr	r2, [pc, #32]	; (800b9a0 <SystemInit+0x64>)
 800b97e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b982:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <SystemInit+0x64>)
 800b986:	2200      	movs	r2, #0
 800b988:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b98a:	4b04      	ldr	r3, [pc, #16]	; (800b99c <SystemInit+0x60>)
 800b98c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b990:	609a      	str	r2, [r3, #8]
#endif
}
 800b992:	bf00      	nop
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	e000ed00 	.word	0xe000ed00
 800b9a0:	40023800 	.word	0x40023800
 800b9a4:	24003010 	.word	0x24003010

0800b9a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	490e      	ldr	r1, [pc, #56]	; (800b9e8 <MX_USB_HOST_Init+0x40>)
 800b9b0:	480e      	ldr	r0, [pc, #56]	; (800b9ec <MX_USB_HOST_Init+0x44>)
 800b9b2:	f7fa fe01 	bl	80065b8 <USBH_Init>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b9bc:	f7ff fd31 	bl	800b422 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b9c0:	490b      	ldr	r1, [pc, #44]	; (800b9f0 <MX_USB_HOST_Init+0x48>)
 800b9c2:	480a      	ldr	r0, [pc, #40]	; (800b9ec <MX_USB_HOST_Init+0x44>)
 800b9c4:	f7fa feae 	bl	8006724 <USBH_RegisterClass>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b9ce:	f7ff fd28 	bl	800b422 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b9d2:	4806      	ldr	r0, [pc, #24]	; (800b9ec <MX_USB_HOST_Init+0x44>)
 800b9d4:	f7fa ff32 	bl	800683c <USBH_Start>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b9de:	f7ff fd20 	bl	800b422 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b9e2:	bf00      	nop
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800b9f5 	.word	0x0800b9f5
 800b9ec:	20004240 	.word	0x20004240
 800b9f0:	20000008 	.word	0x20000008

0800b9f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d819      	bhi.n	800ba3c <USBH_UserProcess+0x48>
 800ba08:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <USBH_UserProcess+0x1c>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800ba3d 	.word	0x0800ba3d
 800ba14:	0800ba2d 	.word	0x0800ba2d
 800ba18:	0800ba3d 	.word	0x0800ba3d
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba25 	.word	0x0800ba25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba24:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <USBH_UserProcess+0x58>)
 800ba26:	2203      	movs	r2, #3
 800ba28:	701a      	strb	r2, [r3, #0]
  break;
 800ba2a:	e008      	b.n	800ba3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba2c:	4b07      	ldr	r3, [pc, #28]	; (800ba4c <USBH_UserProcess+0x58>)
 800ba2e:	2202      	movs	r2, #2
 800ba30:	701a      	strb	r2, [r3, #0]
  break;
 800ba32:	e004      	b.n	800ba3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <USBH_UserProcess+0x58>)
 800ba36:	2201      	movs	r2, #1
 800ba38:	701a      	strb	r2, [r3, #0]
  break;
 800ba3a:	e000      	b.n	800ba3e <USBH_UserProcess+0x4a>

  default:
  break;
 800ba3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	2000405c 	.word	0x2000405c

0800ba50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	; 0x28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba58:	f107 0314 	add.w	r3, r7, #20
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	605a      	str	r2, [r3, #4]
 800ba62:	609a      	str	r2, [r3, #8]
 800ba64:	60da      	str	r2, [r3, #12]
 800ba66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba70:	d147      	bne.n	800bb02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba72:	2300      	movs	r3, #0
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	4b25      	ldr	r3, [pc, #148]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800ba78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7a:	4a24      	ldr	r2, [pc, #144]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800ba7c:	f043 0301 	orr.w	r3, r3, #1
 800ba80:	6313      	str	r3, [r2, #48]	; 0x30
 800ba82:	4b22      	ldr	r3, [pc, #136]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ba8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ba9c:	f107 0314 	add.w	r3, r7, #20
 800baa0:	4619      	mov	r1, r3
 800baa2:	481b      	ldr	r0, [pc, #108]	; (800bb10 <HAL_HCD_MspInit+0xc0>)
 800baa4:	f7f4 fe7c 	bl	80007a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800baa8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800baac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baae:	2302      	movs	r3, #2
 800bab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bab6:	2300      	movs	r3, #0
 800bab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baba:	230a      	movs	r3, #10
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800babe:	f107 0314 	add.w	r3, r7, #20
 800bac2:	4619      	mov	r1, r3
 800bac4:	4812      	ldr	r0, [pc, #72]	; (800bb10 <HAL_HCD_MspInit+0xc0>)
 800bac6:	f7f4 fe6b 	bl	80007a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800baca:	4b10      	ldr	r3, [pc, #64]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800bacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bace:	4a0f      	ldr	r2, [pc, #60]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800bad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad4:	6353      	str	r3, [r2, #52]	; 0x34
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800bae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bae4:	6453      	str	r3, [r2, #68]	; 0x44
 800bae6:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <HAL_HCD_MspInit+0xbc>)
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800baf2:	2200      	movs	r2, #0
 800baf4:	2105      	movs	r1, #5
 800baf6:	2043      	movs	r0, #67	; 0x43
 800baf8:	f7f4 fe06 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bafc:	2043      	movs	r0, #67	; 0x43
 800bafe:	f7f4 fe1f 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb02:	bf00      	nop
 800bb04:	3728      	adds	r7, #40	; 0x28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	40023800 	.word	0x40023800
 800bb10:	40020000 	.word	0x40020000

0800bb14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fb fb37 	bl	8007196 <USBH_LL_IncTimer>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fb fb7b 	bl	800723a <USBH_LL_Connect>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fb fb90 	bl	8007280 <USBH_LL_Disconnect>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
 800bb74:	4613      	mov	r3, r2
 800bb76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fb fbc5 	bl	800730e <USBH_LL_NotifyURBChange>
#endif
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fb fb25 	bl	80071ea <USBH_LL_PortEnabled>
} 
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fb fb31 	bl	800721e <USBH_LL_PortDisabled>
} 
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d12a      	bne.n	800bc2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bbd6:	4a18      	ldr	r2, [pc, #96]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbe2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbe8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bbec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbf0:	2208      	movs	r2, #8
 800bbf2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bbf4:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <USBH_LL_Init+0x74>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc00:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <USBH_LL_Init+0x74>)
 800bc02:	2202      	movs	r2, #2
 800bc04:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <USBH_LL_Init+0x74>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc0c:	480a      	ldr	r0, [pc, #40]	; (800bc38 <USBH_LL_Init+0x74>)
 800bc0e:	f7f4 ff95 	bl	8000b3c <HAL_HCD_Init>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc18:	f7ff fc03 	bl	800b422 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc1c:	4806      	ldr	r0, [pc, #24]	; (800bc38 <USBH_LL_Init+0x74>)
 800bc1e:	f7f5 fb99 	bl	8001354 <HAL_HCD_GetCurrentFrame>
 800bc22:	4603      	mov	r3, r0
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7fb faa6 	bl	8007178 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20004624 	.word	0x20004624

0800bc3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f5 fb06 	bl	8001264 <HAL_HCD_Start>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 f95c 	bl	800bf1c <USBH_Get_USB_Status>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f5 fb0e 	bl	80012aa <HAL_HCD_Stop>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 f941 	bl	800bf1c <USBH_Get_USB_Status>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7f5 fb58 	bl	8001370 <HAL_HCD_GetCurrentSpeed>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d007      	beq.n	800bcd6 <USBH_LL_GetSpeed+0x2e>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d302      	bcc.n	800bcd0 <USBH_LL_GetSpeed+0x28>
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d006      	beq.n	800bcdc <USBH_LL_GetSpeed+0x34>
 800bcce:	e008      	b.n	800bce2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd4:	e008      	b.n	800bce8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcda:	e005      	b.n	800bce8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bcdc:	2302      	movs	r3, #2
 800bcde:	73fb      	strb	r3, [r7, #15]
    break;
 800bce0:	e002      	b.n	800bce8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800bce2:	2301      	movs	r3, #1
 800bce4:	73fb      	strb	r3, [r7, #15]
    break;
 800bce6:	bf00      	nop
  }
  return  speed;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7f5 faeb 	bl	80012e4 <HAL_HCD_ResetPort>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 f901 	bl	800bf1c <USBH_Get_USB_Status>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd3a:	78fa      	ldrb	r2, [r7, #3]
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7f5 faf3 	bl	800132a <HAL_HCD_HC_GetXferCount>
 800bd44:	4603      	mov	r3, r0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd4e:	b590      	push	{r4, r7, lr}
 800bd50:	b089      	sub	sp, #36	; 0x24
 800bd52:	af04      	add	r7, sp, #16
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	70fb      	strb	r3, [r7, #3]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70bb      	strb	r3, [r7, #2]
 800bd64:	4613      	mov	r3, r2
 800bd66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bd76:	787c      	ldrb	r4, [r7, #1]
 800bd78:	78ba      	ldrb	r2, [r7, #2]
 800bd7a:	78f9      	ldrb	r1, [r7, #3]
 800bd7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	f7f4 ff37 	bl	8000c00 <HAL_HCD_HC_Init>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 f8bf 	bl	800bf1c <USBH_Get_USB_Status>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd90      	pop	{r4, r7, pc}

0800bdac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f4 ffb0 	bl	8000d30 <HAL_HCD_HC_Halt>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 f8a0 	bl	800bf1c <USBH_Get_USB_Status>
 800bddc:	4603      	mov	r3, r0
 800bdde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bdea:	b590      	push	{r4, r7, lr}
 800bdec:	b089      	sub	sp, #36	; 0x24
 800bdee:	af04      	add	r7, sp, #16
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	70fb      	strb	r3, [r7, #3]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	70bb      	strb	r3, [r7, #2]
 800be00:	4613      	mov	r3, r2
 800be02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800be12:	787c      	ldrb	r4, [r7, #1]
 800be14:	78ba      	ldrb	r2, [r7, #2]
 800be16:	78f9      	ldrb	r1, [r7, #3]
 800be18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	4623      	mov	r3, r4
 800be2e:	f7f4 ffa3 	bl	8000d78 <HAL_HCD_HC_SubmitRequest>
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f86f 	bl	800bf1c <USBH_Get_USB_Status>
 800be3e:	4603      	mov	r3, r0
 800be40:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800be42:	7bbb      	ldrb	r3, [r7, #14]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd90      	pop	{r4, r7, pc}

0800be4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7f5 fa4c 	bl	8001300 <HAL_HCD_HC_GetURBState>
 800be68:	4603      	mov	r3, r0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	460b      	mov	r3, r1
 800be7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800be84:	2b01      	cmp	r3, #1
 800be86:	d103      	bne.n	800be90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f872 	bl	800bf74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be90:	20c8      	movs	r0, #200	; 0xc8
 800be92:	f7f4 fb5f 	bl	8000554 <HAL_Delay>
  return USBH_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
 800beac:	4613      	mov	r3, r2
 800beae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800beb6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	440b      	add	r3, r1
 800bec6:	333b      	adds	r3, #59	; 0x3b
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bece:	78fa      	ldrb	r2, [r7, #3]
 800bed0:	68f9      	ldr	r1, [r7, #12]
 800bed2:	4613      	mov	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	440b      	add	r3, r1
 800bedc:	3350      	adds	r3, #80	; 0x50
 800bede:	78ba      	ldrb	r2, [r7, #2]
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	e009      	b.n	800bef8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bee4:	78fa      	ldrb	r2, [r7, #3]
 800bee6:	68f9      	ldr	r1, [r7, #12]
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	440b      	add	r3, r1
 800bef2:	3351      	adds	r3, #81	; 0x51
 800bef4:	78ba      	ldrb	r2, [r7, #2]
 800bef6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7f4 fb20 	bl	8000554 <HAL_Delay>
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d817      	bhi.n	800bf60 <USBH_Get_USB_Status+0x44>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <USBH_Get_USB_Status+0x1c>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf4f 	.word	0x0800bf4f
 800bf40:	0800bf55 	.word	0x0800bf55
 800bf44:	0800bf5b 	.word	0x0800bf5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4c:	e00b      	b.n	800bf66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf4e:	2302      	movs	r3, #2
 800bf50:	73fb      	strb	r3, [r7, #15]
    break;
 800bf52:	e008      	b.n	800bf66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf54:	2301      	movs	r3, #1
 800bf56:	73fb      	strb	r3, [r7, #15]
    break;
 800bf58:	e005      	b.n	800bf66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf5e:	e002      	b.n	800bf66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf60:	2302      	movs	r3, #2
 800bf62:	73fb      	strb	r3, [r7, #15]
    break;
 800bf64:	bf00      	nop
  }
  return usb_status;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800bf7e:	79fb      	ldrb	r3, [r7, #7]
 800bf80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bf82:	79fb      	ldrb	r3, [r7, #7]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
 800bf8c:	e001      	b.n	800bf92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	461a      	mov	r2, r3
 800bf96:	2101      	movs	r1, #1
 800bf98:	4803      	ldr	r0, [pc, #12]	; (800bfa8 <MX_DriverVbusFS+0x34>)
 800bf9a:	f7f4 fd9b 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	40020800 	.word	0x40020800

0800bfac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bfac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bfe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bfb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bfb2:	e003      	b.n	800bfbc <LoopCopyDataInit>

0800bfb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bfb4:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bfb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bfb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bfba:	3104      	adds	r1, #4

0800bfbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bfbc:	480b      	ldr	r0, [pc, #44]	; (800bfec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bfbe:	4b0c      	ldr	r3, [pc, #48]	; (800bff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bfc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bfc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bfc4:	d3f6      	bcc.n	800bfb4 <CopyDataInit>
  ldr  r2, =_sbss
 800bfc6:	4a0b      	ldr	r2, [pc, #44]	; (800bff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bfc8:	e002      	b.n	800bfd0 <LoopFillZerobss>

0800bfca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bfca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bfcc:	f842 3b04 	str.w	r3, [r2], #4

0800bfd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bfd0:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bfd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bfd4:	d3f9      	bcc.n	800bfca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bfd6:	f7ff fcb1 	bl	800b93c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bfda:	f000 f817 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bfde:	f7fe fdcf 	bl	800ab80 <main>
  bx  lr    
 800bfe2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bfe4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bfe8:	0800c380 	.word	0x0800c380
  ldr  r0, =_sdata
 800bfec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bff0:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800bff4:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800bff8:	200048ec 	.word	0x200048ec

0800bffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bffc:	e7fe      	b.n	800bffc <ADC_IRQHandler>
	...

0800c000 <__errno>:
 800c000:	4b01      	ldr	r3, [pc, #4]	; (800c008 <__errno+0x8>)
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	20000030 	.word	0x20000030

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4e0d      	ldr	r6, [pc, #52]	; (800c044 <__libc_init_array+0x38>)
 800c010:	4c0d      	ldr	r4, [pc, #52]	; (800c048 <__libc_init_array+0x3c>)
 800c012:	1ba4      	subs	r4, r4, r6
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	2500      	movs	r5, #0
 800c018:	42a5      	cmp	r5, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	4e0b      	ldr	r6, [pc, #44]	; (800c04c <__libc_init_array+0x40>)
 800c01e:	4c0c      	ldr	r4, [pc, #48]	; (800c050 <__libc_init_array+0x44>)
 800c020:	f000 f8f6 	bl	800c210 <_init>
 800c024:	1ba4      	subs	r4, r4, r6
 800c026:	10a4      	asrs	r4, r4, #2
 800c028:	2500      	movs	r5, #0
 800c02a:	42a5      	cmp	r5, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c034:	4798      	blx	r3
 800c036:	3501      	adds	r5, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c03e:	4798      	blx	r3
 800c040:	3501      	adds	r5, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800c378 	.word	0x0800c378
 800c048:	0800c378 	.word	0x0800c378
 800c04c:	0800c378 	.word	0x0800c378
 800c050:	0800c37c 	.word	0x0800c37c

0800c054 <malloc>:
 800c054:	4b02      	ldr	r3, [pc, #8]	; (800c060 <malloc+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f000 b86d 	b.w	800c138 <_malloc_r>
 800c05e:	bf00      	nop
 800c060:	20000030 	.word	0x20000030

0800c064 <free>:
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <free+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f000 b817 	b.w	800c09c <_free_r>
 800c06e:	bf00      	nop
 800c070:	20000030 	.word	0x20000030

0800c074 <memcpy>:
 800c074:	b510      	push	{r4, lr}
 800c076:	1e43      	subs	r3, r0, #1
 800c078:	440a      	add	r2, r1
 800c07a:	4291      	cmp	r1, r2
 800c07c:	d100      	bne.n	800c080 <memcpy+0xc>
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c088:	e7f7      	b.n	800c07a <memcpy+0x6>

0800c08a <memset>:
 800c08a:	4402      	add	r2, r0
 800c08c:	4603      	mov	r3, r0
 800c08e:	4293      	cmp	r3, r2
 800c090:	d100      	bne.n	800c094 <memset+0xa>
 800c092:	4770      	bx	lr
 800c094:	f803 1b01 	strb.w	r1, [r3], #1
 800c098:	e7f9      	b.n	800c08e <memset+0x4>
	...

0800c09c <_free_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d045      	beq.n	800c130 <_free_r+0x94>
 800c0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a8:	1f0c      	subs	r4, r1, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfb8      	it	lt
 800c0ae:	18e4      	addlt	r4, r4, r3
 800c0b0:	f000 f8ac 	bl	800c20c <__malloc_lock>
 800c0b4:	4a1f      	ldr	r2, [pc, #124]	; (800c134 <_free_r+0x98>)
 800c0b6:	6813      	ldr	r3, [r2, #0]
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	b933      	cbnz	r3, 800c0ca <_free_r+0x2e>
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	6014      	str	r4, [r2, #0]
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c6:	f000 b8a2 	b.w	800c20e <__malloc_unlock>
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	d90c      	bls.n	800c0e8 <_free_r+0x4c>
 800c0ce:	6821      	ldr	r1, [r4, #0]
 800c0d0:	1862      	adds	r2, r4, r1
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bf04      	itt	eq
 800c0d6:	681a      	ldreq	r2, [r3, #0]
 800c0d8:	685b      	ldreq	r3, [r3, #4]
 800c0da:	6063      	str	r3, [r4, #4]
 800c0dc:	bf04      	itt	eq
 800c0de:	1852      	addeq	r2, r2, r1
 800c0e0:	6022      	streq	r2, [r4, #0]
 800c0e2:	6004      	str	r4, [r0, #0]
 800c0e4:	e7ec      	b.n	800c0c0 <_free_r+0x24>
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	b10a      	cbz	r2, 800c0f0 <_free_r+0x54>
 800c0ec:	42a2      	cmp	r2, r4
 800c0ee:	d9fa      	bls.n	800c0e6 <_free_r+0x4a>
 800c0f0:	6819      	ldr	r1, [r3, #0]
 800c0f2:	1858      	adds	r0, r3, r1
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d10b      	bne.n	800c110 <_free_r+0x74>
 800c0f8:	6820      	ldr	r0, [r4, #0]
 800c0fa:	4401      	add	r1, r0
 800c0fc:	1858      	adds	r0, r3, r1
 800c0fe:	4282      	cmp	r2, r0
 800c100:	6019      	str	r1, [r3, #0]
 800c102:	d1dd      	bne.n	800c0c0 <_free_r+0x24>
 800c104:	6810      	ldr	r0, [r2, #0]
 800c106:	6852      	ldr	r2, [r2, #4]
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	4401      	add	r1, r0
 800c10c:	6019      	str	r1, [r3, #0]
 800c10e:	e7d7      	b.n	800c0c0 <_free_r+0x24>
 800c110:	d902      	bls.n	800c118 <_free_r+0x7c>
 800c112:	230c      	movs	r3, #12
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	e7d3      	b.n	800c0c0 <_free_r+0x24>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	1821      	adds	r1, r4, r0
 800c11c:	428a      	cmp	r2, r1
 800c11e:	bf04      	itt	eq
 800c120:	6811      	ldreq	r1, [r2, #0]
 800c122:	6852      	ldreq	r2, [r2, #4]
 800c124:	6062      	str	r2, [r4, #4]
 800c126:	bf04      	itt	eq
 800c128:	1809      	addeq	r1, r1, r0
 800c12a:	6021      	streq	r1, [r4, #0]
 800c12c:	605c      	str	r4, [r3, #4]
 800c12e:	e7c7      	b.n	800c0c0 <_free_r+0x24>
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	20004060 	.word	0x20004060

0800c138 <_malloc_r>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	1ccd      	adds	r5, r1, #3
 800c13c:	f025 0503 	bic.w	r5, r5, #3
 800c140:	3508      	adds	r5, #8
 800c142:	2d0c      	cmp	r5, #12
 800c144:	bf38      	it	cc
 800c146:	250c      	movcc	r5, #12
 800c148:	2d00      	cmp	r5, #0
 800c14a:	4606      	mov	r6, r0
 800c14c:	db01      	blt.n	800c152 <_malloc_r+0x1a>
 800c14e:	42a9      	cmp	r1, r5
 800c150:	d903      	bls.n	800c15a <_malloc_r+0x22>
 800c152:	230c      	movs	r3, #12
 800c154:	6033      	str	r3, [r6, #0]
 800c156:	2000      	movs	r0, #0
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	f000 f857 	bl	800c20c <__malloc_lock>
 800c15e:	4a21      	ldr	r2, [pc, #132]	; (800c1e4 <_malloc_r+0xac>)
 800c160:	6814      	ldr	r4, [r2, #0]
 800c162:	4621      	mov	r1, r4
 800c164:	b991      	cbnz	r1, 800c18c <_malloc_r+0x54>
 800c166:	4c20      	ldr	r4, [pc, #128]	; (800c1e8 <_malloc_r+0xb0>)
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	b91b      	cbnz	r3, 800c174 <_malloc_r+0x3c>
 800c16c:	4630      	mov	r0, r6
 800c16e:	f000 f83d 	bl	800c1ec <_sbrk_r>
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	4629      	mov	r1, r5
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f838 	bl	800c1ec <_sbrk_r>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d124      	bne.n	800c1ca <_malloc_r+0x92>
 800c180:	230c      	movs	r3, #12
 800c182:	6033      	str	r3, [r6, #0]
 800c184:	4630      	mov	r0, r6
 800c186:	f000 f842 	bl	800c20e <__malloc_unlock>
 800c18a:	e7e4      	b.n	800c156 <_malloc_r+0x1e>
 800c18c:	680b      	ldr	r3, [r1, #0]
 800c18e:	1b5b      	subs	r3, r3, r5
 800c190:	d418      	bmi.n	800c1c4 <_malloc_r+0x8c>
 800c192:	2b0b      	cmp	r3, #11
 800c194:	d90f      	bls.n	800c1b6 <_malloc_r+0x7e>
 800c196:	600b      	str	r3, [r1, #0]
 800c198:	50cd      	str	r5, [r1, r3]
 800c19a:	18cc      	adds	r4, r1, r3
 800c19c:	4630      	mov	r0, r6
 800c19e:	f000 f836 	bl	800c20e <__malloc_unlock>
 800c1a2:	f104 000b 	add.w	r0, r4, #11
 800c1a6:	1d23      	adds	r3, r4, #4
 800c1a8:	f020 0007 	bic.w	r0, r0, #7
 800c1ac:	1ac3      	subs	r3, r0, r3
 800c1ae:	d0d3      	beq.n	800c158 <_malloc_r+0x20>
 800c1b0:	425a      	negs	r2, r3
 800c1b2:	50e2      	str	r2, [r4, r3]
 800c1b4:	e7d0      	b.n	800c158 <_malloc_r+0x20>
 800c1b6:	428c      	cmp	r4, r1
 800c1b8:	684b      	ldr	r3, [r1, #4]
 800c1ba:	bf16      	itet	ne
 800c1bc:	6063      	strne	r3, [r4, #4]
 800c1be:	6013      	streq	r3, [r2, #0]
 800c1c0:	460c      	movne	r4, r1
 800c1c2:	e7eb      	b.n	800c19c <_malloc_r+0x64>
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	6849      	ldr	r1, [r1, #4]
 800c1c8:	e7cc      	b.n	800c164 <_malloc_r+0x2c>
 800c1ca:	1cc4      	adds	r4, r0, #3
 800c1cc:	f024 0403 	bic.w	r4, r4, #3
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	d005      	beq.n	800c1e0 <_malloc_r+0xa8>
 800c1d4:	1a21      	subs	r1, r4, r0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f000 f808 	bl	800c1ec <_sbrk_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d0cf      	beq.n	800c180 <_malloc_r+0x48>
 800c1e0:	6025      	str	r5, [r4, #0]
 800c1e2:	e7db      	b.n	800c19c <_malloc_r+0x64>
 800c1e4:	20004060 	.word	0x20004060
 800c1e8:	20004064 	.word	0x20004064

0800c1ec <_sbrk_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4c06      	ldr	r4, [pc, #24]	; (800c208 <_sbrk_r+0x1c>)
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	f7ff fb74 	bl	800b8e4 <_sbrk>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_sbrk_r+0x1a>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	b103      	cbz	r3, 800c206 <_sbrk_r+0x1a>
 800c204:	602b      	str	r3, [r5, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	200048e8 	.word	0x200048e8

0800c20c <__malloc_lock>:
 800c20c:	4770      	bx	lr

0800c20e <__malloc_unlock>:
 800c20e:	4770      	bx	lr

0800c210 <_init>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr

0800c21c <_fini>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr
